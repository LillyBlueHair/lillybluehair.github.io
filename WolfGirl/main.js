(function () {
	'use strict';

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var bcmodsdk = {};

	(function (exports) {
		(function(){const o="1.2.0";function e(o){alert("Mod ERROR:\n"+o);const e=new Error(o);throw console.error(e),e}const t=new TextEncoder;function n(o){return !!o&&"object"==typeof o&&!Array.isArray(o)}function r(o){const e=new Set;return o.filter((o=>!e.has(o)&&e.add(o)))}const i=new Map,a=new Set;function c(o){a.has(o)||(a.add(o),console.warn(o));}function s(o){const e=[],t=new Map,n=new Set;for(const r of f.values()){const i=r.patching.get(o.name);if(i){e.push(...i.hooks);for(const[e,a]of i.patches.entries())t.has(e)&&t.get(e)!==a&&c(`ModSDK: Mod '${r.name}' is patching function ${o.name} with same pattern that is already applied by different mod, but with different pattern:\nPattern:\n${e}\nPatch1:\n${t.get(e)||""}\nPatch2:\n${a}`),t.set(e,a),n.add(r.name);}}e.sort(((o,e)=>e.priority-o.priority));const r=function(o,e){if(0===e.size)return o;let t=o.toString().replaceAll("\r\n","\n");for(const[n,r]of e.entries())t.includes(n)||c(`ModSDK: Patching ${o.name}: Patch ${n} not applied`),t=t.replaceAll(n,r);return (0, eval)(`(${t})`)}(o.original,t);let i=function(e){var t,i;const a=null===(i=(t=m.errorReporterHooks).hookChainExit)||void 0===i?void 0:i.call(t,o.name,n),c=r.apply(this,e);return null==a||a(),c};for(let t=e.length-1;t>=0;t--){const n=e[t],r=i;i=function(e){var t,i;const a=null===(i=(t=m.errorReporterHooks).hookEnter)||void 0===i?void 0:i.call(t,o.name,n.mod),c=n.hook.apply(this,[e,o=>{if(1!==arguments.length||!Array.isArray(e))throw new Error(`Mod ${n.mod} failed to call next hook: Expected args to be array, got ${typeof o}`);return r.call(this,o)}]);return null==a||a(),c};}return {hooks:e,patches:t,patchesSources:n,enter:i,final:r}}function l(o,e=!1){let r=i.get(o);if(r)e&&(r.precomputed=s(r));else {let e=window;const a=o.split(".");for(let t=0;t<a.length-1;t++)if(e=e[a[t]],!n(e))throw new Error(`ModSDK: Function ${o} to be patched not found; ${a.slice(0,t+1).join(".")} is not object`);const c=e[a[a.length-1]];if("function"!=typeof c)throw new Error(`ModSDK: Function ${o} to be patched not found`);const l=function(o){let e=-1;for(const n of t.encode(o)){let o=255&(e^n);for(let e=0;e<8;e++)o=1&o?-306674912^o>>>1:o>>>1;e=e>>>8^o;}return ((-1^e)>>>0).toString(16).padStart(8,"0").toUpperCase()}(c.toString().replaceAll("\r\n","\n")),d={name:o,original:c,originalHash:l};r=Object.assign(Object.assign({},d),{precomputed:s(d),router:()=>{},context:e,contextProperty:a[a.length-1]}),r.router=function(o){return function(...e){return o.precomputed.enter.apply(this,[e])}}(r),i.set(o,r),e[r.contextProperty]=r.router;}return r}function d(){for(const o of i.values())o.precomputed=s(o);}function p(){const o=new Map;for(const[e,t]of i)o.set(e,{name:e,original:t.original,originalHash:t.originalHash,sdkEntrypoint:t.router,currentEntrypoint:t.context[t.contextProperty],hookedByMods:r(t.precomputed.hooks.map((o=>o.mod))),patchedByMods:Array.from(t.precomputed.patchesSources)});return o}const f=new Map;function u(o){f.get(o.name)!==o&&e(`Failed to unload mod '${o.name}': Not registered`),f.delete(o.name),o.loaded=!1,d();}function g(o,t){o&&"object"==typeof o||e("Failed to register mod: Expected info object, got "+typeof o),"string"==typeof o.name&&o.name||e("Failed to register mod: Expected name to be non-empty string, got "+typeof o.name);let r=`'${o.name}'`;"string"==typeof o.fullName&&o.fullName||e(`Failed to register mod ${r}: Expected fullName to be non-empty string, got ${typeof o.fullName}`),r=`'${o.fullName} (${o.name})'`,"string"!=typeof o.version&&e(`Failed to register mod ${r}: Expected version to be string, got ${typeof o.version}`),o.repository||(o.repository=void 0),void 0!==o.repository&&"string"!=typeof o.repository&&e(`Failed to register mod ${r}: Expected repository to be undefined or string, got ${typeof o.version}`),null==t&&(t={}),t&&"object"==typeof t||e(`Failed to register mod ${r}: Expected options to be undefined or object, got ${typeof t}`);const i=!0===t.allowReplace,a=f.get(o.name);a&&(a.allowReplace&&i||e(`Refusing to load mod ${r}: it is already loaded and doesn't allow being replaced.\nWas the mod loaded multiple times?`),u(a));const c=o=>{let e=g.patching.get(o.name);return e||(e={hooks:[],patches:new Map},g.patching.set(o.name,e)),e},s=(o,t)=>(...n)=>{var i,a;const c=null===(a=(i=m.errorReporterHooks).apiEndpointEnter)||void 0===a?void 0:a.call(i,o,g.name);g.loaded||e(`Mod ${r} attempted to call SDK function after being unloaded`);const s=t(...n);return null==c||c(),s},p={unload:s("unload",(()=>u(g))),hookFunction:s("hookFunction",((o,t,n)=>{"string"==typeof o&&o||e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`);const i=l(o),a=c(i);"number"!=typeof t&&e(`Mod ${r} failed to hook function '${o}': Expected priority number, got ${typeof t}`),"function"!=typeof n&&e(`Mod ${r} failed to hook function '${o}': Expected hook function, got ${typeof n}`);const s={mod:g.name,priority:t,hook:n};return a.hooks.push(s),d(),()=>{const o=a.hooks.indexOf(s);o>=0&&(a.hooks.splice(o,1),d());}})),patchFunction:s("patchFunction",((o,t)=>{"string"==typeof o&&o||e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`);const i=l(o),a=c(i);n(t)||e(`Mod ${r} failed to patch function '${o}': Expected patches object, got ${typeof t}`);for(const[n,i]of Object.entries(t))"string"==typeof i?a.patches.set(n,i):null===i?a.patches.delete(n):e(`Mod ${r} failed to patch function '${o}': Invalid format of patch '${n}'`);d();})),removePatches:s("removePatches",(o=>{"string"==typeof o&&o||e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`);const t=l(o);c(t).patches.clear(),d();})),callOriginal:s("callOriginal",((o,t,n)=>{"string"==typeof o&&o||e(`Mod ${r} failed to call a function: Expected function name string, got ${typeof o}`);const i=l(o);return Array.isArray(t)||e(`Mod ${r} failed to call a function: Expected args array, got ${typeof t}`),i.original.apply(null!=n?n:globalThis,t)})),getOriginalHash:s("getOriginalHash",(o=>{"string"==typeof o&&o||e(`Mod ${r} failed to get hash: Expected function name string, got ${typeof o}`);return l(o).originalHash}))},g={name:o.name,fullName:o.fullName,version:o.version,repository:o.repository,allowReplace:i,api:p,loaded:!0,patching:new Map};return f.set(o.name,g),Object.freeze(p)}function h(){const o=[];for(const e of f.values())o.push({name:e.name,fullName:e.fullName,version:e.version,repository:e.repository});return o}let m;const y=void 0===window.bcModSdk?window.bcModSdk=function(){const e={version:o,apiVersion:1,registerMod:g,getModsInfo:h,getPatchingInfo:p,errorReporterHooks:Object.seal({apiEndpointEnter:null,hookEnter:null,hookChainExit:null})};return m=e,Object.freeze(e)}():(n(window.bcModSdk)||e("Failed to init Mod SDK: Name already in use"),1!==window.bcModSdk.apiVersion&&e(`Failed to init Mod SDK: Different version already loaded ('1.2.0' vs '${window.bcModSdk.version}')`),window.bcModSdk.version!==o&&alert(`Mod SDK warning: Loading different but compatible versions ('1.2.0' vs '${window.bcModSdk.version}')\nOne of mods you are using is using an old version of SDK. It will work for now but please inform author to update`),window.bcModSdk);return (Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=y),y})();
	} (bcmodsdk));
	var bcMod = getDefaultExportFromCjs(bcmodsdk);

	const ModVersion = "0.7.15";
	const ModName = "BC Wolf Girl";
	const GIT_REPO = "https://gitlab.com/dynilath/BCWolfGirl";
	const SCRIPT_ID = "WolfGirlLoader";
	const FrequentDataKeyName = "BCWolfGirlFrequentData";
	const DataKeyName = "BCWolfGirlData";
	const CUSTOM_ACTION_TAG = "SSCustomAction";

	class IController {
	    hook(mod, lateHook) { }
	    ;
	}
	function DetailedItemTestRecords(items, compare) {
	    const oldrecords = CollectTypeRecords(items);
	    if (!oldrecords)
	        return TReject("itemprop");
	    return compare(oldrecords);
	}
	function StandardItemTestRecords(items, target) {
	    const oldrecords = CollectTypeRecords(items);
	    if (!oldrecords)
	        return TReject("itemprop");
	    if (RecordsEqual(target, oldrecords))
	        return TReject("unchanged");
	    return TAccept();
	}
	const TReject = (reason) => ({ rejected: reason });
	const TAccept = () => ({});
	function RecordsEqual(target, cur) {
	    if (target.length > cur.length)
	        return false;
	    return target.every((e, idx) => Object.keys(e).every(key => e[key] === cur[idx][key]));
	}
	function CollectTypeRecords(items) {
	    if (items.some(item => item.Property?.TypeRecord === undefined))
	        return undefined;
	    return items.map(item => item.Property?.TypeRecord);
	}
	function StandardItemSetRecords(player, items, target) {
	    items.forEach((item, idx) => target[idx] && item && ExtendedItemSetOptionByRecord(player, item, target[idx]));
	}

	function calcRecordValue$5(type) {
	    if (type === "off")
	        return { o: 0 };
	    else if (type === "edge")
	        return { o: 1 };
	    else if (type === "deny")
	        return { o: 2 };
	    else
	        return { o: 0 };
	}
	class ArousalCtrl extends IController {
	    constructor() {
	        super(...arguments);
	        this.type = "ArousalCtrl";
	        this.target_item = ["ItemPelvis"];
	        this.available_ctrls = ["off", "edge", "deny"];
	    }
	    set(player, item, type) {
	        const [pelvis] = item;
	        if (!pelvis)
	            return;
	        const oldLock = pelvis.Property?.LockedBy;
	        const oldMember = pelvis.Property?.LockMemberNumber;
	        ExtendedItemSetOptionByRecord(player, pelvis, calcRecordValue$5(type));
	        ExtendedItemInit(player, pelvis);
	        if (oldLock && oldMember)
	            InventoryLock(player, pelvis, oldLock, oldMember);
	    }
	    test(player, item, type) {
	        return DetailedItemTestRecords(item, (oldrecords) => {
	            const [pelvis] = oldrecords;
	            if (pelvis.o !== undefined) {
	                if (pelvis.o === calcRecordValue$5(type).o)
	                    return TReject("unchanged");
	                return TAccept();
	            }
	            return TReject("itemprop");
	        });
	    }
	}

	function calcRecordValue$4(type) {
	    if (type === "off")
	        return [{ typed: 0 }, { typed: 0 }];
	    else if (type === "base")
	        return [{ typed: 2 }, { typed: 2 }];
	    else if (type === "total")
	        return [{ typed: 1 }, { typed: 1 }];
	    else
	        return [];
	}
	class FeetCtrl extends IController {
	    constructor() {
	        super(...arguments);
	        this.type = "FeetCtrl";
	        this.target_item = ["ItemFeet", "ItemLegs", "ItemBoots"];
	        this.available_ctrls = ["off", "base", "total"];
	    }
	    set(player, item, type) {
	        StandardItemSetRecords(player, item, calcRecordValue$4(type));
	    }
	    test(player, item, type) {
	        return StandardItemTestRecords(item, calcRecordValue$4(type));
	    }
	}

	function calcRecordValue$3(type) {
	    if (type === "off")
	        return [{ typed: 1 }, { typed: 0 }];
	    else if (type === "base")
	        return [{ typed: 0 }, { typed: 1 }];
	    else if (type === "total")
	        return [{ typed: 0 }, { typed: 3 }];
	    else
	        return [{ typed: 1 }, { typed: 0 }];
	}
	class HandsCtrl extends IController {
	    constructor() {
	        super(...arguments);
	        this.type = "HandsCtrl";
	        this.target_item = ["ItemHands", "ItemArms"];
	        this.available_ctrls = ["off", "base", "total"];
	    }
	    set(player, item, type) {
	        StandardItemSetRecords(player, item, calcRecordValue$3(type));
	    }
	    test(player, item, type) {
	        return StandardItemTestRecords(item, calcRecordValue$3(type));
	    }
	}

	const GlobalKey = "BCUtilities";
	function AquireGlobal(key, defaultValue) {
	    return new Promise((resolve) => {
	        if (!window[GlobalKey])
	            window[GlobalKey] = {};
	        const global = window[GlobalKey];
	        const handlerGetter = global[key];
	        if (handlerGetter && typeof handlerGetter === "function") {
	            const handler = handlerGetter();
	            if (handler) {
	                resolve(handler);
	                return;
	            }
	        }
	        const handler = defaultValue();
	        global[key] = () => handler;
	        resolve(handler);
	    });
	}

	class OrgasmMonitor {
	    constructor(mod) {
	        this.events = {
	            Orgasm: [],
	            Resist: [],
	            Ruined: []
	        };
	        mod.hookFunction('ActivityOrgasmStop', 9, (args, next) => {
	            const C = args[0];
	            const Progress = args[1];
	            if (C.IsPlayer()) {
	                if (ActivityOrgasmRuined)
	                    this.events.Ruined.forEach(_ => _(C));
	                else if (Progress >= 60)
	                    this.events.Resist.forEach(_ => _(C));
	            }
	            next(args);
	        });
	        mod.hookFunction('ActivityOrgasmStart', 9, (args, next) => {
	            const C = args[0];
	            if (C.IsPlayer() && !ActivityOrgasmRuined)
	                this.events.Orgasm.forEach(_ => _(C));
	            next(args);
	        });
	    }
	    onOrgasm(event) {
	        this.events.Orgasm.push(event);
	    }
	    onResist(event) {
	        this.events.Resist.push(event);
	    }
	    onRuined(event) {
	        this.events.Ruined.push(event);
	    }
	    on(event, callback) {
	        this.events[event]?.push(callback);
	    }
	    static init(mod) {
	        return AquireGlobal("OrgasmMonitor", () => new OrgasmMonitor(mod));
	    }
	}

	function isTargetCharacter(v) {
	    return typeof v.TargetCharacter === "number";
	}
	function isSourceCharacter(v) {
	    return typeof v.SourceCharacter === "number";
	}
	function isActivityName(v) {
	    return typeof v.ActivityName === "string";
	}
	function isFocusAssetGroup(v) {
	    return typeof v.FocusGroupName === "string";
	}
	function isActivityAsset(v) {
	    return v.Tag === "ActivityAsset";
	}
	function ActivityDeconstruct(dict) {
	    const ret = dict.reduce((pv, cv) => {
	        if (isTargetCharacter(cv))
	            pv.TargetCharacter = cv.TargetCharacter;
	        else if (isSourceCharacter(cv))
	            pv.SourceCharacter = cv.SourceCharacter;
	        else if (isActivityName(cv))
	            pv.ActivityName = cv.ActivityName;
	        else if (isFocusAssetGroup(cv))
	            pv.ActivityGroup = cv.FocusGroupName;
	        else if (isActivityAsset(cv)) {
	            pv.Asset = {
	                AssetName: cv.AssetName,
	                GroupName: cv.GroupName,
	                CraftName: cv.CraftName || "",
	            };
	        }
	        return pv;
	    }, { BCDictionary: dict });
	    return [ret.TargetCharacter, ret.SourceCharacter, ret.ActivityName, ret.ActivityGroup].some((x) => x === undefined)
	        ? undefined
	        : ret;
	}
	class ChatRoomAction {
	    static get instance() {
	        return ChatRoomAction._instance;
	    }
	    static init(tag) {
	        if (ChatRoomAction._instance)
	            return;
	        ChatRoomAction._instance = new ChatRoomAction(tag);
	    }
	    constructor(CUSTOM_ACTION_TAG) {
	        this.CUSTOM_ACTION_TAG = CUSTOM_ACTION_TAG;
	        const DictItem = (Content) => { return { Tag: `MISSING TEXT IN "Interface.csv": ${CUSTOM_ACTION_TAG}`, Text: Content }; };
	        this.SendAction = (Content) => {
	            if (!Content || !Player || !Player.MemberNumber)
	                return;
	            ServerSend("ChatRoomChat", {
	                Content: CUSTOM_ACTION_TAG,
	                Type: "Action",
	                Dictionary: [DictItem(Content)]
	            });
	        };
	        this.SendChat = (Content) => {
	            if (!Content || !Player || !Player.MemberNumber)
	                return;
	            ServerSend("ChatRoomChat", {
	                Content: Content,
	                Type: "Chat"
	            });
	        };
	        this.LocalAction = (Content) => {
	            if (!Content || !Player || !Player.MemberNumber)
	                return;
	            ChatRoomMessage({
	                Sender: Player.MemberNumber,
	                Content: CUSTOM_ACTION_TAG,
	                Type: "Action",
	                Dictionary: [DictItem(Content)],
	            });
	        };
	        this.LocalInfo = (Content) => {
	            if (!Content || !Player || !Player.MemberNumber)
	                return;
	            ChatRoomMessage({
	                Sender: Player.MemberNumber,
	                Content: Content,
	                Type: "LocalMessage",
	            });
	        };
	        this.SendWhisper = (target, Content) => {
	            if (!Content || !Player || !Player.MemberNumber)
	                return;
	            ServerSend("ChatRoomChat", {
	                Content: Content,
	                Type: "Whisper",
	                Target: target
	            });
	        };
	        this.SendBeep = (target, Content) => {
	            if (!Content || !Player || !Player.MemberNumber)
	                return;
	            ServerSend("AccountBeep", {
	                MemberNumber: target,
	                Message: Content,
	                BeepType: "",
	                IsSecret: false
	            });
	        };
	    }
	}
	ChatRoomAction._instance = undefined;

	function Result(cal) {
	    return cal instanceof Function ? cal() : cal;
	}
	function IsStringArray$1(v) {
	    return Array.isArray(v) && v.every(i => typeof i === "string");
	}

	function buildOutfitItemMap(src) {
	    return new Map(src.map(_ => [_.Asset.Group, _]));
	}
	function buildAppMap(src) {
	    return new Map(src.Appearance.map(_ => [_.Asset.Group.Name, _]));
	}
	function buildItemsMap(src) {
	    return new Map(src.Appearance.filter(_ => _.Asset.Group.Category === "Item").map(_ => [_.Asset.Group.Name, _]));
	}
	function CheckOutfitItem(V, E, option) {
	    if (!V || !E)
	        return false;
	    if (V.Asset.Name !== E.Asset.Name)
	        return false;
	    if (V.Asset.AllowLock) {
	        if (!V.Property)
	            return false;
	        if (option?.lock === true && !V.Property?.LockedBy)
	            return false;
	        if (typeof option?.lock === "string" && V.Property?.LockedBy !== option.lock)
	            return false;
	    }
	    if (option?.group && V.Asset.Group.Name !== E.Asset.Group)
	        return false;
	    if (option?.craft) {
	        if (typeof option.craft === "boolean") {
	            if (!V.Craft || V.Craft.Name !== E.Craft.Name || V.Craft.Description !== E.Craft.Description)
	                return false;
	        }
	        else {
	            if (!V.Craft || V.Craft.Name !== E.Craft.Name || V.Craft.Description !== E.Craft.Description
	                || V.Craft.MemberNumber !== option.craft.MemberNumber || V.Craft.MemberName !== option.craft.MemberName)
	                return false;
	        }
	    }
	    return true;
	}
	function CheckOutfitItemCE(C, E, option) {
	    if (!E)
	        return false;
	    const iV = C.Appearance.find(e => e.Asset.Group.Name === E.Asset.Group);
	    if (!iV)
	        return false;
	    return CheckOutfitItem(iV, E, option);
	}
	function OutfitItemManifest(Wearer, E, option) {
	    const Asset = AssetGet(Wearer.AssetFamily, E.Asset.Group, E.Asset.Name);
	    if (!Asset)
	        return;
	    const Color = Result(E.Color);
	    const Craft = option?.craft && E.Craft && {
	        ...E.Craft,
	        MemberNumber: option.craft.MemberNumber,
	        MemberName: option.craft.MemberName,
	        Item: E.Asset.Name,
	        ItemProperty: null,
	        Color: typeof Color === "string" ? Color : Color.join(","),
	        Lock: E.Craft?.Lock ? E.Craft.Lock : "",
	        Private: true,
	    };
	    let ret = { Asset, Color, Craft };
	    ExtendedItemInit(Wearer, ret, false, false);
	    ret.Difficulty = option?.difficulty ?? Asset.Difficulty;
	    const props = E.Property && Result(E.Property);
	    if (props) {
	        if (props.TypeRecord)
	            ExtendedItemSetOptionByRecord(Wearer, ret, props.TypeRecord, { push: false });
	        if (!ret.Property)
	            ret.Property = {};
	        const rProps = ret.Property;
	        for (const key in props) {
	            const k = key;
	            if (key === "TypeRecord")
	                continue;
	            else if (key === "Effect") {
	                if (IsStringArray$1(props.Effect)) {
	                    if (IsStringArray$1(rProps.Effect)) {
	                        props.Effect.forEach(e => {
	                            if (rProps.Effect && !rProps.Effect.includes(e)) {
	                                rProps.Effect.push(e);
	                            }
	                        });
	                    }
	                    else {
	                        rProps.Effect = Array.from(props.Effect);
	                    }
	                }
	            }
	            else if (key === "ExcludeEffect") {
	                if (IsStringArray$1(props.ExcludeEffect) && IsStringArray$1(rProps.Effect)) {
	                    rProps.Effect = rProps.Effect.filter(e => !props.ExcludeEffect?.includes(e));
	                }
	            }
	            else if (rProps[k] === undefined || typeof rProps[k] === typeof props[k]) {
	                Object.assign(rProps, { [k]: props[k] });
	            }
	        }
	    }
	    if (option?.lock) {
	        const lock = AssetGet(Wearer.AssetFamily, "ItemMisc", option.lock.Lock);
	        if (lock)
	            InventoryLock(Wearer, ret, { Asset: lock }, option.lock.MemberNumber, false);
	    }
	    else if (E.Craft?.Lock) {
	        const lock = AssetGet(Wearer.AssetFamily, "ItemMisc", E.Craft.Lock);
	        if (lock)
	            InventoryLock(Wearer, ret, { Asset: lock }, null, false);
	    }
	    return ret;
	}

	function AppearanceUpdate(C, ...Group) {
	    if (ChatRoomData) {
	        CharacterRefresh(C, false);
	        if (Group.length > 0)
	            Group.forEach(G => { ChatRoomCharacterItemUpdate(C, G); });
	        else
	            ChatRoomCharacterUpdate(C);
	    }
	    else {
	        CharacterRefresh(C, true);
	    }
	}

	class IActivityCustom {
	    adjustDict(Content, dict) { return dict; }
	    ;
	    init(mod) { }
	    ;
	    constructor(mode, onBodyparts, activity, image) {
	        this.mode = mode;
	        this.onBodyparts = onBodyparts;
	        this.activity = activity;
	        this.image = image;
	    }
	}
	class IActivityExtended {
	    adjustDict(Content, dict) { return dict; }
	    ;
	    init(mod) { }
	    ;
	    constructor(mode, onBodyparts, activity) {
	        this.mode = mode;
	        this.onBodyparts = onBodyparts;
	        this.activity = activity;
	    }
	}
	class IActivityPrerequisite {
	}
	class ActivityFacility {
	    constructor(mod) {
	        this.mod = mod;
	        this.prereqMap = new Map();
	        this.customActMap = new Map();
	        this.actHandlers = new Map();
	        mod.hookFunction("ActivityCheckPrerequisite", 1, (args, next) => {
	            const [prereq, acting, acted, group] = args;
	            const cusPrereq = this.prereqMap.get(prereq);
	            if (cusPrereq)
	                return cusPrereq.test(acting, acted, group);
	            return next(args);
	        });
	        mod.hookFunction("DrawGetImage", 1, (args, next) => {
	            const values = args[0].split("/");
	            if (values[2] === "Activity") {
	                const act = this.customActMap.get(values[3].split(".")[0]);
	                if (act)
	                    return next([act.image]);
	            }
	            return next(args);
	        });
	        mod.hookFunction("ActivityDictionaryText", 1, (args, next) => {
	            const splits = args[0].split("-");
	            const activity_name = splits[splits.length - 1];
	            return this.customActMap.get(activity_name)?.text(args[0]) ?? next(args);
	        });
	        mod.hookFunction("ServerSend", 1, (args, next) => {
	            if (args[0] !== "ChatRoomChat" || args[1]?.Type !== "Activity")
	                return next(args);
	            const dict = args[1].Dictionary;
	            if (!dict)
	                return next(args);
	            const d = ActivityDeconstruct(dict);
	            if (!d)
	                return next(args);
	            const myact = this.actHandlers.get(d.ActivityName);
	            if (!myact)
	                return next(args);
	            args[1].Dictionary = myact.reduce((acc, act) => act.adjustDict(args[1].Content, acc), dict);
	            return next(args);
	        });
	    }
	    run(player, sender, info) {
	        this.actHandlers.get(info.ActivityName)?.forEach(h => {
	            if (h.onBodyparts !== undefined && !h.onBodyparts.includes(info.ActivityGroup))
	                return;
	            if (h.mode === "onself" && info.TargetCharacter !== player.MemberNumber)
	                return;
	            if (h.mode === "selfonother"
	                && (info.TargetCharacter === player.MemberNumber
	                    || info.SourceCharacter !== player.MemberNumber))
	                return;
	            h.on(player, sender, info);
	        });
	    }
	    addPrerequisite(prereq) {
	        this.prereqMap.set(prereq.name, prereq);
	    }
	    addActivity(act) {
	        this.customActMap.set(act.activity.Name, act);
	        ActivityFemale3DCG?.push(act.activity);
	        ActivityFemale3DCGOrdering?.push(act.activity.Name);
	        const acts = this.actHandlers.get(act.activity.Name);
	        if (acts)
	            acts.push(act);
	        else
	            this.actHandlers.set(act.activity.Name, [act]);
	        act.init(this.mod);
	    }
	    addActivityExtension(act) {
	        const acts = this.actHandlers.get(act.activity);
	        if (acts)
	            acts.push(act);
	        else
	            this.actHandlers.set(act.activity, [act]);
	        act.init(this.mod);
	    }
	}

	class ChatRoomHandler {
	    constructor(mod) {
	        this.playerJoin = [];
	        this.playerLeave = [];
	        this.receiveChatOrWhisper = [];
	        this.receiveActivity = [];
	        mod.hookFunction("ChatRoomSync", 1, (args, next) => {
	            if (Player && (!ChatRoomData || !Player.LastChatRoom || ChatRoomData.Name !== Player.LastChatRoom.Name)) {
	                const pl = Player;
	                this.playerJoin.forEach(f => f(pl));
	            }
	            return next(args);
	        });
	        mod.hookFunction("ServerSend", 1, (args, next) => {
	            if (args[0] === "ChatRoomLeave") {
	                if (Player) {
	                    const pl = Player;
	                    this.playerLeave.forEach(f => f(pl));
	                }
	            }
	            return next(args);
	        });
	        mod.callOriginal("ChatRoomRegisterMessageHandler", [this.ChatRoomMsgHandler(mod)]);
	    }
	    onAfterPlayerJoin(f) { this.playerJoin.push(f); }
	    onBeforePlayerLeave(f) { this.playerLeave.push(f); }
	    onReceiveChatWhisperEmote(f) { this.receiveChatOrWhisper.push(f); }
	    onReceiveActivity(f) { this.receiveActivity.push(f); }
	    ChatRoomMsgHandler(mod) {
	        return {
	            Description: "BC-utilities Message Hook",
	            Priority: 90,
	            Callback: (data, sender, msg, metadata) => {
	                if (Player && Player.MemberNumber) {
	                    const pl = Player;
	                    if (data.Type === "Chat" || data.Type === "Whisper" || data.Type === "Emote") {
	                        const type = data.Type;
	                        if (mod.callOriginal("ChatRoomCharacterViewIsActive", []) || mod.callOriginal("ChatRoomMapViewCharacterIsHearable", [sender]))
	                            this.receiveChatOrWhisper.forEach(f => f(pl, sender, msg, type));
	                    }
	                    if (data.Type === "Activity" && data.Dictionary) {
	                        const d = ActivityDeconstruct(data.Dictionary);
	                        if (d)
	                            this.receiveActivity.forEach(f => f(pl, sender, d));
	                    }
	                }
	                return false;
	            },
	        };
	    }
	    static init(mod) {
	        return AquireGlobal("ChatRoomHandler", () => new ChatRoomHandler(mod));
	    }
	}

	const OutfitItems = [
	    {
	        Asset: {
	            Name: "ElectronicTag",
	            Group: "ItemNeckAccessories",
	        },
	        Color: ["#595959", "Default", "#FFFFFF"],
	        Craft: {
	            Name: "Wolf Girl Tag Mk.II",
	            Description: "An exquisite electronic display board, originally used as an operating panel and display screen in the Wolf Girl and Cat Girl suits, but after the successful miniaturization of holographic projection technology, the interactive function of the device was abandoned. Now it is just a simple electronic tag, used to display the wearer's identity and affiliation, and also as a pass and payment method when going out alone. The low-power screen only needs body temperature to operate continuously, and does not require power supply and maintenance. Although the original interactive function has been abandoned, the wiring and pads on the internal circuit board have not been cancelled. After a certain modification, many functions can be expanded.",
	            Property: "Comfy",
	        },
	        Property: { OverridePriority: 41 },
	    },
	    {
	        Asset: {
	            Name: "VibeHeartPiercings",
	            Group: "ItemNipplesPiercings",
	        },
	        Color: ["#6C6C6C", "Default"],
	        Craft: {
	            Name: "Wolf Girl Nipple Pleasure Module Mk.II",
	            Description: "The pleasure stimulation module that is clamped on the nipple is also used as a backup positioning beacon to monitor and record every sexual excitement of the wolf girl. It can be linked to the pleasure controller to provide greater pleasure or punishment. Because of its simple and reliable structure and the use of body temperature to provide working energy, it almost does not need to be disassembled for maintenance. It is the cheapest module in the set. There are even frequent activities by second-level agents to buy other wolf girl kits and give away this component. The development engineer of this module suffered a huge blow and had serious psychological barriers for a time. In the end, she stuffed herself into the wolf girl training assembly line and became a wolf girl. It was really a pity.",
	            Property: "Arousing",
	        },
	        Property: { OverridePriority: 13 },
	    },
	    {
	        Asset: {
	            Name: "VibeNippleClamp",
	            Group: "ItemNipples",
	        },
	        Color: ["#787878"],
	        Craft: {
	            Name: "Wolf Girl Multifunctional Nipple Clamp Mk.II",
	            Property: "Arousing",
	            Description: "A pair of small nipple clamps, which clamp the nipples to bring a sense of tightness that cannot be ignored and can vibrate to provide pleasure. However, its power is not high, and the weak pleasure it provides is difficult for the wearer to reach orgasm using only the nipples. Instead, it reminds the wearer of their identity and certain facts of lust at all times. The built-in electric shock module is naturally indispensable, but this generation of electric shock module cancels the defibrillator mode function, because the research found that a large number of reckless owners used this function to punish wolf girls, causing the wolf girls to be in danger of life. We oppose such rude and arrogant behavior, and will blacklist customers who abuse this function.",
	        },
	        Property: { OverridePriority: 22 },
	    },
	    {
	        Asset: {
	            Name: "LockingVibePlug",
	            Group: "ItemButt",
	        },
	        Color: ["Default"],
	        Craft: {
	            Name: "Wolf Girl Anal Control Module Mk.II",
	            Property: "Arousing",
	            Description: "The module inserted into the anus, the new generation of products has added the option of releasing protein glue for permanent bonding in the expansion and locking function. The relevant structure has been proven to be reliable and non-rejecting, and can safely replace the sphincter to control excretion. The installed vibration and thrusting module has upgraded the power and strengthened the structure, avoiding the serious problem of the previous generation of products breaking and damaging in certain extreme use situations, causing physical trauma. The electric shock module limits the maximum power limit to improve battery life. In addition, a converter is installed in the tail compartment, which can slowly convert excrement into energy to provide its own operation, and can also provide energy for other modules in the form of wireless transmission.",
	        },
	    },
	    {
	        Asset: {
	            Name: "VibeHeartClitPiercing",
	            Group: "ItemVulvaPiercings",
	        },
	        Color: ["#595959", "Default"],
	        Craft: {
	            Name: "Wolf Girl Clitoris Pleasure Module Mk.II",
	            Property: "Arousing",
	            Description: "The pleasure stimulation module uses a metal clamp at the base of the clitoris, which is also a backup positioning beacon. It integrates a new generation of sensors to monitor and record the sexual excitement data of the wolf girl every time and links the pleasure control system to perform data analysis to provide greater pleasure rewards or repeated orgasm destruction as punishment. Because of its simple and reliable structure and the use of body temperature to provide working energy, it almost does not need to be disassembled and maintained. However, in the high-power working mode, the anal control module needs to provide additional energy for normal operation. Please do not keep it in full-load operation for a long time, because the heat dissipation problem caused by its small size is very serious and may even burn the circuit.",
	        },
	        Property: { OverridePriority: 13 },
	    },
	    {
	        Asset: {
	            Name: "FuturisticMuzzle",
	            Group: "ItemMouth3",
	        },
	        Color: ["Default", "Default", "Default", "#FF0000"],
	        Craft: {
	            Name: "Wolf Girl Muzzle Outer Layer Additional Module Mk.II",
	            Property: "Comfy",
	            Description: "The muzzle's outer protective system is replaced with a new generation of composite materials. Although the thickness is slightly increased compared to the first generation of wolf girl outer muzzle, there is no need to worry about the extra weight. The built-in air detection and filtration system effectively prevents the wolf girl from inhaling toxic and harmful substances in the air. If necessary, the external air path can be completely closed and the internal compressed air tank can be used for safe breathing for fifteen minutes. The built-in metal mesh and Kevlar lining protect the fragile face. The optional flexible LCD screen can display specific patterns or text on the wolf girl's face to facilitate communication when necessary. The police model can be equipped with a pheromone analysis system to track specific targets.",
	        },
	    },
	    {
	        Asset: {
	            Name: "FuturisticMuzzle",
	            Group: "ItemMouth2",
	        },
	        Color: ["Default"],
	        Craft: {
	            Name: "Wolf Girl Muzzle Mk.II",
	            Property: "Comfy",
	            Description: "The muzzle is used to prevent the wolf girl from uncontrollably spitting saliva everywhere when wearing a ball gag. It has a built-in waterproof layer and water guide belt to prevent saliva accumulation, and a new converter with the same anal control module is added to convert the flowing saliva into energy supply components to ensure that the face is always breathable and dry. The full coverage design of the mouth can prevent the wolf girl from eating privately or accidentally eating outside, but there is no need to worry about feeding problems after wearing it. The mouth is equipped with an eating auxiliary module. After the owner authorizes the unlocking, the mouth can be replenished with water and fed liquid food without removing the mouth gag. However, please do not feed food other than the recommended types, otherwise it may cause damage to the module and possible suffocation.",
	        },
	    },
	    {
	        Asset: {
	            Name: "FuturisticHarnessBallGag",
	            Group: "ItemMouth",
	        },
	        Color: ["#5E5E5E", "#242424", "Default", "Default", "Default"],
	        Craft: {
	            Name: "Wolf girl training ball Mk.II",
	            Property: "Small",
	            Description: "The gag is made of high-strength rubber to prevent the wolf girl from hurting innocent people during the initial training. Most of the time, it will not hinder communication, but it has a built-in sensor to detect what the wolf girl said or tried to say. It can be expanded into a spherical or phallic shape according to the corresponding settings to penetrate deep into the throat to punish and restrict communication. It is also connected to the feeding auxiliary module of the inner layer of the gag. When used with the phallic mode, it can quickly train the wolf girl's oral sex ability. The new generation of products has added a directional sound wave generator to restrict and replace the wolf girl's external communication. The fixed rigging is a metal composite braided cable, which cannot be violently removed without hurting the wolf girl.",
	        },
	        Property: { OverridePriority: 35 },
	    },
	    {
	        Asset: {
	            Name: "FuturisticHarness",
	            Group: "ItemTorso",
	        },
	        Color: ["#666666", "#7A7A7A", "#393939", "#FFFFFF"],
	        Craft: {
	            Name: "Wolf Girl Training Harness Mk.II",
	            Property: "Comfy",
	            Description: "The harness on the wolf girl can be used as a data bus to provide wired data communication connections between modules and to be used as an external signal transmission antenna. Although each module already has the ability to form a wireless network, the existence of the physical link of the harness increases throughput and saves a lot of energy consumption, which is still very necessary. The main body is made of metal composite braided cables, and the interface is also waterproof. It does not need to be removed before entering the water like the previous generation of products. Thanks to its reliable structural strength, it can even be used as a climbing rope and traction rope when necessary, but please note that the original communication function cannot be restored after being disassembled into a climbing rope or traction rope.",
	        },
	    },
	    {
	        Asset: {
	            Name: "HighSecurityHarness",
	            Group: "ItemTorso2",
	        },
	        Color: ["#444444", "Default"],
	        Craft: {
	            Name: "Wolf Girl Harness Outer Frame Mk.II",
	            Property: "Comfy",
	            Description: "The extra frame on the outer layer of the harness is attached to the training harness in most cases, but it can also be used independently. It stores nutrient solution and various medicines, which are prepared and injected into the body in real time according to the control core instructions to ensure that the body is in the best condition at all times. It also has a quick replenishment interface, which makes maintenance simple and convenient. The waist node stores several emergency injections, which can be used to rescue others when necessary. Although this device is a component of the Wolf Girl Training Set, a large number of users purchase this component separately to use medicines. Please note that this product is only a special equipment, not a medical device. EIL is not responsible for possible accidents caused by the use of this component.",
	        },
	        Property: { OverridePriority: 1 },
	    },
	    {
	        Asset: {
	            Name: "SciFiPleasurePanties",
	            Group: "ItemPelvis",
	        },
	        Color: ["#454545", "#202020", "#878787", "#202020", "#878787", "#878787", "Default"],
	        Craft: {
	            Name: "Wolf girl training underwear Mk.II",
	            Property: "Arousing",
	            Description: "The new generation of training underwear has been adapted and connected to the central control component, avoiding the embarrassment of the previous generation of products requiring secondary configuration. The embedded position of the built-in vibrator has been modified to be more reasonable and will not cause bruises to the skin after long-term work, while the electric shock device also limits high-power electric shocks. Although it is acceptable as a punishment, we despise the wanton venting of emotions without regard for the health of the wolf girl. It has a pleasure detection and orgasm control module, which can make the wolf girl stay on the edge of orgasm or destroy the orgasm so that she has no satisfaction, which helps to tame the wolf girl. And the opening is thoughtfully designed, which will not affect excretion and masturbation when the owner allows it.",
	        },
	        Property: { TypeRecord: { c: 0, i: 0, o: 2, s: 0 } },
	    },
	    {
	        Asset: {
	            Name: "FuturisticCuffs",
	            Group: "ItemArms",
	        },
	        Color: ["#4F4F4F", "#353535", "#FFFFFF"],
	        Craft: {
	            Name: "Wolf Girl Bracelet Mk.II",
	            Property: "Comfy",
	            Description: "The restraint control system installed on the arm is a very beautiful decorative ring when not activated. The new generation of products has upgraded the electrical stimulation system, which can maintain the muscle state to avoid atrophy under long-term restraint, and can enhance explosive power to deal with certain emergencies when necessary. The extensive use of composite materials makes the weight lighter than the previous generation while still having ultra-high strength. Even the lowest configuration of this generation of products is equipped with a tactile simulation system, which can provide the wearer with a realistic hug warmth at any time. Whether it is a human or a god, it is never shameful to require the body temperature of another individual. EIL will never lose its focus on emotional and psychological needs.",
	        },
	    },
	    {
	        Asset: {
	            Name: "FuturisticMittens",
	            Group: "ItemHands",
	        },
	        Color: ["#777777", "#6E6E6E", "#3D3D3D", "Default"],
	        Craft: {
	            Name: "Wolf Girl Gloves Mk.II",
	            Property: "Comfy",
	            Description: "The Wolf Girl gloves, which use NMRB technology, abandon the complex and high-power ERMR, are more reliable, lightweight and energy-efficient. The speed of switching between fingerless gloves and normal gloves is nearly three times faster, and anomalies caused by insufficient power supply during failure or mode conversion are avoided. The internal padding has also been upgraded to enhance temperature management and reduce the impact of high temperatures in summer and low temperatures in winter, while the tactile obstruction module has been moved to the wrist locking ring to avoid repeated impacts that cause the module to fail. The optional adsorption climbing module has also become standard, which can also make the Wolf Girl's hands almost completely lose friction and unable to grasp objects.",
	        },
	        Property: { TypeRecord: { typed: 1 } },
	    },
	    {
	        Asset: {
	            Name: "FuturisticAnkleCuffs",
	            Group: "ItemFeet",
	        },
	        Color: ["#000000", "#494949", "#303030", "#FFFFFF"],
	        Craft: {
	            Name: "Wolf Girl Smart Leg Ring Mk.II",
	            Property: "Comfy",
	            Description: "The new ankle restraint control system cancels the automatic connection and locking function of the aggressive sensor, saving more space for installing the limb action controller. After linking the step controller component, the lower limbs' mobility can be fully controlled. The additional action posture stabilization system can prevent the body from losing stability and even falling in almost all extreme situations. Although it helps to provide additional safety in some special scenarios, EIL does not recommend such use, let alone private modification, otherwise the warranty terms will be invalidated, and EIL will not compensate for accidents caused by such application scenarios of the prop.",
	        },
	    },
	    {
	        Asset: {
	            Name: "FuturisticHeels2",
	            Group: "ItemBoots",
	        },
	        Color: ["#212121", "#4A4A4A", "#383838", "#3D3D3D", "#404040", "#3D3D3D", "Default"],
	        Craft: {
	            Name: "Wolf Girl Foot Training System Mk.II",
	            Property: "Comfy",
	            Description: "The high-heeled shoes have metal wires woven into the lining, and the built-in electric structure in the heel can change the height of the heel according to the training progress or reward and punishment rules. The bottom is embedded with a heavy metal plate as a counterweight to increase stability and passively train the leg muscles to prevent muscle atrophy caused by long-term restraint. It is also equipped with a motion sensor to count the amount of exercise, and cooperates with other components to collect data to assist the central controller in making decisions to modify the training plan and modify the nutritional meal formula accordingly to add trace elements to better maintain physical health. The additional neural interference module can be used as a reward to greatly reduce the pain caused by walking in high heels, and can also be linked to the pace controller to take over the movement of the wolf girl.",
	        },
	        Property: { TypeRecord: { typed: 1 } },
	    },
	    {
	        Asset: {
	            Name: "FuturisticLegCuffs",
	            Group: "ItemLegs",
	        },
	        Color: ["#000000", "#4A4A4A", "#383838", "#FFFFFF"],
	        Craft: {
	            Name: "Wolf Girl Step Stance Controller Mk.II",
	            Property: "Comfy",
	            Description: "The pace controller for training elegant walking posture can be connected and completely fixed as part of the control system, which can minimize the ability to struggle and escape. The built-in electrical stimulation module has been upgraded to a version with tactile simulation, which can massage the thigh muscles to give rewards and also provide arousal and teasing. The muscle strength limiter has been replaced with a model that can finely adjust the output. Combined with other leg components, it completely takes over the mobility, so that the owner can play more. Although the second-generation wolf girl suit uses composite materials to reduce weight, this module is still made of alloy as an additional weight to assist stability and prevent muscle and blood vessel problems caused by long-term restraint.",
	        },
	    },
	    {
	        Asset: {
	            Name: "FuturisticVibrator",
	            Group: "ItemVulva",
	        },
	        Color: ["#454545", "#555555", "Default"],
	        Craft: {
	            Name: "Wolf Girl Central Pleasure Controller Mk.II",
	            Property: "Arousing",
	            Description: "The new generation of central pleasure controller is equipped with an advanced computing unit and can be used as a backup central controller. The vibration and thrusting module has a new mechanical expansion function in this version, which can adjust the diameter to a certain extent, fill the vagina to give stronger stimulation, or shrink to a level that can be felt but cannot get pleasure during the climax. The electric shock device also limits the maximum power and trigger conditions, deletes the setting that any sound can trigger the electric shock, and deletes the part of the urination control module in the custom interface so that it can only use a few preset modes, and has a mechanical emergency unlocking to avoid setting errors or some special circumstances that may cause physical damage.",
	        },
	    },
	    {
	        Asset: {
	            Name: "FuturisticEarphones",
	            Group: "ItemEars",
	        },
	        Color: ["#898989", "#2A2A2A", "Default"],
	        Craft: {
	            Name: "Wolf Girl Multi-Purpose Auxiliary Earphones Mk.II",
	            Property: "Comfy",
	            Description: "The microphone array upgrade combined with the new neural interference module can even calculate the launch position of every bullet that passes by in a short time when running at full power. The active noise reduction system also benefits from the module upgrade and has stronger performance. It can accurately locate the faint cry for help in a battlefield full of bullets and spells, and naturally make it so that the wolf girl can only hear the master's words in a busy city. However, the neural interference module will not be open source in the official release, because in the initial testing, we found some situations that distorted the use of the module, and such behavior crossed the bottom line of EIL.",
	        },
	    },
	    {
	        Asset: {
	            Name: "InteractiveVisor",
	            Group: "ItemHead",
	        },
	        Color: ["#5D5D5D"],
	        Craft: {
	            Name: "Wolf Girl Enhanced Auxiliary Goggles Mk.II",
	            Property: "Comfy",
	            Description: "The transparent circuit and battery are integrated into the thin and reliable polymer shell, and the sensor matrix is ​​placed in the temples on both sides. The effective recognition range has been increased to 220 degrees, and the recognition distance and accuracy have been significantly improved, while the old The visual control module has been replaced with a neural interference module, which avoids the shortcomings of poor battery life caused by excessive power consumption and the disadvantages caused by large amounts of heat. With the headphone module, it can perform absolute interference between vision and hearing, and continuously adjust vision. Or you can directly play the training and brainwashing video, but the remote scheduling function of this module has been locked by the hardware to prevent hackers from hijacking the master's instructions.",
	        },
	    },
	    {
	        Asset: { Name: "FuturisticBra", Group: "ItemBreast" },
	        Color: ["#4A4A4A", "#FFFFFF", "#FFFFFF", "#4B4B4B", "#363636"],
	        Craft: {
	            Name: "Wolf Girl Composite Sports Bra Mk.II",
	            Property: "Comfy",
	            Description: "The bra is made of electric muscle and equipped with a motion sensor to adjust the posture in real time. It is thin and soft to avoid the overly tight feeling of the previous generation, while providing sufficient support for the breasts to avoid the unstable center of gravity caused by the shaking of the breasts during high-speed movement. When it detects an attempt to masturbate through the breasts, it will tighten and harden to prevent the wolf girl from getting any pleasure. It can also massage and electrically stimulate the breasts to keep them healthy, and can also provide pleasure as a reward. It has a built-in vital sign monitor and sends physiological data to the terminal in real time, so that the owner can check the wolf girl's physical condition at any time. Although a certain breast enhancement effect was observed during the test, it is not universal. Please do not flash firmware not recommended by EIL at will.",
	        },
	        Property: { TypeRecord: { typed: 2 } },
	    },
	    {
	        Asset: { Name: "FuturisticCollar", Group: "ItemNeck" },
	        Color: ["#606060", "Default", "Default", "Default"],
	        Craft: {
	            Name: "Wolf Girl System Main Control Core Mk.II",
	            Property: "Comfy",
	            Description: "The appearance of the central controller has not changed much, but the computing power and battery life have been upgraded. It can calculate the body parameters and the posture parameters of each component more quickly and accurately for timely adjustment. Although the computing power is strong enough, its ability to parse the virtual currency algorithm has been limited by both software and hardware to avoid being used for other purposes. After installing the expensive communication module, the multiple wolf girls owned by the owner can form a network connection similar to the Misaka network proposed by Academy City at close range, sharing information and processing power among the wolf girls. And it is equipped with additional visual sensors to avoid abnormal environmental perception caused by damaged goggles.",
	        },
	    },
	];
	const OutfitItemsMap = buildOutfitItemMap(OutfitItems);
	const ToolsCrate = {
	    Asset: {
	        Name: "FuturisticCrate",
	        Group: "ItemDevices",
	    },
	    Color: [
	        "#222222",
	        "Default",
	        "#444444",
	        "Default",
	        "Default",
	        "#FF1199",
	        "Default",
	        "#444444",
	        "#555555",
	        "#3B7F2C",
	        "Default",
	        "Default",
	        "#BBBBFF",
	        "Default",
	    ],
	    Craft: {
	        Name: "Wolf Girl Training Facility Maintenance Cabin Mk.II",
	        Property: "Comfy",
	        Description: "The basic wolf girl transport storage cabin has been newly equipped with surgical modules and component maintenance modules, and sufficient materials are stored to quickly make restraints on site. The addition of a new generation of robotic arms and scanning matrices makes the operation more precise, and the restraints are more comfortable and close-fitting. The installation of the surgical module means that the wolf girl does not have to worry about life danger even if she suffers serious trauma. However, due to the fact that the production and yield of the injection-type nano-surgical robot are not ideal, the huge purchase price and high maintenance cost have caused the price of the maintenance cabin to rise sharply on the black market, and even attacked the EIL team. The component will now be remotely dropped by EIL.",
	    },
	};
	const ToolsVisor = {
	    Asset: {
	        Name: "InteractiveVisor",
	        Group: "ItemHead",
	    },
	    Color: ["#3A3A3A"],
	    Craft: {
	        Name: "Wolf Girl Trainer Multi-purpose Auxiliary Terminal Mk.II",
	        Property: "Thin",
	        Description: "Standard auxiliary goggles, connected to the EIL database to view the wolf girl's physiological status, identity information and other data. The sensor in one of the temples was removed and replaced with an auxiliary positioning system to remotely deploy the training facility maintenance cabin, which is convenient for trainers to perform component maintenance and additional training props on the wolf girl at any time, and naturally also convenient for trainers to hunt new targets. It has a built-in biometric lock and self-destruct system. It will automatically lock when the auxiliary terminal is removed, and will self-destruct when used by non-EIL registered personnel to avoid leakage of authority and information, effectively improving the security of the EIL internal network.",
	    },
	};
	const ToolsInjector = {
	    Asset: {
	        Name: "MedicalInjector",
	        Group: "ItemHandheld",
	    },
	    Color: ["#8F8F8F"],
	    Craft: {
	        Name: "Wolf Girl Trainer Multi-Purpose Injection Gun Mk.II",
	        Property: "Comfy",
	        Description: "Multi-purpose injection gun, most of the time filled with a disposable identity chip for the initial installation and information registration of the training kit for the new wolf girl, but it can be replaced with various medicines, or even the injection-type nano-surgical robot used in the maintenance cabin, to perform first aid when necessary. The advanced injection gun will not leave needle holes on the skin, and can even be injected through clothing, and the extremely high injection speed does not worry about accidents when the target struggles.",
	    },
	};
	const Tools = [
	    ToolsCrate,
	    ToolsVisor,
	    ToolsInjector,
	    {
	        Asset: {
	            Name: "GlassFilled",
	            Group: "ItemHandheld",
	        },
	        Color: "Default",
	        Craft: {
	            Name: "Water of Desire",
	            Description: "A glass of water? Maybe.",
	            Property: "Normal",
	        },
	    },
	    {
	        Asset: {
	            Name: "GlassFilled",
	            Group: "ItemHandheld",
	        },
	        Color: "Default",
	        Craft: {
	            Name: "Special Redbull",
	            Description: "A mixture of Red Bull, alcohol, caffeine, steroids, gorilla testicle extract, etc., Power!",
	            Property: "Normal",
	        },
	    },
	];

	function GatherAppMap(C) {
	    return new Map(C.Appearance.map(i => [i.Asset.Group.Name, i]));
	}

	var TimedWorkState;
	(function (TimedWorkState) {
	    TimedWorkState[TimedWorkState["running"] = 0] = "running";
	    TimedWorkState[TimedWorkState["finished"] = 1] = "finished";
	    TimedWorkState[TimedWorkState["interrupted"] = 2] = "interrupted";
	})(TimedWorkState || (TimedWorkState = {}));
	class TimedWork {
	}
	class TimedWorker {
	    constructor(time_reso) {
	        this.time_reso = time_reso;
	        this.work_suites = [];
	        this._state = 'working';
	        this._timer = setInterval(() => {
	            do {
	                if (Player && this.work_suites.length > 0 && this._state === 'working') {
	                    const cur_suite = this.work_suites[0];
	                    if (cur_suite.works.length === 0) {
	                        this.work_suites.shift();
	                        continue;
	                    }
	                    const state = cur_suite.works[0].run(Player);
	                    if (state === TimedWorkState.finished) {
	                        cur_suite.works.shift();
	                    }
	                    else if (state === TimedWorkState.interrupted) {
	                        this.work_suites.shift();
	                    }
	                }
	                break;
	            } while (true);
	        }, time_reso);
	    }
	    skip_until(pred) {
	        do {
	            if (this.work_suites.length === 0)
	                return;
	            const cur_suite = this.work_suites[0];
	            if (cur_suite.works.length === 0)
	                this.work_suites.shift();
	            if (pred(cur_suite))
	                cur_suite.works.shift();
	            else
	                return;
	        } while (true);
	    }
	    pause() {
	        this._state = 'paused';
	    }
	    resume() {
	        this._state = 'working';
	    }
	    push_front(work) {
	        this.work_suites.unshift(work);
	    }
	    push(work) {
	        this.work_suites.push(work);
	    }
	    insert_after_first(work) {
	        if (this.work_suites.length === 0) {
	            this.work_suites.push(work);
	            return;
	        }
	        else {
	            this.work_suites.splice(1, 0, work);
	        }
	    }
	    get cur_description() {
	        if (this.work_suites.length === 0)
	            return undefined;
	        return this.work_suites[0].description;
	    }
	    static init(time_reso) {
	        if (TimedWorker._global)
	            return;
	        TimedWorker._global = new TimedWorker(time_reso);
	    }
	    static get global() {
	        return TimedWorker._global;
	    }
	}

	class EILNetwork {
	    constructor(data) {
	        this.Time = 0;
	        this._data = data;
	        this.Time = Date.now();
	    }
	    isEIL(uid) {
	        return this._data.uids.includes(uid);
	    }
	    get craft() {
	        return this._data.craft;
	    }
	    get room() {
	        return this._data.room;
	    }
	    static get Access() {
	        return EILNetwork._Access();
	    }
	    static async fetch(asset_url) {
	        return fetch(asset_url + `EIL.json?t=${Date.now()}`).then((res) => {
	            if (!res.ok) {
	                throw new Error('EIL.json not found.');
	            }
	            return res.json();
	        }).then(d => EILNetwork.last_fetched = new EILNetwork(d));
	    }
	    static init(asset_url) {
	        return this.fetch(asset_url).then(d => {
	            EILNetwork._Access = () => {
	                if (EILNetwork.last_fetched) {
	                    if (Date.now() - EILNetwork.last_fetched.Time > 60000)
	                        EILNetwork.fetch(asset_url);
	                }
	                return EILNetwork.last_fetched;
	            };
	            EILNetwork.force_fetch = () => EILNetwork.fetch(asset_url);
	        });
	    }
	}
	EILNetwork._Access = () => {
	    throw new Error('EILNetwork is not ready.');
	};
	EILNetwork.last_fetched = undefined;

	function ExtractMemberNumber(target) {
	    return typeof target === "number" ? target : target.MemberNumber;
	}

	function ItemFromOutfit(acting, acted, v) {
	    const num = ExtractMemberNumber(acting);
	    const lock = CalculateLocks(num, acted);
	    const ecraft = EILNetwork.Access.craft;
	    return OutfitItemManifest(acted, v, {
	        craft: { MemberName: ecraft.name, MemberNumber: ecraft.uid }, lock: {
	            Lock: lock,
	            MemberNumber: num,
	        },
	        difficulty: 42
	    });
	}
	function DefaultCheckOutfitItem(item, v, lock) {
	    const ecraft = EILNetwork.Access.craft;
	    return CheckOutfitItem(item, v, { craft: { MemberName: ecraft.name, MemberNumber: ecraft.uid }, lock: lock ?? true });
	}
	function DefaultCheckItemOnTarget(target, item, lock) {
	    if (!item)
	        return false;
	    const i = target.Appearance.find(e => e.Asset.Group.Name === item.Asset.Group);
	    if (!i)
	        return false;
	    return DefaultCheckOutfitItem(i, item, lock);
	}
	function DefaultCheckItemByGroup(target, group, lock) {
	    const oi = OutfitItemsMap.get(group);
	    if (!oi)
	        return false;
	    return DefaultCheckItemOnTarget(target, oi, lock);
	}
	function DefaultCheckItems(target, item, lock) {
	    const items_map = buildAppMap(target);
	    const ecraft = EILNetwork.Access.craft;
	    const option = { craft: { MemberName: ecraft.name, MemberNumber: ecraft.uid }, lock };
	    return item.every(e => {
	        const group = typeof e === "string" ? e : e.Asset.Group;
	        const item = items_map.get(group);
	        const oitem = typeof e === "string" ? OutfitItemsMap.get(group) : e;
	        if (!item || !oitem)
	            return false;
	        return CheckOutfitItem(item, oitem, option);
	    });
	}
	function CheckMissingItems(player, lock) {
	    const app_map = buildAppMap(player);
	    const ecraft = EILNetwork.Access.craft;
	    const option = { craft: { MemberName: ecraft.name, MemberNumber: ecraft.uid }, lock };
	    const missing = new Set();
	    OutfitItems.forEach(e => {
	        const i = app_map.get(e.Asset.Group);
	        if (!i || !CheckOutfitItem(i, e, option))
	            missing.add(e.Asset.Group);
	    });
	    return missing;
	}
	function CalculateLocks(locking, locked) {
	    const num = ExtractMemberNumber(locking);
	    if (locked.Ownership && locked.Ownership.MemberNumber === num)
	        return "OwnerPadlock";
	    if (locked.Lovership && locked.Lovership.some(e => e.MemberNumber === num))
	        return "LoversPadlock";
	    return "ExclusivePadlock";
	}

	class FuturisticBypass {
	    get on() {
	        return this._state;
	    }
	    set on(value) {
	        this._state = value;
	    }
	    static init(mod, lateHook) {
	        FuturisticBypass.instance = new FuturisticBypass(mod);
	    }
	    constructor(mod) {
	        this._state = false;
	        mod.hookFunction('InventoryItemFuturisticValidate', 2, (args, next) => {
	            if (this._state)
	                return "";
	            return next(args);
	        });
	        mod.hookFunction('ExtendedItemValidate', 2, (args, next) => {
	            const item = args[2];
	            if (item.Asset.Name.startsWith("Futuristic") && this._state)
	                return "";
	            return next(args);
	        });
	    }
	}

	var TargetMode;
	(function (TargetMode) {
	    TargetMode[TargetMode["TARGET_ACTING"] = 0] = "TARGET_ACTING";
	    TargetMode[TargetMode["TARGET_ACTED"] = 1] = "TARGET_ACTED";
	})(TargetMode || (TargetMode = {}));
	class ItemWearWork extends TimedWork {
	    constructor(items, target, mode = TargetMode.TARGET_ACTED) {
	        super();
	        this.items = items;
	        this.target = target;
	        this.mode = mode;
	        if (items.length === 0)
	            this._items = [];
	        else if (typeof items[0] === "string")
	            this._items = items.map(e => OutfitItemsMap.get(e));
	        else
	            this._items = items;
	        this.target_num = ExtractMemberNumber(target);
	    }
	    static ItemWearSingle(item, acting, acted) {
	        const item_ = ItemFromOutfit(acting, acted, item);
	        if (!item_)
	            return;
	        const oldIdx = acted.Appearance.findIndex(e => e.Asset.Group === item_.Asset.Group);
	        if (oldIdx >= 0)
	            acted.Appearance[oldIdx] = item_;
	        else
	            acted.Appearance.push(item_);
	    }
	    run(player) {
	        const player_num = player.MemberNumber;
	        if (!player_num)
	            return TimedWorkState.interrupted;
	        if (this.mode === TargetMode.TARGET_ACTING) {
	            this._items.forEach(outfit => ItemWearWork.ItemWearSingle(outfit, this.target_num, player));
	            AppearanceUpdate(player);
	        }
	        else {
	            const acted = ChatRoomCharacter.find(c => c.MemberNumber === this.target_num);
	            if (!acted)
	                return TimedWorkState.interrupted;
	            this._items.forEach(outfit => ItemWearWork.ItemWearSingle(outfit, player_num, acted));
	            AppearanceUpdate(acted);
	        }
	        return TimedWorkState.finished;
	    }
	}
	ItemWearWork.TARGET_ACTING = TargetMode.TARGET_ACTING;
	ItemWearWork.TARGET_ACTED = TargetMode.TARGET_ACTED;
	class ItemOptionWork extends TimedWork {
	    constructor(target, option) {
	        super();
	        this._target = ExtractMemberNumber(target);
	        this._options = option;
	    }
	    static ItemOptionSingleI(target, option) {
	        ExtendedItemSetOptionByRecord(target, option.target, option.option);
	    }
	    static ItemOptionSingleS(target, option) {
	        const item = target.Appearance.find(e => e.Asset.Group.Name === option.target);
	        if (!item)
	            return;
	        ExtendedItemSetOptionByRecord(target, item, option.option);
	    }
	    run(player) {
	        const target = ChatRoomCharacter.find(c => c.MemberNumber === this._target);
	        if (!target)
	            return TimedWorkState.interrupted;
	        FuturisticBypass.instance.on = true;
	        const app_map = GatherAppMap(target);
	        this._options.map(i => { return { target: typeof i.target === "string" ? app_map.get(i.target) : i.target, option: i.option }; })
	            .filter(i => i.target)
	            .forEach(option => ItemOptionWork.ItemOptionSingleI(target, option));
	        if (this._options.length > 0)
	            AppearanceUpdate(target);
	        FuturisticBypass.instance.on = false;
	        return TimedWorkState.finished;
	    }
	}
	class ItemRemoveWork extends TimedWork {
	    constructor(target, items) {
	        super();
	        this.items = items;
	        this._items = items;
	        this._target = ExtractMemberNumber(target);
	    }
	    run(player) {
	        const target = ChatRoomCharacter.find(c => c.MemberNumber === this._target);
	        if (!target)
	            return TimedWorkState.interrupted;
	        const new_app = [];
	        target.Appearance.forEach(e => {
	            if (!this._items.some(item => {
	                if (typeof item === "string")
	                    return e.Asset.Name === item;
	                return e.Asset.Group.Name === item.Asset.Group && e.Asset.Name === item.Asset.Name;
	            }))
	                new_app.push(e);
	        });
	        target.Appearance = new_app;
	        AppearanceUpdate(target);
	        return TimedWorkState.finished;
	    }
	}
	class ClothRemoveWork extends TimedWork {
	    constructor(target, stash) {
	        super();
	        this.stash = stash;
	        this._stash = stash;
	        this._target = ExtractMemberNumber(target);
	    }
	    run(player) {
	        const target = ChatRoomCharacter.find(c => c.MemberNumber === this._target);
	        if (!target)
	            return TimedWorkState.interrupted;
	        const new_app = [];
	        target.Appearance.forEach(e => {
	            if (e.Asset.Group.Clothing) {
	                this._stash.push(e);
	            }
	            else {
	                new_app.push(e);
	            }
	        });
	        target.Appearance = new_app;
	        AppearanceUpdate(target);
	        return TimedWorkState.finished;
	    }
	}
	class ClothRestoreWork extends TimedWork {
	    constructor(target, stash) {
	        super();
	        this.stash = stash;
	        this._stash = stash;
	        this._target = ExtractMemberNumber(target);
	    }
	    run(player) {
	        const target = ChatRoomCharacter.find(c => c.MemberNumber === this._target);
	        if (!target)
	            return TimedWorkState.interrupted;
	        target.Appearance = target.Appearance.concat(this._stash);
	        AppearanceUpdate(target);
	        return TimedWorkState.finished;
	    }
	}
	class ItemLockWork extends TimedWork {
	    constructor(group, target, lock) {
	        super();
	        this.group = group;
	        this._group = group;
	        this._target = ExtractMemberNumber(target);
	        this._lock = lock;
	    }
	    run(player) {
	        const target = ChatRoomCharacter.find(c => c.MemberNumber === this._target);
	        if (!target)
	            return TimedWorkState.interrupted;
	        const lock = CalculateLocks(player, target);
	        this._group.forEach(group => {
	            const item = target.Appearance.find(e => e.Asset.Group.Name === group);
	            if (item)
	                InventoryLock(target, item, lock, player.MemberNumber, false);
	        });
	        AppearanceUpdate(target);
	        return TimedWorkState.finished;
	    }
	}
	class ItemPropertyWork extends TimedWork {
	    constructor(target, items) {
	        super();
	        this._target = ExtractMemberNumber(target);
	        this._items = items;
	    }
	    run(player) {
	        const target = ChatRoomCharacter.find(c => c.MemberNumber === this._target);
	        if (!target)
	            return TimedWorkState.interrupted;
	        this._items.forEach(item => {
	            const item_ = target.Appearance.find(e => e.Asset.Group.Name === item.group);
	            if (!item_)
	                return;
	            if (!item_.Property)
	                item_.Property = {};
	            Object.assign(item_.Property, item.property);
	        });
	        AppearanceUpdate(target);
	        return TimedWorkState.finished;
	    }
	}

	function IsFullyDressed(player) {
	    const items_map = new Map(player.Appearance.map(e => [e.Asset.Group.Name, e]));
	    return OutfitItems.every(e => {
	        const item = items_map.get(e.Asset.Group);
	        if (!item || !CheckOutfitItem(item, e, { craft: true, lock: true }))
	            return false;
	        return true;
	    });
	}
	function IsCollarOn(target) {
	    const group = "ItemNeck";
	    const item = target.Appearance.find(e => e.Asset.Group.Name === group);
	    const outfit = OutfitItemsMap.get(group);
	    if (!item || !outfit)
	        return false;
	    if (!CheckOutfitItem(item, outfit, { craft: true, lock: true }))
	        return false;
	    return true;
	}
	function IsGroupsDressed(player, groups) {
	    let tItems = player.Appearance.filter(e => groups.includes(e.Asset.Group.Name));
	    if (tItems.length !== groups.length)
	        return false;
	    return tItems.every(e => {
	        const outfit = OutfitItemsMap.get(e.Asset.Group.Name);
	        if (!CheckOutfitItem(e, outfit, { craft: true, lock: true }))
	            return false;
	        return true;
	    });
	}
	function IsPlayerWolfGirl(player) {
	    return IsGroupsDressed(player, ["ItemNeck"]) || IsGroupsDressed(player, ["ItemVulva"]);
	}

	function ChatOrWhisperToWolfGirl(data, then) {
	    if (data.Type === "Chat" || data.Type === "Whisper") {
	        const sender = ChatRoomCharacter.find(c => c.MemberNumber === data.Sender);
	        if (sender && Player && Player.MemberNumber && IsPlayerWolfGirl(Player)) {
	            const item = Player.Appearance.find(e => e.Asset.Group.Name === "ItemEars");
	            const typed = item?.Property?.TypeRecord?.typed;
	            if (typed !== undefined && typed > 0)
	                then(Player, sender);
	        }
	    }
	}
	function calcRecordValue$2(type) {
	    if (type === "off")
	        return [{ typed: 0 }];
	    else if (type === "base")
	        return [{ typed: 1 }];
	    else if (type === "total")
	        return [{ typed: 3 }];
	    else
	        return [{ typed: 0 }];
	}
	class HearingCtrl extends IController {
	    constructor() {
	        super(...arguments);
	        this.type = "HearingCtrl";
	        this.target_item = ["ItemEars"];
	        this.available_ctrls = ["off", "base", "total"];
	    }
	    set(player, item, type) {
	        StandardItemSetRecords(player, item, calcRecordValue$2(type));
	    }
	    test(player, item, type) {
	        return StandardItemTestRecords(item, calcRecordValue$2(type));
	    }
	    hook(mod, lateHook) {
	        mod.hookFunction("ChatRoomMessage", 1, (args, next) => {
	            const [data] = args;
	            ChatOrWhisperToWolfGirl(data, (player, sender) => {
	                data[CUSTOM_ACTION_TAG] = mod.callOriginal("SpeechGarble", [sender, data.Content]);
	            });
	            return next(args);
	        });
	        mod.hookFunction("ChatRoomMessageDisplay", 1, (args, next) => {
	            const typedArgs = args;
	            ChatOrWhisperToWolfGirl(typedArgs[0], () => {
	                typedArgs[1] = typedArgs[0][CUSTOM_ACTION_TAG] ?? typedArgs[1];
	            });
	            return next(typedArgs);
	        });
	    }
	}

	function calcValue(type) {
	    if (type === "off")
	        return 0;
	    else if (type === "open")
	        return 2;
	    else if (type === "max")
	        return 4;
	    else if (type === "random")
	        return 5;
	    else
	        return 0;
	}
	class ToysCtrl extends IController {
	    constructor() {
	        super(...arguments);
	        this.type = "ToysCtrl";
	        this.target_item = ["ItemVulva", "ItemPelvis", "ItemVulvaPiercings", "ItemButt", "ItemNipples", "ItemNipplesPiercings"];
	        this.available_ctrls = ["open", "max", "off", "random"];
	    }
	    set(player, item, type) {
	        const target = calcValue(type);
	        item.forEach(i => {
	            if (!i)
	                return;
	            if (i.Asset.Archetype === "vibrating")
	                ExtendedItemSetOptionByRecord(player, i, { vibrating: target });
	            else if (i.Asset.Archetype === "modular") {
	                if (i.Property?.TypeRecord?.i === undefined)
	                    return;
	                if (type === "random")
	                    ExtendedItemSetOptionByRecord(player, i, { i: 0 });
	                else
	                    ExtendedItemSetOptionByRecord(player, i, { i: target });
	            }
	        });
	    }
	    test(player, item, type) {
	        if (type === "random")
	            return TAccept();
	        const target = calcValue(type);
	        if (item.every(i => {
	            if (i.Asset.Archetype === "vibrating") {
	                if (i.Property?.TypeRecord?.vibrating === target)
	                    return true;
	            }
	            else if (i.Asset.Archetype === "modular") {
	                if (i.Property?.TypeRecord?.i === target)
	                    return true;
	            }
	            return false;
	        }))
	            return TReject("unchanged");
	        return TAccept();
	    }
	}

	function calcRecordValue$1(type) {
	    if (type === "off")
	        return [{ typed: 0 }];
	    else if (type === "base")
	        return [{ typed: 1 }];
	    else if (type === "total")
	        return [{ typed: 3 }];
	    else
	        return [];
	}
	class VisionCtrl extends IController {
	    constructor() {
	        super(...arguments);
	        this.type = "VisionCtrl";
	        this.target_item = ["ItemHead"];
	        this.available_ctrls = ["off", "base", "total"];
	    }
	    set(player, item, type) {
	        StandardItemSetRecords(player, item, calcRecordValue$1(type));
	    }
	    test(player, item, type) {
	        return StandardItemTestRecords(item, calcRecordValue$1(type));
	    }
	}

	function calcRecordValue(type) {
	    if (type === "off")
	        return [{ g: 0, p: 0, t: 0 }];
	    else if (type === "base")
	        return [{ g: 0, p: 3, t: 0 }];
	    else if (type === "total")
	        return [{ g: 2, p: 3, t: 4 }];
	    else
	        return [];
	}
	class VoiceCtrl extends IController {
	    constructor() {
	        super(...arguments);
	        this.type = "VoiceCtrl";
	        this.target_item = ["ItemMouth"];
	        this.available_ctrls = ["off", "base", "total"];
	    }
	    set(player, item, type) {
	        const target = calcRecordValue(type);
	        const [mouth] = item;
	        const oldg = mouth?.Property?.TypeRecord?.g;
	        StandardItemSetRecords(player, item, target);
	        if (target[0].g !== oldg && mouth?.Property?.AutoPunishUndoTime !== undefined)
	            mouth.Property.AutoPunishUndoTime = 0;
	    }
	    test(player, item, type) {
	        return StandardItemTestRecords(item, calcRecordValue(type));
	    }
	}

	const props = {
	    open: {
	        "OpenPermission": true,
	        "OpenPermissionChastity": true,
	        "OpenPermissionArm": true,
	        "OpenPermissionLeg": true
	    },
	    close: {
	        "OpenPermission": false,
	        "OpenPermissionChastity": false,
	        "OpenPermissionArm": false,
	        "OpenPermissionLeg": false
	    }
	};
	class FCollarPublic extends IController {
	    constructor() {
	        super(...arguments);
	        this.type = "FuturisticPublicCtrl";
	        this.target_item = ["ItemNeck"];
	        this.available_ctrls = ["open", "close"];
	    }
	    set(player, item, type) {
	        const [collar] = item;
	        if (!collar)
	            return;
	        if (!collar.Property)
	            collar.Property = {};
	        if (type === "open") {
	            Object.assign(collar.Property, props.open);
	        }
	        else if (type === "close") {
	            Object.assign(collar.Property, props.close);
	        }
	    }
	    test(player, item, type) {
	        const [collar] = item;
	        const collar_props = collar.Property;
	        if (!collar_props)
	            return TReject("itemprop");
	        const target_props = type === "open" ? props.open : props.close;
	        const filtered = Object.keys(target_props).map(k => collar_props[k] === target_props[k]);
	        if (filtered.every(i => i))
	            return TReject("unchanged");
	        return TAccept();
	    }
	}

	const WolfGirlCtrls = [HearingCtrl, ArousalCtrl, FeetCtrl,
	    HandsCtrl, ToysCtrl, VisionCtrl, VoiceCtrl, FCollarPublic].map(c => new c);
	const WolfGirlCtrlMap = new Map(WolfGirlCtrls.map(c => [c.type, c]));
	function RunControls(player, type, mode) {
	    const ctrl = WolfGirlCtrlMap.get(type);
	    if (!ctrl)
	        return false;
	    const app_map = new Map(player.Appearance.map(e => [e.Asset.Group.Name, e]));
	    FuturisticBypass.instance.on = true;
	    ctrl.set(player, ctrl.target_item.map(e => app_map.get(e)), mode);
	    FuturisticBypass.instance.on = false;
	    return true;
	}
	function TestRunControls(player, type, mode) {
	    const ctrl = WolfGirlCtrlMap.get(type);
	    if (!ctrl)
	        return TReject("type");
	    if (!ctrl.available_ctrls.includes(mode))
	        return TReject("mode");
	    const app_map = buildItemsMap(player);
	    const missing = ctrl.target_item.filter(e => !DefaultCheckOutfitItem(app_map.get(e), OutfitItemsMap.get(e)));
	    if (missing.length > 0)
	        return { missing };
	    return ctrl.test(player, ctrl.target_item.map(e => app_map.get(e)), mode);
	}
	function GetWolfGirlName(target) {
	    return `wolf girl ${target.MemberNumber ?? ""}`;
	}
	function GetCommandPrefix(target) {
	    return new RegExp(`^wolf girl *${target.MemberNumber ?? ""}`);
	}
	function WolfGirlCtrlInit(mod, lateHook) {
	    WolfGirlCtrls.forEach(item => item.hook(mod, lateHook));
	    FuturisticBypass.init(mod, lateHook);
	}

	const StdMissingMsgBase = { mode: "chat-action", msg: "The command was received, but the command execution was abnormal. The component {missing_formated} was not online, so the command could not be completed." };
	const StdMissingMsgN = { mode: "chat-action", msg: "The command was received but executed abnormally. The component {missing_formated} is not online. The corresponding functional module group is incomplete. The command cannot be completed." };
	const StdMissingMsgNPart = { mode: "chat-action", msg: "The command was received but executed abnormally. The component {missing_formated} is not online. The corresponding functional module group is incomplete. The command cannot be fully completed." };
	const StdMissingAction = { mode: "action", msg: "{player_wg}'s central control core makes a small error beep, but other than that nothing happens" };
	const StdMissing = {
	    notify: StdMissingMsgBase,
	    action: StdMissingAction
	};

	function FormatMessage(msg, src, args) {
	    if (!src)
	        src = {};
	    return msg.replace(/{([\w\d_]+)}/g, (match, p1) => {
	        if (src?.target) {
	            if (p1 === "target")
	                return CharacterNickname(src.target);
	            if (p1 === "target_id")
	                return src.target.MemberNumber?.toString() ?? "";
	            if (p1 === "target_wg")
	                return GetWolfGirlName(src.target);
	        }
	        if (src?.player) {
	            if (p1 === "player")
	                return CharacterNickname(src.player);
	            if (p1 === "player_id")
	                return src.player.MemberNumber?.toString() ?? "";
	            if (p1 === "player_wg")
	                return GetWolfGirlName(src.player);
	        }
	        if (args && args[p1]) {
	            return args[p1].toString();
	        }
	        return match;
	    });
	}
	function ParseMessage(option, src, args) {
	    const formated = FormatMessage(option.msg, src, args);
	    if (option.mode === "action") {
	        ChatRoomAction.instance.SendAction(formated);
	    }
	    else if (option.mode === "chat-action") {
	        ChatRoomAction.instance.SendAction("\"" + formated + "\"");
	    }
	    else if (option.mode === "local") {
	        ChatRoomAction.instance.LocalAction(formated);
	    }
	    else if (option.mode === "chat") {
	        ChatRoomAction.instance.SendChat(formated);
	    }
	    else if (option.mode === "local-status") {
	        ChatRoomAction.instance.LocalInfo(formated);
	    }
	}
	function MessageSimWrongCoding(src, weight) {
	    const WrongCodingSrc = [
	        "�", "�2�", "□��",
	        "??", "????", "??????",
	        "烫烫", "烫烫烫", "烫烫烫烫", "烫烫烫烫烫",
	        "ììð", "ñâââ", "îýîú", "ýýýÿÿÿ",
	    ];
	    const replace = (c, idx) => {
	        const p = idx / src.length * weight * 0.5 + weight * 0.5;
	        if (Math.random() < p) {
	            return WrongCodingSrc[Math.floor(Math.random() * WrongCodingSrc.length)];
	        }
	        return c;
	    };
	    return src.split('').map(replace).join('');
	}
	function RouteIM(type, player, target, msg, args) {
	    const formated = FormatMessage(msg, { player }, args);
	    const tnum = ExtractMemberNumber(target);
	    if (type === "Chat") {
	        ChatRoomAction.instance.SendAction(formated);
	    }
	    else if (type === "Whisper") {
	        ChatRoomAction.instance.SendWhisper(tnum, formated);
	    }
	    else if (type === "Beep") {
	        ChatRoomAction.instance.SendBeep(tnum, formated);
	    }
	}

	class DelayWork extends TimedWork {
	    constructor(delay) {
	        super();
	        this.first_run = true;
	        this._timeout = delay;
	    }
	    run(player) {
	        if (this.first_run) {
	            this.first_run = false;
	            this._timeout = Date.now() + this._timeout;
	        }
	        if (Date.now() < this._timeout)
	            return TimedWorkState.running;
	        return TimedWorkState.finished;
	    }
	}
	class CheckWork extends TimedWork {
	    constructor(check, message) {
	        super();
	        this._check = check;
	        this.message = message;
	    }
	    run(player) {
	        const checked = this._check(player);
	        if (this.message) {
	            const rmessage = (() => {
	                if (typeof this.message === "function")
	                    return this.message(player, checked);
	                if (checked.passed)
	                    return { mode: this.message.mode, msg: this.message.passed };
	                return { mode: this.message.mode, msg: this.message.failed };
	            })();
	            if (rmessage) {
	                ParseMessage(rmessage, { player });
	            }
	        }
	        return checked.state;
	    }
	}
	CheckWork.Accepted = { state: TimedWorkState.finished, passed: true };
	CheckWork.Continue = { state: TimedWorkState.finished, passed: false };
	CheckWork.Rejected = { state: TimedWorkState.interrupted, passed: false };
	CheckWork.Stop = { state: TimedWorkState.interrupted, passed: true };
	class CommonWork {
	    constructor(callback) {
	        this._callback = callback;
	    }
	    run(player) {
	        const result = this._callback(player);
	        if (result === undefined)
	            return TimedWorkState.finished;
	        return result;
	    }
	}
	class CheckItemsWork extends TimedWork {
	    constructor(target, callback, checkLock) {
	        super();
	        this.callback = callback;
	        this.checkLock = checkLock;
	        this._target = target.map(e => typeof e === "string" ? OutfitItemsMap.get(e) : e).filter(e => e !== undefined);
	    }
	    run(player) {
	        const app_map = buildItemsMap(player);
	        const missing = this._target.filter(e => {
	            return !DefaultCheckOutfitItem(app_map.get(e.Asset.Group), e, this.checkLock);
	        });
	        const result = this.callback(player, { missing });
	        if (result === undefined)
	            return TimedWorkState.finished;
	        return result;
	    }
	}

	class TestControlWork extends TimedWork {
	    constructor(type, mode, call) {
	        super();
	        this.type = type;
	        this.mode = mode;
	        this.call = call;
	    }
	    run(player) {
	        const result = TestRunControls(player, this.type, this.mode);
	        return this.call(result) || TimedWorkState.finished;
	    }
	}

	function StdResultBranch(player, data, on_missing, on_success) {
	    return (result) => {
	        const call_result = (() => {
	            if (result.missing)
	                return on_missing(result, data);
	            else if (result.rejected === "unchanged") {
	                ParseMessage({ mode: "chat-action", msg: "Received a command, but the command execution was abnormal. Staying in current working mode" }, { player });
	                data.xMessage = StdMissing.action;
	            }
	            else if (result.rejected) {
	                ParseMessage({ mode: "chat-action", msg: `[DEBUG] error message: WGException.${data.type}.Rejected.${result.rejected}` }, { player });
	                return TimedWorkState.interrupted;
	            }
	            else
	                return on_success(data);
	        })();
	        return call_result ?? TimedWorkState.finished;
	    };
	}
	function StdCmdSequence(player, type, mode, messages) {
	    let data = { type, mode };
	    const work_sequence = [
	        new TestControlWork(type, data.mode, StdResultBranch(player, data, (missing_result, data) => {
	            const missing_formated = missing_result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ");
	            ParseMessage(messages.missing.notify, { player }, { missing_formated });
	            data.xMessage = messages.missing.action;
	        }, (data) => {
	            const msg = messages.modes[data.mode];
	            if (msg) {
	                ParseMessage(msg.notify, { player });
	                data.xMessage = msg.action;
	                data.do_work = true;
	            }
	            else {
	                ParseMessage({ mode: "chat-action", msg: `[DEBUG] error message: WGException.${data.type}.MissingDialog.${data.mode}` }, { player });
	                return TimedWorkState.interrupted;
	            }
	        })),
	        new CommonWork(() => {
	            if (data.do_work) {
	                RunControls(player, type, data.mode);
	                AppearanceUpdate(player);
	            }
	        }),
	        new CommonWork(() => { if (data.xMessage)
	            ParseMessage(data.xMessage, { player }); }),
	    ];
	    TimedWorker.global.push({ description: `SetItemSequence${type}`, works: work_sequence });
	}

	function ArousalCtrlSequence(player, mode) {
	    const messages = {
	        missing: StdMissing,
	        modes: {
	            "off": {
	                notify: { mode: "chat-action", msg: "Received the instruction, the orgasm lock has been disabled" },
	                action: { mode: "action", msg: "{player_wg}'s orgasm lock icon goes out as the command was spoken. Although her body did not feel any changes, a strange sense of freedom might be washing over her heart. Perhaps the only orgasm she wanted was the one allowed by command." },
	            },
	            "edge": {
	                notify: { mode: "chat-action", msg: "Received the command, the orgasm lock has been turned on, the current mode is: edge" },
	                action: { mode: "action", msg: "An icon slowly begins to flash in {player_wg}'s field of vision. Even without the manual, one could roughly guess the meaning of the small lock icon embedded in the flashing light red heart. Perhaps, in the next second, the next touch, {player_wg} will reach the other end of the corridor. However, it seems that the end was only a short distance away." },
	            },
	            "deny": {
	                notify: { mode: "chat-action", msg: "Received command, orgasm lock has been turned on, current mode: deny orgasm" },
	                action: { mode: "action", msg: "An icon slowly begins to flash in {player_wg}'s field of vision, and the heart with a small lock embedded in it splits into two halves, while the lock was still the most conspicuous. Endless pleasure does not bring endless satisfaction. Even if the belt is open and {player_wg} is allowed to masturbate or have sex, she will never be satisfied. Or is this another kind of satisfaction for her?" },
	            }
	        }
	    };
	    StdCmdSequence(player, "ArousalCtrl", mode, messages);
	}

	function HearingCtrlSequence(player, mode) {
	    const messages = {
	        missing: StdMissing,
	        modes: {
	            "off": {
	                notify: { mode: "chat-action", msg: "Received command, hearing restriction has been turned off" },
	                action: { mode: "action", msg: "The red light on {player_wg}'s headset gradually fades, leaving only a barely detectable light blue. The sounds of the world passed through the machine and hazily entered {player_wg}'s ears. Without the dead silence just now, there is no need to concentrate on reading lips, so she is able to relax a lot now, right?" },
	            },
	            "base": {
	                notify: { mode: "chat-action", msg: "Received command, hearing restriction has been turned on" },
	                action: { mode: "action", msg: "The sound in {player_wg}'s ears suddenly becomes fainter and more blurred and hazy. The indicator light on her earphones lights up as a small red light. Although it is covered by {player_wg}'s hair, it could still be vaguely detected." },
	            },
	            "total": {
	                notify: { mode: "chat-action", msg: "Received command, hearing limit has been set to high power operation" },
	                action: { mode: "action", msg: "{player_wg}'s headphones seem to tighten slightly, and the outside world seems to have been paused at this moment and fallen into silence. The faint light just now is now a striking red flash, as if trying to announce something, but so what? The hustle and bustle of the world is already too noisy and disturbing, maybe this can help calm down" },
	            }
	        }
	    };
	    StdCmdSequence(player, "HearingCtrl", mode, messages);
	}

	function VisionCtrlSequence(player, mode) {
	    const messages = {
	        missing: StdMissing,
	        modes: {
	            "off": {
	                notify: { mode: "chat-action", msg: "Received command, visual restriction has been disabled" },
	                action: { mode: "action", msg: "{player_wg}'s goggles gradually return to their original appearance, and the neural interference module becomes softer as the color changes. A little light breaks into {player_wg}'s dark world. Although it is not clear enough, it is enough to prevent her from falling to the ground and hitting obstacles. In this situation, it might be fun to play some chasing games." },
	            },
	            "base": {
	                notify: { mode: "chat-action", msg: "Received command, visual restriction is enabled" },
	                action: { mode: "action", msg: "{player_wg}'s goggles flicker slightly and dim slightly. The work of the neural interference module combined with the change of the lens make {player_wg}'s vision more and more blurred." },
	            },
	            "total": {
	                notify: { mode: "chat-action", msg: "Received command, visual restriction set to high power operation" },
	                action: { mode: "action", msg: "{player_wg}'s goggles are completely dark, and the power of the neural interference module increase significantly. {player_wg} is almost completely unable to see, but without vision, in the dark world, wouldn't the sense of security brought by the embrace and breath of a trusted person be more intoxicating? No longer need to see other people, and will never see other people again, maybe just a trace of residual fragrance is enough to guide the direction" },
	            }
	        }
	    };
	    StdCmdSequence(player, "VisionCtrl", mode, messages);
	}

	class MessageWork extends TimedWork {
	    constructor(message, config) {
	        super();
	        this.message = message;
	        this.config = config;
	    }
	    run(player) {
	        const target = (() => {
	            if (!this.config?.target)
	                return undefined;
	            const t = this.config.target;
	            if (typeof t === 'number')
	                return ChatRoomCharacter.find(c => c.MemberNumber === t);
	            return t;
	        })();
	        ParseMessage(this.message, { player, target }, this.config?.args);
	        return TimedWorkState.finished;
	    }
	}
	class WaitResponseWork extends TimedWork {
	    constructor(target, options, timeout, then) {
	        super();
	        this.first_run = true;
	        this._target = ExtractMemberNumber(target);
	        this._options = options;
	        this._last_query = 0;
	        this._timeout = timeout;
	        this._then = then;
	    }
	    run(player) {
	        if (this.first_run) {
	            this.first_run = false;
	            this._timeout = Date.now() + this._timeout;
	            this._last_query = Date.now();
	        }
	        const target = ChatRoomCharacter.find(c => c.MemberNumber === this._target);
	        if (!target)
	            return TimedWorkState.interrupted;
	        if (ChatRoomChatLog == null)
	            return TimedWorkState.interrupted;
	        let result = 'default';
	        for (const L of ChatRoomChatLog.filter(m => m.SenderMemberNumber === this._target && m.Time > this._last_query)) {
	            if (this._options.accept.test(L.Original)) {
	                result = 'accept';
	                break;
	            }
	            else if (this._options.reject.test(L.Original)) {
	                result = 'reject';
	                break;
	            }
	            this._last_query = Math.max(this._last_query, L.Time);
	        }
	        if (result === 'default' && Date.now() > this._timeout) {
	            result = 'timeout';
	        }
	        if (result === 'accept' && this._options.accept_msg) {
	            ParseMessage(this._options.accept_msg);
	            return TimedWorkState.finished;
	        }
	        if (result === 'reject' && this._options.reject_msg) {
	            ParseMessage(this._options.reject_msg);
	            return TimedWorkState.finished;
	        }
	        if (result === 'timeout') {
	            this._then(player, target);
	            return TimedWorkState.finished;
	        }
	        return TimedWorkState.running;
	    }
	}

	function IsSimpleChat(msg) {
	    return msg.trim().length > 0 && !msg.startsWith("/") && !msg.startsWith("(") && !msg.startsWith("*");
	}
	function ChatRoomInterceptMessage(cur_msg, msg) {
	    if (!cur_msg)
	        return;
	    ElementValue("InputChat", cur_msg + "... " + msg);
	    ChatRoomSendChat();
	}
	function DoShockPunish(player, item) {
	    if (CurrentCharacter !== null)
	        CurrentCharacter.FocusGroup = null;
	    CurrentCharacter = null;
	    if (CurrentScreen === 'Preference')
	        CommonSetScreen("Character", "InformationSheet");
	    if (CurrentScreen === 'ChatAdmin')
	        CommonSetScreen('Online', 'ChatRoom');
	    if (CurrentScreen === 'InformationSheet' && InformationSheetPreviousModule)
	        CommonSetScreen(InformationSheetPreviousModule, InformationSheetPreviousScreen);
	    let msg = ElementValue("InputChat");
	    if (IsSimpleChat(msg))
	        ChatRoomInterceptMessage(msg, '');
	    const MemberNumber = player.MemberNumber;
	    if (!MemberNumber)
	        return;
	    const intensity = 2;
	    const Dictionary = [
	        { Tag: "DestinationCharacterName", Text: CharacterNickname(player), MemberNumber: MemberNumber },
	        { Tag: "AssetName", AssetName: item?.Asset.Name, GroupName: item?.Asset.Group.Name },
	        { ShockIntensity: intensity * 1.5 },
	        { FocusGroupName: item?.Asset.Group.Name },
	        { Automatic: true },
	    ];
	    if (CurrentScreen == "ChatRoom")
	        ChatRoomMessage({ Content: 'TriggerShock' + intensity, Type: "Action", Sender: MemberNumber, Dictionary: Dictionary });
	    InventoryShockExpression(player);
	}
	class PunishWork extends TimedWork {
	    constructor(timer) {
	        super();
	        this.first_run = false;
	        this._timer = timer;
	    }
	    run(player) {
	        if (!this.first_run) {
	            this.first_run = true;
	            this._timer = Date.now() + this._timer;
	        }
	        if (!PunishWork.punish_flag)
	            return TimedWorkState.finished;
	        const collar = InventoryGet(player, "ItemNeck");
	        if (!collar)
	            return TimedWorkState.interrupted;
	        DoShockPunish(player, collar);
	        if (Date.now() > this._timer)
	            return TimedWorkState.finished;
	        return TimedWorkState.running;
	    }
	}
	PunishWork.punish_flag = false;
	class RandomSinglePunishWork extends TimedWork {
	    run(player) {
	        const items = player.Appearance.filter(i => i.Asset.Group.Name.startsWith("Item"));
	        const item = items[Math.floor(Math.random() * items.length)];
	        const oi = OutfitItemsMap.get(item.Asset.Group.Name);
	        if (oi) {
	            DoShockPunish(player, item);
	        }
	        return TimedWorkState.finished;
	    }
	}
	function StopPunish(player) {
	    PunishWork.punish_flag = false;
	}

	function HandsCtrlSequence(player, mode) {
	    const messages = {
	        modes: {
	            off: {
	                notify: { mode: "chat-action", msg: "Received command, arm restraints are disabled" },
	                action: { mode: "action", msg: "The energy beams between the cuffs on {player_wg}'s arms gradually extinguish, and the neural interference module also shuts down the control of the arm. The nanomachines on the gloves return to their original positions with a slight vibration, releasing {player_wg}'s arms and hands. Is it really freedom, or is it just a momentary illusion?" }
	            },
	            base: {
	                notify: { mode: "chat-action", msg: "Received command, arm restraints have been enabled" },
	                action: { mode: "action", msg: "The handcuffs on {player_wg}'s arms begin to attract each other, and the coordination between the electrical stimulation system and the neural interference module made the force of the handcuffs tightening. {player_wg} was always slightly greater than her thoughts of struggling and resisting, so she can only watch her arms and fingers being gradually gathered and connected." }
	            },
	            total: {
	                notify: { mode: "chat-action", msg: "Received command, arm restraints have been set to the strongest mode" },
	                action: { mode: "action", msg: "The cuffs on {player_wg}'s arms suddenly tighten, and the unquestionable force even makes {player_wg} feel a little pain. She even ignored the nanomachines on the gloves that tighten and press her fists a little bit. The tight closure of her arms and the squeezing of her fingers and palms, or perhaps for {player_wg}'s heart, was this a better situation?" }
	            }
	        }
	    };
	    const type = "HandsCtrl";
	    let data = { type, mode };
	    const missing_route_01 = (result) => {
	        ParseMessage(StdMissingMsgBase, { player }, { missing_formated: result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ") });
	        data.xMessage = StdMissing.action;
	    };
	    const missing_route_02 = (result) => {
	        ParseMessage(StdMissingMsgNPart, { player }, { missing_formated: result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ") });
	        data.xMessage = { mode: "action", msg: "{player_wg}'s central control core beeps a little, and then the fingers of the glove slowly deform and tighten, causing her hands to curl into two balls of flesh that could not be grasped." };
	        data.mode = "total";
	        data.do_work = true;
	    };
	    const missing_route_03 = (result) => {
	        ParseMessage(StdMissingMsgNPart, { player }, { missing_formated: result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ") });
	        data.xMessage = { mode: "action", msg: "The cuffs on {player_wg}'s arms are quickly tightened with a punishing force, tightening {player_wg}'s arms, which would obviously cause sufficient and lasting pain." };
	        data.mode = "total";
	        data.do_work = true;
	    };
	    const missing_route_04 = (result) => {
	        ParseMessage(StdMissingMsgN, { player }, { missing_formated: result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ") });
	        data.xMessage = StdMissing.action;
	    };
	    const missing_route_05 = (result) => {
	        const missing_formated = result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ");
	        if (DefaultCheckItemByGroup(player, "ItemVulva")) {
	            ParseMessage(StdMissingMsgN, { player }, { missing_formated });
	            data.xMessage = StdMissing.action;
	            return;
	        }
	        if (CheckMissingItems(player).size >= 5) {
	            const err_works = [
	                new MessageWork({ mode: "chat-action", msg: "Received command, arm restraints are disabled" }),
	                new CommonWork(() => ParseMessage(StdMissingMsgNPart, { player }, { missing_formated })),
	                new MessageWork({ mode: "chat-action", msg: "Received the instruction, arms limit limit limit limit limit limit limit....." }),
	                new MessageWork({ mode: "action", msg: "{player_wg}'s central control core emits a sharp and continuous beeping sound, but soon returns to silence." }),
	                new MessageWork({ mode: "action", msg: MessageSimWrongCoding(StdMissingMsgBase.msg, 0.5) }),
	                new RandomSinglePunishWork(),
	                new MessageWork({ mode: "action", msg: MessageSimWrongCoding(StdMissingMsgBase.msg, 0.9) }),
	                new RandomSinglePunishWork(),
	                new DelayWork(1000),
	                new RandomSinglePunishWork(),
	                new DelayWork(1000),
	                new RandomSinglePunishWork(),
	                new MessageWork({ mode: "action", msg: "{player_wg}'s central control core once again emits a sharp sound, but soon returns to silence again." }),
	                new MessageWork({ mode: "chat-action", msg: "An error in the execution of a command was detected, and the execution of the command has been terminated and retried." }),
	            ];
	            TimedWorker.global.insert_after_first({ description: `SetItemSequence${type}`, works: err_works });
	            return TimedWorkState.interrupted;
	        }
	        ParseMessage({ mode: "chat-action", msg: "Received command, arm restraints are disabled" }, { player });
	        mode = "off";
	        data.do_work = true;
	    };
	    const work_sequence = [
	        new TestControlWork(type, mode, StdResultBranch(player, data, (missing_result, data) => {
	            if (missing_result.missing.length === 2)
	                return missing_route_01(missing_result);
	            if (mode === "off")
	                return missing_route_05(missing_result);
	            if (Math.random() < 0.5)
	                return missing_route_04(missing_result);
	            if (missing_result.missing.includes("ItemArms"))
	                return missing_route_02(missing_result);
	            if (missing_result.missing.includes("ItemHands"))
	                return missing_route_03(missing_result);
	        }, (data) => {
	            const msg = messages.modes[mode];
	            if (msg) {
	                ParseMessage(msg.notify, { player });
	                data.xMessage = msg.action;
	                data.do_work = true;
	            }
	            else {
	                ParseMessage({ mode: "chat-action", msg: `[DEBUG] error message: WGException.${data.type}.MissingDialog.${data.mode}` }, { player });
	                return TimedWorkState.interrupted;
	            }
	        })),
	        new CommonWork(() => {
	            if (data.do_work) {
	                RunControls(player, type, data.mode);
	                AppearanceUpdate(player);
	            }
	        }),
	        new CommonWork(() => { if (data.xMessage)
	            ParseMessage(data.xMessage, { player }); }),
	    ];
	    TimedWorker.global.push({ description: `SetItemSequence${type}`, works: work_sequence });
	}

	function FuturisticPublicCtrlSequence(player, mode) {
	    const messages = {
	        missing: StdMissing,
	        modes: {
	            "close": {
	                notify: { mode: "chat-action", msg: "Received instruction, public operation permission has been disabled" },
	                action: { mode: "action", msg: "The public operation panel on the collar gradually goes out. It was a pity that it can't be played with by others anymore. If {player_wg} wants something, maybe it would be better to ask her master and lovers now..." },
	            },
	            "open": {
	                notify: { mode: "chat-action", msg: "Received instructions, public operation permissions have been enabled" },
	                action: { mode: "action", msg: "The public operation panel on {player_wg}'s collar lights up immediately, projecting small operation panels all over her body so that anyone can play with her body at any time. Perhaps if she serves well, a kind-hearted person would allow {player_wg} to gain a brief freedom?" },
	            }
	        }
	    };
	    StdCmdSequence(player, "FuturisticPublicCtrl", mode, messages);
	}

	function FeetCtrlSequence(player, mode) {
	    const messages = {
	        modes: {
	            off: {
	                notify: { mode: "chat-action", msg: "Received instruction, walking restriction has been turned off" },
	                action: { mode: "action", msg: "The indicator lights on the limb action controllers on {player_wg}'s legs slowly turn off. Her legs, now free of any movement restrictions, might be able to stretch out for the first time in a long time. But don't worry, she won't be able to run away." },
	            },
	            base: {
	                notify: { mode: "chat-action", msg: "Received instruction, walking restriction has been enabled" },
	                action: { mode: "action", msg: "{player_wg}'s leg motion controller is activated again, making {player_wg} feel the familiar weakness of the leg muscles and the slowness and restriction of the stiff joints. The energy beams between the cuffs announc that {player_wg} is currently in a restricted state, but it seems that she has difficulty taking a step without the energy beam connection." },
	            },
	            total: {
	                notify: { mode: "chat-action", msg: "Received the instruction, the walking restriction has been set to the strongest restriction mode" },
	                action: { mode: "action", msg: "{player_wg}'s leg rings are suddenly tightened, without much time to react. Fortunately, the motion posture stabilization system interves in time to prevent {player_wg} from falling to the ground in pain and distress. However, it is only a matter of time before she is pushed down after losing the ability to walk. Who would have thought that {player_wg}, who was standing quietly and with a dignified posture, could not even take the simplest step?" },
	            }
	        }
	    };
	    const type = "FeetCtrl";
	    let data = { type, mode };
	    const missing_route_01 = (result, data) => {
	        const missing_formated = result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ");
	        ParseMessage(StdMissingMsgBase, { player }, { missing_formated });
	        data.xMessage = StdMissing.action;
	    };
	    const missing_route_02 = (result, data) => {
	        const missing_formated = result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ");
	        ParseMessage(StdMissingMsgNPart, { player }, { missing_formated });
	        data.xMessage = { mode: "action", msg: "{player_wg}'s limb motion controller starts up with a small error beep from the central control core. She closes her legs and tries to maintain her position and balance as much as possible. However, due to the abnormal configuration parameters of the motion controller, she can only move slowly." };
	        data.mode = "base";
	        data.do_work = true;
	    };
	    const missing_route_03 = (result, data) => {
	        const missing_formated = result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ");
	        ParseMessage(StdMissingMsgN, { player }, { missing_formated });
	        data.xMessage = { mode: "action", msg: "{player_wg}'s body movement controller flashes a few times in rhythm with the central control core's error beep. Apart from that, nothing happens." };
	    };
	    const missing_route_04 = (result, data) => {
	        const missing_formated = result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ");
	        ParseMessage(StdMissingMsgN, { player }, { missing_formated });
	        data.xMessage = StdMissing.action;
	    };
	    const missing_route_05 = (result, data) => {
	        const missing_formated = result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ");
	        if (DefaultCheckItemByGroup(player, "ItemVulva")) {
	            ParseMessage(StdMissingMsgN, { player }, { missing_formated });
	            data.xMessage = StdMissing.action;
	            return;
	        }
	        if (CheckMissingItems(player).size >= 5) {
	            const err_works = [
	                new MessageWork({ mode: "chat-action", msg: "Received instruction, walking restriction has been disabled" }),
	                new CommonWork(() => ParseMessage(StdMissingMsgNPart, { player }, { missing_formated })),
	                new MessageWork({ mode: "chat-action", msg: "Received the instruction, walking limit limit limit limit limit limit limit limit....." }),
	                new MessageWork({ mode: "action", msg: "{player_wg}'s central control core emits a sharp and continuous beeping sound, but soon returns to silence." }),
	                new MessageWork({ mode: "action", msg: MessageSimWrongCoding(StdMissingMsgBase.msg, 0.5) }),
	                new RandomSinglePunishWork(),
	                new MessageWork({ mode: "action", msg: MessageSimWrongCoding(StdMissingMsgBase.msg, 0.9) }),
	                new RandomSinglePunishWork(),
	                new DelayWork(1000),
	                new RandomSinglePunishWork(),
	                new DelayWork(1000),
	                new RandomSinglePunishWork(),
	                new MessageWork({ mode: "action", msg: "{player_wg}'s central control core once again emits a sharp sound, but soon returns to silence." }),
	                new MessageWork({ mode: "chat-action", msg: "An error in the execution of a command was detected, and the execution of the command has been terminated and retried." }),
	            ];
	            TimedWorker.global.insert_after_first({ description: `SetItemSequence${type}`, works: err_works });
	            return TimedWorkState.interrupted;
	        }
	        ParseMessage({ mode: "chat-action", msg: "Received instruction, walking restriction has been disabled" }, { player });
	        data.mode = "off";
	        data.do_work = true;
	    };
	    const work_sequence = [
	        new TestControlWork(type, mode, StdResultBranch(player, data, (missing_result, data) => {
	            if (missing_result.missing.length === 3)
	                return missing_route_01(missing_result, data);
	            if (mode === "off")
	                return missing_route_05(missing_result, data);
	            if (Math.random() < 0.5)
	                return missing_route_04(missing_result, data);
	            if (missing_result.missing.length === 1)
	                return missing_route_02(missing_result, data);
	            if (missing_result.missing.length === 2)
	                return missing_route_03(missing_result, data);
	        }, (data) => {
	            const msg = messages.modes[mode];
	            if (msg) {
	                ParseMessage(msg.notify, { player });
	                data.xMessage = msg.action;
	                data.do_work = true;
	            }
	            else {
	                ParseMessage({ mode: "chat-action", msg: `[DEBUG] error message: WGException.${data.type}.MissingDialog.${data.mode}` }, { player });
	                return TimedWorkState.interrupted;
	            }
	        })),
	        new CommonWork(() => {
	            if (data.do_work) {
	                RunControls(player, type, data.mode);
	                AppearanceUpdate(player);
	            }
	        }),
	        new CommonWork(() => { if (data.xMessage)
	            ParseMessage(data.xMessage, { player }); }),
	    ];
	    TimedWorker.global.push({ description: `SetItemSequence${type}`, works: work_sequence });
	}

	function ToysCtrlSequence(player, mode) {
	    const messages = {
	        missing: StdMissing,
	        modes: {
	            off: {
	                notify: { mode: "chat-action", msg: "Received command, vibrator turned off" },
	                action: { mode: "action", msg: "All the vibrators on {player_wg}'s body suddenly stop. Maybe she has a little chance to relax. Is she tired? One wonders if {player_wg} is dissatisfied with the current silence after the previous waves of pleasure?" },
	            },
	            open: {
	                notify: { mode: "chat-action", msg: "Received command, vibrator turned on" },
	                action: { mode: "action", msg: "{player_wg}'s vibrators begin to vibrate slightly. Although it is not strong enough, it is enough to slowly push her towards orgasm. There is not much buzzing sound at this power, so there is no need to worry about being discovered. Of course, if she can orgasm is hard to say." },
	            },
	            max: {
	                notify: { mode: "chat-action", msg: "Received command, the vibrator has been set to maximum power mode" },
	                action: { mode: "action", msg: "The vibrators on {player_wg}'s body suddenly emit a clear buzzing sound. Even with the barrier of body and clothes, it is clearly audible if one gets a little closer. However, {player_wg} obviously doesn't have much energy to pay attention to this. After all, wave after wave of pleasure wash over her brain, erasing her reason and thoughts bit by bit." },
	            }
	        }
	    };
	    const type = "ToysCtrl";
	    let data = { type, mode };
	    const work_sequence = [
	        new TestControlWork(type, mode, StdResultBranch(player, data, (result, data) => {
	            const missing_formated = result.missing.map(g => OutfitItemsMap.get(g)?.Craft.Name).join(", ");
	            if (!result.missing.includes("ItemVulva")) {
	                ParseMessage(messages.missing.notify, { player }, { missing_formated });
	                data.xMessage = { mode: "action", msg: "Although {player_wg}'s vibrator indicates that it had been set up successfully, judging by the sound, something has clearly gone wrong. The humming sound of the vibrations is like the ups and downs of the sea in a storm, as if it is toying with {player_wg}, as if this mistake has been made intentionally and carelessly." };
	                data.mode = "random";
	                data.do_work = true;
	            }
	            else {
	                ParseMessage(messages.missing.notify, { player }, { missing_formated });
	                data.xMessage = messages.missing.action;
	            }
	        }, (data) => {
	            const msg = messages.modes[mode];
	            if (msg) {
	                ParseMessage(msg.notify, { player });
	                data.xMessage = msg.action;
	                data.do_work = true;
	            }
	            else {
	                ParseMessage({ mode: "chat-action", msg: `[DEBUG] error message: WGException.${data.type}.MissingDialog.${data.mode}` }, { player });
	                return TimedWorkState.interrupted;
	            }
	        })),
	        new CommonWork(() => {
	            if (data.do_work) {
	                RunControls(player, type, data.mode);
	                AppearanceUpdate(player);
	            }
	        }),
	        new CommonWork(() => { if (data.xMessage)
	            ParseMessage(data.xMessage, { player }); }),
	    ];
	    TimedWorker.global.push({ description: `SetItemSequence${type}`, works: work_sequence });
	}

	function VoiceCtrlSequence(player, mode) {
	    const messages = {
	        missing: StdMissing,
	        modes: {
	            off: {
	                notify: { mode: "chat-action", msg: "Received instruction, language restriction has been disabled" },
	                action: {
	                    mode: "action",
	                    msg: "{player_wg}'s smart gag makes a small hissing sound and slowly shrinks while the original built-in grooves reappear. Although it slightly reduces the sound of the words, at least one can clearly hear what {player_wg} wants to say. Shouldn't she say thank you?",
	                },
	            },
	            base: {
	                notify: { mode: "chat-action", msg: "Received instruction, language restriction is enabled" },
	                action: {
	                    mode: "action",
	                    msg: "{player_wg}'s gag vibrates slightly, and a small light on the gag's strap lights up, then slowly begins to expand. Although it slightly hinderes the pronunciation of the lips and tongue, she is still able to roughly express her wishes.",
	                },
	            },
	            total: {
	                notify: { mode: "chat-action", msg: "Received instruction, language restriction has been set to the strongest restriction mode" },
	                action: {
	                    mode: "action",
	                    msg: "{player_wg}'s gag continues to swell, and all the indicator lights on the straps light up. The expanded latex not only presses down her tender tongue, but also penetrates into her throat little by little, filling her mouth. The neural interference module suppresses the reflexive retching and coughing at the right time. Well, making a whining sound through the nose is indeed what wolves do when their mouths are restrained. Isn't this perfect?",
	                },
	            },
	        },
	    };
	    StdCmdSequence(player, "VoiceCtrl", mode, messages);
	}

	class PermissionUtilities {
	    constructor(parent) {
	        this.parent = parent;
	        this.moderators = new Set(this.parent.data.permission.moderators);
	    }
	    save() {
	        this.parent.save("permission");
	    }
	    setLoverMode(arg) {
	        this.parent.data.permission.loverModerators = arg;
	        this.save();
	    }
	    setModerator(id, add) {
	        if (add) {
	            if (!this.moderators.has(id)) {
	                this.moderators.add(id);
	                this.parent.data.permission.moderators.push(id);
	                this.save();
	            }
	        }
	        else {
	            if (this.moderators.has(id)) {
	                this.moderators.delete(id);
	                this.parent.data.permission.moderators = Array.from(this.moderators);
	                this.save();
	            }
	        }
	    }
	    get data() {
	        return this.parent.data.permission;
	    }
	    isCommandAuthorized(moderatee, moderator) {
	        const num = ExtractMemberNumber(moderator);
	        if (this.isEILNet(moderator))
	            return true;
	        if (this.isOwner(moderator, moderatee))
	            return true;
	        if (this.isAdditionModerator(num))
	            return true;
	        if (this.parent.data.permission.loverModerators
	            && this.isLover(moderator, moderatee))
	            return true;
	        return false;
	    }
	    isEILNet(moderator) {
	        const num = ExtractMemberNumber(moderator);
	        return EILNetwork.Access.isEIL(num);
	    }
	    isLover(moderator, moderatee) {
	        const num = ExtractMemberNumber(moderator);
	        if (moderatee.Lovership && moderatee.Lovership.some(i => i.MemberNumber === num))
	            return true;
	        return false;
	    }
	    isOwner(moderator, moderatee) {
	        const num = ExtractMemberNumber(moderator);
	        if (moderatee.Ownership && moderatee.Ownership.MemberNumber === num)
	            return true;
	        return false;
	    }
	    isAdditionModerator(moderator) {
	        const num = ExtractMemberNumber(moderator);
	        return this.moderators.has(num);
	    }
	}

	class OutfitUtilities {
	    constructor(parent) {
	        this.parent = parent;
	        this._items = new Map(parent.data.outfit.items.map(i => [i.asset.group, i]));
	        this._color_store = new Map(parent.data.outfit.color_store.map(i => [i.group, i]));
	    }
	    save() {
	        this.parent.save("outfit");
	    }
	    get data() {
	        return this.parent.data.outfit;
	    }
	    get lite_mode() {
	        return this.data.lite_mode;
	    }
	    set lite_mode(arg) {
	        this.data.lite_mode = arg;
	        this.save();
	    }
	    add(item) {
	        if (Array.isArray(item)) {
	            item.forEach(i => this._items.set(i.asset.group, i));
	        }
	        else {
	            this._items.set(item.asset.group, item);
	        }
	        this.data.items = [...this._items.values()];
	        this.save();
	    }
	    get items() {
	        return this._items;
	    }
	    set items(arg) {
	        if (Array.isArray(arg)) {
	            this.data.items = arg;
	            this._items = new Map(arg.map(i => [i.asset.group, i]));
	        }
	        else {
	            this.data.items = [...arg.values()];
	            this._items = arg;
	        }
	        this.save();
	    }
	    get color_store() {
	        return this._color_store;
	    }
	    set color_store(arg) {
	        if (Array.isArray(arg)) {
	            this.data.color_store = arg;
	            this._color_store = new Map(arg.map(i => [i.group, i]));
	        }
	        else {
	            this.data.color_store = [...arg.values()];
	            this._color_store = arg;
	        }
	        this.save();
	    }
	}

	function defaultValue() {
	    return {
	        outfit: {
	            lite_mode: false,
	            items: [],
	            color_store: []
	        },
	        permission: {
	            moderators: [],
	            loverModerators: true
	        },
	        settings: {
	            orgasmPunishMode: 0
	        },
	        stat: {
	            script_run_time: 0,
	            wolfgirl_time: 0,
	            stash_time: 0,
	            last_fix_time: 0,
	            task: {
	                finished: 0,
	                failed: 0,
	                counter: {}
	            }
	        },
	        points: {
	            current: 0,
	            punish_time: 5 * 60 * 1000,
	            task_time: 15 * 60 * 1000,
	            orgasm_punish_time: 5 * 60 * 1000
	        },
	        arousal: {
	            orgasm: 0,
	            ruined: 0,
	            resist: 0,
	            edge_time: 0,
	        }
	    };
	}
	function IsStringArray(data) {
	    if (!Array.isArray(data))
	        return false;
	    return data.every((item) => typeof item === "string");
	}
	function IsNumberArray(data) {
	    if (!Array.isArray(data))
	        return false;
	    return data.every((item) => typeof item === "number");
	}
	function Validate(data) {
	    const defaultData = defaultValue();
	    const xd = data;
	    const ret = {};
	    ret.outfit = ((data) => {
	        const dvalue = defaultData.outfit;
	        if (data === undefined)
	            return dvalue;
	        if (typeof data.lite_mode === "boolean")
	            dvalue.lite_mode = data.lite_mode;
	        if (Array.isArray(data.items)) {
	            let items = [];
	            for (const item of data.items) {
	                if (typeof item !== "object")
	                    continue;
	                const ii = item;
	                if (typeof ii.asset !== "object")
	                    continue;
	                if (typeof ii.asset.name !== "string")
	                    continue;
	                if (typeof ii.asset.group !== "string")
	                    continue;
	                if (typeof ii.color !== "string" && !IsStringArray(ii.color))
	                    continue;
	                if (typeof ii.property !== "object")
	                    continue;
	                items.push(ii);
	            }
	            dvalue.items = items;
	        }
	        if (Array.isArray(data.color_store)) {
	            let color_store = [];
	            for (const item of data.color_store) {
	                if (typeof item !== "object")
	                    continue;
	                const ii = item;
	                if (typeof ii.asset !== "string")
	                    continue;
	                if (typeof ii.group !== "string")
	                    continue;
	                if (typeof ii.color !== "string" && !IsStringArray(ii.color))
	                    continue;
	                color_store.push(ii);
	            }
	            dvalue.color_store = color_store;
	        }
	        return dvalue;
	    })(xd.outfit);
	    ret.permission = ((data) => {
	        const dvalue = defaultData.permission;
	        if (data === undefined)
	            return dvalue;
	        if (IsNumberArray(data.moderators))
	            dvalue.moderators = data.moderators;
	        if (typeof data.loverModerators === "boolean")
	            dvalue.loverModerators = data.loverModerators;
	        return dvalue;
	    })(xd.permission);
	    ret.settings = ((data) => {
	        const dvalue = defaultData.settings;
	        if (data === undefined)
	            return dvalue;
	        if (typeof data.orgasmPunishMode === "number")
	            dvalue.orgasmPunishMode = data.orgasmPunishMode;
	        return dvalue;
	    })(xd.settings);
	    ret.stat = ((data) => {
	        const dvalue = defaultData.stat;
	        if (data === undefined)
	            return dvalue;
	        if (typeof data.script_run_time === "number")
	            dvalue.script_run_time = data.script_run_time;
	        if (typeof data.wolfgirl_time === "number")
	            dvalue.wolfgirl_time = data.wolfgirl_time;
	        if (typeof data.stash_time === "number")
	            dvalue.stash_time = data.stash_time;
	        if (typeof data.last_fix_time === "number")
	            dvalue.last_fix_time = data.last_fix_time;
	        if (typeof data.task === "object") {
	            const dvalue = defaultData.stat.task;
	            if (typeof data.task.finished === "number")
	                dvalue.finished = data.task.finished;
	            if (typeof data.task.failed === "number")
	                dvalue.failed = data.task.failed;
	            if (typeof data.task.counter === "object") {
	                const dvalue = defaultData.stat.task.counter;
	                for (const key in data.task.counter) {
	                    if (typeof data.task.counter[key] === "number")
	                        dvalue[key] = data.task.counter[key];
	                }
	            }
	        }
	        return dvalue;
	    })(xd.stat);
	    ret.points = ((data) => {
	        const dvalue = defaultData.points;
	        if (data === undefined)
	            return dvalue;
	        if (typeof data.current === "number")
	            dvalue.current = data.current;
	        if (typeof data.punish_time === "number")
	            dvalue.punish_time = data.punish_time;
	        if (typeof data.task_time === "number")
	            dvalue.task_time = data.task_time;
	        if (typeof data.orgasm_punish_time === "number")
	            dvalue.orgasm_punish_time = data.orgasm_punish_time;
	        return dvalue;
	    })(xd.points);
	    ret.arousal = ((data) => {
	        const dvalue = defaultData.arousal;
	        if (data === undefined)
	            return dvalue;
	        if (typeof data.orgasm === "number")
	            dvalue.orgasm = data.orgasm;
	        if (typeof data.ruined === "number")
	            dvalue.ruined = data.ruined;
	        if (typeof data.resist === "number")
	            dvalue.resist = data.resist;
	        if (typeof data.edge_time === "number")
	            dvalue.edge_time = data.edge_time;
	        return dvalue;
	    })(xd.arousal);
	    return ret;
	}

	class PointsUtilities {
	    constructor(parent) {
	        this.parent = parent;
	    }
	    save() {
	        this.parent.save("points");
	    }
	    get data() {
	        return this.parent.data.points;
	    }
	    get points() {
	        return this.parent.data.points.current;
	    }
	    set points(arg) {
	        this.parent.data.points.current = arg;
	        this.save();
	    }
	    get punish_time() {
	        return this.parent.data.points.punish_time;
	    }
	    set punish_time(arg) {
	        this.parent.data.points.punish_time = arg;
	        this.save();
	    }
	    get orgasm_punish_time() {
	        return this.parent.data.points.orgasm_punish_time;
	    }
	    set orgasm_punish_time(arg) {
	        this.parent.data.points.orgasm_punish_time = arg;
	        this.save();
	    }
	    get task_time() {
	        return this.parent.data.points.task_time;
	    }
	    set task_time(arg) {
	        this.parent.data.points.task_time = arg;
	        this.save();
	    }
	    use_points(arg) {
	        return {
	            then: (accept, reject) => {
	                if (this.points < arg) {
	                    if (reject)
	                        reject(this.points);
	                }
	                else {
	                    this.points -= arg;
	                    accept(this.points);
	                }
	            }
	        };
	    }
	}

	class ArousalUtilities {
	    constructor(parent) {
	        this.parent = parent;
	    }
	    save() {
	        this.parent.save("arousal");
	    }
	    get data() {
	        return this.parent.data.arousal;
	    }
	    get ruined() {
	        return this.data.ruined;
	    }
	    set ruined(num) {
	        this.data.ruined = num;
	        this.save();
	    }
	    get orgasm() {
	        return this.data.orgasm;
	    }
	    set orgasm(num) {
	        this.data.orgasm = num;
	        this.save();
	    }
	    get resist() {
	        return this.data.resist;
	    }
	    set resist(num) {
	        this.data.resist = num;
	        this.save();
	    }
	    setMonitor(filter, orgasm) {
	        const rfilter = (player, cb) => { if (filter(player))
	            cb(); };
	        orgasm.onOrgasm((player) => rfilter(player, () => this.orgasm += 1));
	        orgasm.onResist((player) => rfilter(player, () => this.resist += 1));
	        orgasm.onRuined((player) => rfilter(player, () => this.ruined += 1));
	    }
	}

	class StatUtilities {
	    constructor(parent) {
	        this.parent = parent;
	        this.add_time_counter = 0;
	    }
	    save() {
	        this.parent.save("stat");
	    }
	    add_counter(taskKey, count) {
	        const couter = this.parent.data.stat.task.counter;
	        if (couter[taskKey] === undefined) {
	            couter[taskKey] = count;
	        }
	        else {
	            couter[taskKey] += count;
	        }
	        this.save();
	    }
	    task_finished(succeed) {
	        if (succeed) {
	            this.parent.data.stat.task.finished++;
	        }
	        else {
	            this.parent.data.stat.task.failed++;
	        }
	        this.save();
	    }
	    add_time(isWolfGirl, isStashed, time) {
	        this.parent.data.stat.script_run_time += time;
	        if (isWolfGirl) {
	            this.parent.data.stat.wolfgirl_time += time;
	        }
	        if (isStashed) {
	            this.parent.data.stat.stash_time += time;
	        }
	        if (this.add_time_counter++ > 10) {
	            this.save();
	            this.add_time_counter = 0;
	        }
	    }
	    set_last_fix_time(time) {
	        this.parent.data.stat.last_fix_time = time;
	        this.save();
	    }
	}

	const DataCategory = {
	    outfit: "Default",
	    permission: "Default",
	    stat: "Frequent",
	    settings: "Default",
	    points: "Default",
	    arousal: "Frequent"
	};
	function isFrequentDataKey(key) {
	    return DataCategory[key] === "Frequent";
	}
	function isDefaultDataKey(key) {
	    return DataCategory[key] === "Default";
	}
	function PickDefaultData(data) {
	    return Object.keys(DataCategory).reduce((prev, cur) => {
	        if (isDefaultDataKey(cur))
	            Object.assign(prev, { [cur]: data[cur] });
	        return prev;
	    }, {});
	}
	function PickFrequenceData(data) {
	    return Object.keys(DataCategory).reduce((prev, cur) => {
	        if (isFrequentDataKey(cur))
	            Object.assign(prev, { [cur]: data[cur] });
	        return prev;
	    }, {});
	}

	function deserialize(str) {
	    const data = str.reduce((prev, cur) => {
	        if (!cur)
	            return prev;
	        let d = LZString.decompressFromBase64(cur);
	        if (!d)
	            return prev;
	        try {
	            let decoded = JSON.parse(d);
	            return Object.assign(prev, decoded);
	        }
	        catch {
	            return prev;
	        }
	    }, {});
	    return Validate(data);
	}
	function serialize(data) {
	    return LZString.compressToBase64(JSON.stringify(data));
	}
	class SettingUtilities {
	    constructor(_data) {
	        this._data = _data;
	    }
	    query(key) {
	        return this._data.data.settings[key];
	    }
	    update(key, value) {
	        this._data.data.settings[key] = value;
	        this._data.save("settings");
	    }
	}
	const WrongDataKeyName = "BCWolfGrilData";
	const WrongFrequentDataKeyName = "BCWolfGrilFrequentData";
	function load(C, mod) {
	    const wrongDefaultData = C.ExtensionSettings[WrongDataKeyName];
	    const wrongFrequentData = C.ExtensionSettings[WrongFrequentDataKeyName];
	    if (wrongDefaultData || wrongFrequentData) {
	        const ret = deserialize([wrongDefaultData, wrongFrequentData]);
	        delete C.ExtensionSettings[WrongDataKeyName];
	        delete C.ExtensionSettings[WrongFrequentDataKeyName];
	        C.ExtensionSettings[DataKeyName] = wrongDefaultData;
	        C.ExtensionSettings[FrequentDataKeyName] = wrongFrequentData;
	        mod.callOriginal("ServerSend", ["AccountUpdate", { ExtensionSettings: C.ExtensionSettings }]);
	        return ret;
	    }
	    const defaultData = C.ExtensionSettings[DataKeyName];
	    const frequentData = C.ExtensionSettings[FrequentDataKeyName];
	    return deserialize([defaultData, frequentData]);
	}
	function save(data, key) {
	    if (Player && Player.ExtensionSettings) {
	        if (key === undefined || isDefaultDataKey(key)) {
	            Player.ExtensionSettings[DataKeyName] = serialize(PickDefaultData(data));
	            ServerPlayerExtensionSettingsSync(DataKeyName);
	        }
	        if (key === undefined || isFrequentDataKey(key)) {
	            Player.ExtensionSettings[FrequentDataKeyName] = serialize(PickFrequenceData(data));
	            ServerPlayerExtensionSettingsSync(FrequentDataKeyName);
	        }
	    }
	}
	class DataManager {
	    constructor(data) {
	        this.data = data;
	        this._permission = new PermissionUtilities(this);
	        this._outfit = new OutfitUtilities(this);
	        this._points = new PointsUtilities(this);
	        this._arousal = new ArousalUtilities(this);
	        this._stat = new StatUtilities(this);
	        this._setting = new SettingUtilities(this);
	    }
	    save(key) {
	        save(this.data, key);
	    }
	    static get instance() {
	        return this._instance;
	    }
	    static get permission() {
	        return this.instance._permission;
	    }
	    static get outfit() {
	        return this.instance._outfit;
	    }
	    static get points() {
	        return this.instance._points;
	    }
	    static get arousal() {
	        return this.instance._arousal;
	    }
	    static get statistics() {
	        return this.instance._stat;
	    }
	    static get settings() {
	        return this.instance._setting;
	    }
	    static init(mod, msg) {
	        return new Promise((resolve) => {
	            const load_then_message = (C) => {
	                if (this._instance)
	                    return;
	                if (C) {
	                    const data = load(C, mod);
	                    this._instance = new DataManager(data);
	                    if (msg)
	                        console.log(msg);
	                    resolve(this._instance);
	                }
	            };
	            mod.hookFunction('LoginResponse', 1, (args, next) => {
	                next(args);
	                load_then_message(Player);
	            });
	            if (Player && Player.MemberNumber) {
	                load_then_message(Player);
	            }
	        });
	    }
	}
	DataManager._instance = undefined;

	const IsSelf = (player, sender) => (typeof sender !== "number" ? sender.MemberNumber : sender) === player.MemberNumber;
	const IsModerator = (player, moderator) => {
	    if (DataManager.permission.isCommandAuthorized(player, moderator))
	        return true;
	    return false;
	};
	const Or = (...prerequisites) => {
	    return (player, sender) => {
	        return prerequisites.some(p => p(player, sender));
	    };
	};
	const And = (...prerequisites) => {
	    return (player, sender) => {
	        return prerequisites.every(p => p(player, sender));
	    };
	};
	const Not = (prerequisite) => {
	    return (player, sender) => {
	        return !prerequisite(player, sender);
	    };
	};
	const BasicPrerequisites = And(Not(IsSelf), IsPlayerWolfGirl, IsModerator);
	const OutfitFixPrerequisites = And(Not(IsSelf), IsModerator);
	const SelfPrerequisites = And(IsSelf, IsPlayerWolfGirl);
	const ModOrSelfPrerequisites = And(Or(IsSelf, IsModerator), IsPlayerWolfGirl);

	const ItemCmds = [
	    {
	        match: /^((关闭|基础|完全)听觉限制)|(hearing limitation (off|basic|full))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            HearingCtrlSequence(player, (() => {
	                if (content[2] === "关闭" || content[4].toLowerCase() === "off")
	                    return "off";
	                if (content[2] === "基础" || content[4].toLowerCase() === "basic")
	                    return "base";
	                if (content[2] === "完全" || content[4].toLowerCase() === "full")
	                    return "total";
	                return "total";
	            })());
	        }
	    },
	    {
	        match: /^((关闭|基础|完全)视觉限制)|(visual restrictions (off|basic|full))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            VisionCtrlSequence(player, (() => {
	                if (content[2] === "关闭" || content[4].toLowerCase() === "off")
	                    return "off";
	                if (content[2] === "基础" || content[4].toLowerCase() === "basic")
	                    return "base";
	                if (content[2] === "完全" || content[4].toLowerCase() === "full")
	                    return "total";
	                return "total";
	            })());
	        }
	    },
	    {
	        match: /^((关闭|基础|完全)语言限制)|(language restrictions (off|basic|full))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            VoiceCtrlSequence(player, (() => {
	                if (content[2] === "关闭" || content[4].toLowerCase() === "off")
	                    return "off";
	                if (content[2] === "基础" || content[4].toLowerCase() === "basic")
	                    return "base";
	                if (content[2] === "完全" || content[4].toLowerCase() === "full")
	                    return "total";
	                return "total";
	            })());
	        }
	    },
	    {
	        match: /^((关闭|基础|完全)手臂限制)|(arm restraint (off|basic|full))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            HandsCtrlSequence(player, (() => {
	                if (content[2] === "关闭" || content[4].toLowerCase() === "off")
	                    return "off";
	                if (content[2] === "基础" || content[4].toLowerCase() === "basic")
	                    return "base";
	                if (content[2] === "完全" || content[4].toLowerCase() === "full")
	                    return "total";
	                return "total";
	            })());
	        }
	    },
	    {
	        match: /^((关闭|基础|完全)行走限制)|(leg restraint (off|basic|full))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            FeetCtrlSequence(player, (() => {
	                if (content[2] === "关闭" || content[4].toLowerCase() === "off")
	                    return "off";
	                if (content[2] === "基础" || content[4].toLowerCase() === "basic")
	                    return "base";
	                if (content[2] === "完全" || content[4].toLowerCase() === "full")
	                    return "total";
	                return "total";
	            })());
	        }
	    },
	    {
	        match: /^((关闭|寸止|拒绝)高潮锁)|(orgasm lock (off|edge|deny))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            ArousalCtrlSequence(player, (() => {
	                if (content[2] === "关闭" || content[4].toLowerCase() === "off")
	                    return "off";
	                if (content[2] === "寸止" || content[4].toLowerCase() === "edge")
	                    return "edge";
	                if (content[2] === "拒绝" || content[4].toLowerCase() === "deny")
	                    return "deny";
	                return "off";
	            })());
	        }
	    },
	    {
	        match: /^((关闭|打开|最大)振动器)|(vibrator (off|on|max))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            ToysCtrlSequence(player, (() => {
	                if (content[2] === "关闭" || content[4].toLowerCase() === "off")
	                    return "off";
	                if (content[2] === "打开" || content[4].toLowerCase() === "on")
	                    return "open";
	                if (content[2] === "最大" || content[4].toLowerCase() === "max")
	                    return "max";
	                return "max";
	            })());
	        }
	    },
	    {
	        match: /^((关闭|打开)公开操作权限)|(public operation permissions (close|open))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            FuturisticPublicCtrlSequence(player, (() => {
	                if (content[2] === "关闭" || content[4].toLowerCase() === "close")
	                    return "close";
	                if (content[2] === "打开" || content[4].toLowerCase() === "open")
	                    return "open";
	                return "open";
	            })());
	        }
	    },
	];

	function ExitFixSequence(player) {
	    const work_sequence = [
	        new CheckWork(() => {
	            if (DefaultCheckItemOnTarget(player, ToolsCrate))
	                return CheckWork.Accepted;
	            return CheckWork.Rejected;
	        }, (pl, result) => {
	            if (!result.passed)
	                return { mode: "chat-action", msg: "Error: Not in maintenance mode." };
	        }),
	        new MessageWork({ mode: "chat-action", msg: "Received instruction to exit maintenance mode" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The maintenance cabin door opens, and the robotic arm pushes {player_wg} out. Then it gradually becomes distorted and transparent, and finally only a small cyclone was left." }),
	        new ItemRemoveWork(player, [ToolsCrate]),
	    ];
	    TimedWorker.global.push({ description: "ExitFixSequence", works: work_sequence });
	}

	function IsWorkParamItem(item) {
	    return item.target !== undefined;
	}
	function IsWorkItem(item) {
	    return IsWorkParamItem(item) && typeof item.target !== "string";
	}
	function IsStringWorkItem(item) {
	    return IsWorkParamItem(item) && typeof item.target === "string";
	}
	class OutfitFixWork extends TimedWork {
	    constructor(acting, target, message) {
	        super();
	        this.acting = acting;
	        this.message = message;
	        this._target = target.map(i => {
	            if (typeof i === "string")
	                return { target: OutfitItemsMap.get(i) };
	            else if (IsWorkItem(i))
	                return i;
	            else if (IsStringWorkItem(i))
	                return { ...i, target: OutfitItemsMap.get(i.target) };
	            else
	                return { target: i };
	        });
	    }
	    run(player) {
	        const app_map = GatherAppMap(player);
	        EILNetwork.Access.craft;
	        let result = this._target.reduce((acc, i) => {
	            const existed_i = app_map.get(i.target.Asset.Group);
	            if (!existed_i)
	                acc.canRepair.push(i);
	            else if (DefaultCheckOutfitItem(existed_i, i.target)) ;
	            else if (existed_i.Property && existed_i.Property.Effect?.includes("Lock"))
	                acc.blocked.push(i);
	            else
	                acc.canRepair.push(i);
	            return acc;
	        }, { canRepair: [], blocked: [] });
	        const locked_items = result.blocked.map(i => i.target.Asset.Group).map(i => app_map.get(i).Asset.Description).join(", ");
	        const do_message = (result) => (((msg) => msg && ParseMessage(msg, { player }, { locked_items }))(this.message?.(result)));
	        if (result.blocked.length > 0) {
	            do_message({ ret: "blocked", blocked: result.blocked.map(i => i.target.Asset.Group) });
	            return TimedWorkState.interrupted;
	        }
	        if (result.canRepair.length === 0) {
	            do_message({ ret: "passed" });
	            return TimedWorkState.finished;
	        }
	        const saved_item = DataManager.outfit.color_store;
	        const lock = CalculateLocks(this.acting, player);
	        FuturisticBypass.instance.on = true;
	        player.Appearance = player.Appearance.concat(result.canRepair.map(i => {
	            const existed_i = app_map.get(i.target.Asset.Group);
	            const expected_i = ItemFromOutfit(this.acting, player, i.target);
	            if (!expected_i)
	                return undefined;
	            const saved = saved_item.get(i.target.Asset.Group);
	            if (saved && saved.asset === expected_i.Asset.Name)
	                expected_i.Color = saved.color;
	            if (i.option)
	                ExtendedItemSetOptionByRecord(player, expected_i, i.option);
	            if (expected_i?.Property?.LockedBy === undefined)
	                InventoryLock(player, expected_i, lock, player.MemberNumber);
	            if (!expected_i.Property)
	                expected_i.Property = {};
	            if (i.property)
	                Object.assign(expected_i.Property, i.property);
	            if (!existed_i)
	                return expected_i;
	            else
	                Object.assign(existed_i, expected_i);
	        }).filter(i => i !== undefined));
	        FuturisticBypass.instance.on = false;
	        AppearanceUpdate(player);
	        do_message({ ret: "canfix", counter: result.canRepair.length });
	        return TimedWorkState.finished;
	    }
	}

	function DressSequence(net, player, target) {
	    const clothing_stash = [];
	    net.craft;
	    const work_sequence = [
	        new CheckWork((player) => {
	            return IsFullyDressed(target) ? CheckWork.Stop : CheckWork.Continue;
	        }, (pl, result) => {
	            if (result.passed)
	                return StdMissingAction;
	        }),
	        new MessageWork({ mode: "chat-action", msg: "Target selected, wolf girl identity chip detected, remote device connection opening" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Remote connection activated, deploying portable wolf girl training facility maintenance pod" }),
	        new MessageWork({ mode: "action", msg: "{player} openes a small partition on the side of her glasses, and an auxiliary positioning beacon floats out and soon hovers behind {target}" }, { target }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "There seems to be some small ripples in the space, and with a small cyclone, a complex maintenance cabin filled with exquisite equipment appears behind {target}, and several mechanical arms stretch out from it and pull her into the maintenance cabin." }, { target }),
	        new ItemWearWork([ToolsCrate], target),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Target detected, maintenance bay secured and locked. Scanning size and collecting data" }),
	        new ItemOptionWork(target, [{ target: ToolsCrate.Asset.Group, option: { "w": 1, "l": 2, "a": 1, "d": 0, "t": 0, "h": 4 } }]),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "Confirmed trainer is {player}, confirmed training kit installation target is {target}" }, { target }),
	        new MessageWork({ mode: "chat-action", msg: "After collecting the body information, start installing the training components" }),
	        new MessageWork({ mode: "chat-action", msg: "Clothes are being removed. Please close your eyes and hold your breath." }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "A mechanical arm extends from the top of the equipment compartment, surrounding {target}'s body and spraying solvent. Soon, {target}'s clothes melt bit by bit, and the dissolved clothes flow down along the body to the bottom of the maintenance compartment and are discharged." }, { target }),
	        new ClothRemoveWork(target, clothing_stash),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Confirmed that the clothes have been cleaned" }),
	        new MessageWork({ mode: "action", msg: "Several mechanical arms extend from the upper and lower parts of the maintenance cabin, take the limbs of {target} from the cabin's fixing system, and stretch them out forcefully." }, { target }),
	        new ItemOptionWork(target, [{ target: ToolsCrate.Asset.Group, option: { "w": 1, "l": 3, "a": 3, "d": 0, "t": 0, "h": 4 } }]),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "{target}, are you willing to be trained to be a wolf girl? Please answer with yes or no. If yes, does it mean that you will lose enough but still retain a little autonomy, or does it mean gaining and owning for you?" }, { target }),
	        new MessageWork({ mode: "chat-action", msg: "Please answer yes or no. Of course, remaining silent and refusing to answer is also an option." }),
	        new WaitResponseWork(target, {
	            accept: /^(?!.*no).*/g,
	            accept_msg: { mode: "chat-action", msg: "Willingness confirmed, installation process continuing" },
	            reject: /No/g,
	            reject_msg: { mode: "action", msg: "Regardless of the answer, the maintenance cabin is still faithfully executing the program and continuing the installation process." }
	        }, 15 * 1000, (player, target) => {
	            ParseMessage({ mode: "action", msg: "The reply waiting time has timed out, it is considered as default and the next installation process is in progress" }, { player, target });
	        }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "With the help of the mechanical arm, several delicate cuffs are installed on {target}. The small mechanical locking sound is faint but clearly audible." }, { target }),
	        ...['ItemArms', 'ItemFeet', 'ItemLegs'].map(e => new ItemWearWork([e], target)),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Restrain self-examination" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The cuffs on {target} vibrate slightly, and a small lock icon lights up." }, { target }),
	        new ItemLockWork(['ItemArms', 'ItemFeet', 'ItemLegs'], target),
	        new MessageWork({ mode: "chat-action", msg: "Confirmed to be installed in place and locked" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "Two more sophisticated robotic arms extend from both sides and gently pinch {target}'s nipples." }, { target }),
	        new MessageWork({ mode: "action", msg: "It seems to be just a cold touch, followed by a tight feeling and pulling force that makes {target} realize that a prop has been installed on her nipple." }, { target }),
	        new ItemWearWork(['ItemNipplesPiercings', 'ItemNipples'], target),
	        new MessageWork({ mode: "chat-action", msg: "Confirmed that the components are installed properly" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The robot arm lets go of {target}'s nipple, move down little by little, and stop at {target}'s lower abdomen. The robot arm gently separates the labia and foreskin, exposing the tender clitoris" }, { target }),
	        new MessageWork({ mode: "action", msg: "The pleasure brought by the tightness on the clitoris is obviously more obvious, and at the same time, the pleasure brought by the sudden fullness in the vagina and the back hole is in contrast, making {target}'s body unconsciously twist slightly in the restraint of the maintenance cabin" }, { target }),
	        new ItemWearWork(['ItemVulvaPiercings', 'ItemVulva', 'ItemButt'], target),
	        new MessageWork({ mode: "chat-action", msg: "Restrain self-examination" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "A small vibration brings {target} some insignificant pleasure, and then a beeping sound indicates that the locking is completed sounds. What does this mean?" }, { target }),
	        new ItemLockWork(['ItemVulvaPiercings', 'ItemVulva', 'ItemButt', 'ItemNipplesPiercings'], target),
	        new MessageWork({ mode: "chat-action", msg: "Confirmed to be installed in place and locked" }),
	        new MessageWork({ mode: "action", msg: "Just like the automated maintenance corridor outside Tony Stark's building in New York, the robotic arms lifts up several armor-like equipments. The equipments have been preheated long ago, so hopefully they will not bring chill to {target}, maybe?" }, { target }),
	        new MessageWork({ mode: "action", msg: "The chest, torso, and hips are covered with warmth, accompanied by the subtle vibrations of the mechanical combination. It seems that it was just a set of extremely close-fitting and comfortable underwear that was put on the body in this way." }, { target }),
	        new ItemWearWork(['ItemBreast', 'ItemPelvis', 'ItemTorso', 'ItemTorso2'], target),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Restrain self-examination" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The beeping sound rings out again, and the number of lock icons displayed on {target} increase. Is it announcing loss or possession?" }, { target }),
	        new ItemLockWork(['ItemBreast', 'ItemPelvis', 'ItemTorso', 'ItemTorso2'], target),
	        new MessageWork({ mode: "chat-action", msg: "Confirmed to be installed in place and locked" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "A barrel-shaped structure connected to several sophisticated devices slowly decend and cover {target}'s head. The brief bright light and loud noise make {target} close her eyes." }, { target }),
	        new ItemWearWork(['ItemEars', 'ItemHead'], target),
	        new MessageWork({ mode: "action", msg: "After the brief trance and dizziness ends, {target} does not have much time to notice the new equipment in front of her eyes and ears, because the mechanical claws gently pinch her nose, forcing her to open her mouth to breathe." }, { target }),
	        new MessageWork({ mode: "action", msg: "But it is obviously a conspiracy of the maintenance cabin, because soon a ball gag is stuffed into her mouth, and the mouthpiece and accessories follow." }, { target }),
	        new ItemWearWork(['ItemMouth', 'ItemMouth2', 'ItemMouth3'], target),
	        new DelayWork(5000),
	        new ItemPropertyWork(target, [{ group: 'ItemMouth2', property: { OverridePriority: 1 } }, { group: 'ItemMouth3', property: { OverridePriority: 1 } }]),
	        new MessageWork({ mode: "action", msg: "The muzzle's camouflage is quickly activated, completely exposing {target}'s face and the ball gag in her mouth." }, { target }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Restrain self-examination" }),
	        new DelayWork(5000),
	        new ItemLockWork(['ItemEars', 'ItemHead', 'ItemMouth', 'ItemMouth2', 'ItemMouth3'], target),
	        new MessageWork({ mode: "action", msg: "A lock icon lights up in the air in front of the ball, but unfortunately it is a holographic projection that cannot be blocked." }, { target }),
	        new ItemPropertyWork(target, [{ group: 'ItemMouth3', property: { OverridePriority: { "Straps": 1, "Nose": 1, "Mask": 1, "IconLock": 42, "IconMute": 1, "IconX": 1 } } }]),
	        new ItemOptionWork(target, [{ target: 'ItemMouth3', option: { "n": 0, "h": 0, "s": 1 } }]),
	        new MessageWork({ mode: "chat-action", msg: "Confirmed to be installed in place and locked" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The mechanical arms holding {target}'s limbs lift her body slightly. The previously installed cuffs seem to have activated some kind of working mode, causing {target}'s hands and feet to lose strength temporarily." }, { target }),
	        new ItemWearWork(['ItemHands', 'ItemBoots'], target),
	        new MessageWork({ mode: "action", msg: "While {target}'s hands and feet are naturally stretched, several robotic arms deftly put gloves and high heels on her body, carefully adjusting the position to ensure comfort." }, { target }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Restrain self-examination" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "With a slight tightening feeling coming from the wrists and ankles, {target} seems to have successfully controlled her hands and feet. She will get used to the warm wrapping feeling and hazy touch eventually, right?" }, { target }),
	        new ItemLockWork(['ItemHands', 'ItemBoots'], target),
	        new MessageWork({ mode: "chat-action", msg: "Confirmed to be installed in place and locked" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "The control core and brand name will be installed soon. I wish {target} to become an excellent wolf girl in advance." }, { target }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The delicate collar is quickly placed around {target}'s neck, and then slowly begins to tighten until the collar is slightly embedded in the neck. Even so, the tightening of the collar does not affect the smooth breathing and blood flow at all." }, { target }),
	        new ItemWearWork(['ItemNeck'], target),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The last robotic arm approaches {target} little by little. The name tag on it indicating {target}'s name with a string of numbers. Perhaps this will be the last time she is called by this name." }, { target }),
	        new ItemWearWork(['ItemNeckAccessories'], target),
	        new ItemPropertyWork(target, [{ group: 'ItemNeckAccessories', property: { Text: target.MemberNumber?.toString() ?? "" } }]),
	        new MessageWork({ mode: "chat-action", msg: "Control core self-checking" }),
	        new DelayWork(5000),
	        new ItemLockWork(['ItemNeck', 'ItemNeckAccessories'], target),
	        new MessageWork({ mode: "chat-action", msg: "Confirmed that it is installed in place and locked, and that connections are successfully established with all components" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Rebuilding {target_wg}'s clothing according to settings" }, { target }),
	        new ClothRestoreWork(target, clothing_stash),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Trainer {player}, {target_wg} has installed the training kit and the kit has been initialized. I wish you a happy game." }, { target }),
	        new ItemOptionWork(target, [{ target: ToolsCrate.Asset.Group, option: { "w": 1, "l": 0, "a": 0, "d": 0, "t": 0, "h": 0 } }]),
	        new ItemOptionWork(target, [
	            { target: 'ItemArms', option: { typed: 1 } },
	            { target: 'ItemFeet', option: { typed: 2 }, },
	            { target: 'ItemLegs', option: { typed: 2 } },
	            { target: 'ItemHands', option: { typed: 0 } }
	        ]),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The maintenance hatch opens, and the mechanical arm pushes {target_wg} out. Then it begins to gradually become distorted and transparent, and the small auxiliary positioning beacon behind {target_wg} automatically returns to the trainer {player}'s wolf trainer multi-purpose auxiliary glasses." }, { target }),
	        new ItemRemoveWork(target, [ToolsCrate]),
	    ];
	    TimedWorker.global.push({ description: "Dress Sequence", works: work_sequence });
	}
	function InitDressSequence(player, target) {
	    ChatRoomAction.instance.LocalInfo(">> Connecting to Wolf Girl network...");
	    EILNetwork.force_fetch().then(net => {
	        const work_sequence = [
	            new MessageWork({ mode: "local-status", msg: "   ...connected to the Wolf Girl network" }),
	            new MessageWork({ mode: "local-status", msg: ">> Permission check starts" }),
	            new MessageWork({ mode: "local-status", msg: `   EIL Network Administrator: ${DataManager.permission.isEILNet(player) ? "passed" : "Failed"}` }),
	            new MessageWork({ mode: "local-status", msg: `   Lover permissions: ${DataManager.permission.isLover(player, target) ? "passed" : "Failed"}` }),
	            new MessageWork({ mode: "local-status", msg: `   Owner permissions: ${DataManager.permission.isOwner(player, target) ? "passed" : "Failed"}` }),
	            new CheckWork((player) => {
	                const passed = [
	                    DataManager.permission.isEILNet(player),
	                    DataManager.permission.isLover(player, target),
	                    DataManager.permission.isOwner(player, target)
	                ].some(i => i);
	                if (passed)
	                    return CheckWork.Accepted;
	                else
	                    return CheckWork.Rejected;
	            }, (player, result) => {
	                if (result.passed)
	                    return { mode: "local-status", msg: "   The permission check passes and the installation process starts" };
	                else
	                    return { mode: "local-status", msg: "   The command has been rejected, aborting the installation process" };
	            }),
	            new CommonWork(() => {
	                DressSequence(EILNetwork.Access, player, target);
	            })
	        ];
	        TimedWorker.global.push({ description: "Init Dress Sequence", works: work_sequence });
	    }).catch(e => {
	        ChatRoomAction.instance.LocalInfo("...Wolf Girl Network disconnected, aborting process.");
	    });
	}
	function DressFixSequence(sender, player) {
	    const cannot_fix = {
	        mode: "chat-action",
	        msg: "Found item {locked_items} replaced by locked item, cannot be automatically repaired, stopping the repair process."
	    };
	    EILNetwork.Access.craft;
	    let cumm_counter = 0;
	    const create_result_process = (msg) => (result) => {
	        if (result.ret === "canfix" && result.counter) {
	            cumm_counter += result.counter;
	            return msg;
	        }
	        else if (result.ret === "blocked")
	            return cannot_fix;
	    };
	    const work_sequence = [
	        new CheckWork(() => {
	            if (IsCollarOn(player))
	                return CheckWork.Accepted;
	            return CheckWork.Rejected;
	        }, (pl, result) => {
	            if (!result.passed)
	                return { mode: "chat-action", msg: "Warning, the central control core is lost, please go to EIL or find EIL personnel to handle it" };
	        }),
	        new MessageWork({ mode: "chat-action", msg: "Instructions received, maintenance mode enabled" }),
	        new MessageWork({ mode: "chat-action", msg: "Remote connection activated, deploying portable wolf girl training facility maintenance pod" }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "There seems to be some small ripples in the space, and with a small cyclone, a complex maintenance cabin filled with exquisite equipment appears behind {player_wg}, and several mechanical arms stretch out from it and pull her into the maintenance cabin." }),
	        new ItemWearWork([ToolsCrate], sender, ItemWearWork.TARGET_ACTING),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Target detected, maintenance bay secured and locked. Scanning" }),
	        new ItemOptionWork(player, [{ target: ToolsCrate.Asset.Group, option: { "w": 1, "l": 2, "a": 2, "d": 0, "t": 0, "h": 4 } }]),
	        new CheckWork(() => {
	            if (IsFullyDressed(player))
	                return CheckWork.Stop;
	            else
	                return CheckWork.Continue;
	        }, (pl, r) => {
	            if (r.passed)
	                return { mode: "chat-action", msg: "Component scan completed, all online and functioning normally, energy core fully charged, maintenance mode ended, please exit maintenance mode" };
	            else
	                return { mode: "chat-action", msg: "Component scan completed, found some components missing or offline, entered repair mode" };
	        }),
	        new MessageWork({ mode: "chat-action", msg: "Several mechanical arms quickly extend from the maintenance cabin and scan up and down in front of {player_wg}. A light blue beam shines on her, seeming able to see through everything." }),
	        new OutfitFixWork(sender, [
	            { target: "ItemEars" },
	            { target: "ItemHead" },
	            { target: "ItemMouth" },
	            { target: "ItemMouth2", property: { OverridePriority: 1 } },
	            {
	                target: "ItemMouth3",
	                option: { "n": 0, "h": 0, "s": 1 },
	                property: { OverridePriority: { "Straps": 1, "Nose": 1, "Mask": 1, "IconLock": 42, "IconMute": 1, "IconX": 1 } }
	            }
	        ], create_result_process({
	            mode: "chat-action",
	            msg: "Maybe {player_wg} wants to satisfy some cravings. Simple audio-visual experience can make her imagine that nothing has happened, and eating human food can give her brain an illusion? Or maybe she want to use her tongue and mouth to satisfy some obscene things because of the blockage of her body? Is fate unchangeable, or has she long forgotten when she made the choice for herself?"
	        })),
	        new OutfitFixWork(sender, ['ItemBreast', 'ItemNipplesPiercings', 'ItemNipples'], create_result_process({
	            mode: "action",
	            msg: "The plump breasts are indeed eye-catching, but is it a bit presumptuous to expose this asset that no longer belongs to you, no? The maintenance cabin uses a small electric shocker to shock {player_wg}'s nipples on both sides, and then resumes the installation of components."
	        })),
	        new OutfitFixWork(sender, ['ItemHands',
	            { target: 'ItemArms', option: { typed: 1 } }], create_result_process({
	            mode: "action",
	            msg: "It seems that {player_wg} has lost her bracelet and gloves. She seems to want to do something drastic. Was she trying some lewd actions? Or maybe she just wanted to feel the touch? However, the maintenance cabin doesn't care what her purpose was. It just faithfully follows the instructions and installs a new set of equipment back on {player_wg}."
	        })),
	        new OutfitFixWork(sender, [{ target: 'ItemTorso' }, { target: 'ItemTorso2' }, { target: 'ItemNeckAccessories', property: { Text: player.MemberNumber?.toString() ?? "" } }], create_result_process({
	            mode: "chat-action",
	            msg: "The external communication belt module, the drug injection module or the identity tag are abnormal. It is true that these modules are very easy to be damaged or lost. They are being repaired, but please note that there will be no discount on the repair cost."
	        })),
	        new OutfitFixWork(sender, ['ItemVulva', 'ItemPelvis', 'ItemButt', 'ItemVulvaPiercings'], create_result_process({
	            mode: "chat-action",
	            msg: "Your body, your breath, even your thoughts and your soul all belong to your master. Naturally, the right to orgasm does not belong to you. The pleasure you are allowed to obtain is to remind you of your identity, and the joy of orgasm is a reward from the master. Eating the forbidden fruit will naturally be severely punished."
	        })),
	        new OutfitFixWork(sender, ['ItemBoots',
	            { target: 'ItemFeet', option: { typed: 2 }, },
	            { target: 'ItemLegs', option: { typed: 2 } }], create_result_process({
	            mode: "action",
	            msg: "It looks like {player_wg}'s walking controller is missing. It's really difficult to remove it. Is she trying to escape? But since she became a wolf girl, isn't the freedom she has enough? Unfortunately, unless the master allows it, she can't escape anyway. Well, maybe I should tell the master about this. The maintenance cabin gives {player_wg} a slight electric shock, and then installs a new controller for her."
	        })),
	        new MessageWork({ mode: "chat-action", msg: "The component has been repaired. The corresponding reward points have been deducted according to the component loss situation. Rescanning and self-checking" }),
	        new CommonWork((player) => {
	            DataManager.points.points -= cumm_counter;
	            ParseMessage({ mode: "local", msg: `${cumm_counter} points have been deducted, current points are ${DataManager.points.points}` });
	        }),
	        new DelayWork(5000),
	        new CheckItemsWork(OutfitItems, (player, result) => {
	            DataManager.statistics.set_last_fix_time(Date.now());
	            DataManager.outfit.items = [];
	            if (result.missing.length === 0) {
	                ParseMessage({ mode: "chat-action", msg: "Component scan completed, all online and functioning normally, energy core fully charged, maintenance mode ended, please exit maintenance mode" }, { player });
	            }
	            else {
	                const missing_formated = result.missing.map(g => g.Craft.Name).join(", ");
	                ParseMessage({ mode: "chat-action", msg: "Error: Component repair failed, there are still unworn components: {missing_formated}" }, { player }, { missing_formated });
	            }
	        })
	    ];
	    TimedWorker.global.push({ description: "DressFixSequence", works: work_sequence });
	}

	function GatherColorStoreItem(player) {
	    let result = [];
	    player.Appearance.forEach(item => {
	        const ti = OutfitItemsMap.get(item.Asset.Group.Name);
	        if (ti && DefaultCheckOutfitItem(item, ti)) {
	            result.push({
	                asset: item.Asset.Name,
	                group: item.Asset.Group.Name,
	                color: item.Color ?? "Default",
	            });
	        }
	    });
	    return result;
	}
	function StashOutfit(player) {
	    const exclude = ['ItemNeck', 'ItemPelvis'];
	    let saved = [];
	    player.Appearance = player.Appearance.map(item => {
	        if (exclude.includes(item.Asset.Group.Name))
	            return item;
	        const ti = OutfitItemsMap.get(item.Asset.Group.Name);
	        if (ti && DefaultCheckOutfitItem(item, ti)) {
	            saved.push({
	                asset: {
	                    group: item.Asset.Group.Name,
	                    name: item.Asset.Name,
	                },
	                color: item.Color ?? "Default",
	                property: item.Property,
	            });
	            return undefined;
	        }
	        return item;
	    }).filter(i => i !== undefined);
	    DataManager.outfit.items = saved;
	    AppearanceUpdate(player);
	}
	var StashPopResult;
	(function (StashPopResult) {
	    StashPopResult[StashPopResult["Success"] = 0] = "Success";
	    StashPopResult[StashPopResult["Locked"] = 1] = "Locked";
	})(StashPopResult || (StashPopResult = {}));
	function StashPopOutfit(player) {
	    const saved = [...DataManager.outfit.items.values()];
	    const app_map = GatherAppMap(player);
	    EILNetwork.Access.craft;
	    if (saved.some(i => {
	        const item = app_map.get(i.asset.group);
	        if (!item)
	            return false;
	        if (DefaultCheckOutfitItem(item, OutfitItemsMap.get(i.asset.group)))
	            return false;
	        if (item.Property?.Effect?.includes("Lock") ?? true)
	            return true;
	        return false;
	    }))
	        return StashPopResult.Locked;
	    saved.forEach(i => {
	        const item = app_map.get(i.asset.group);
	        const oi = OutfitItemsMap.get(i.asset.group);
	        if (!oi)
	            return;
	        if (oi.Asset.Name !== i.asset.name)
	            return;
	        const nitem = ItemFromOutfit(player, player, oi);
	        if (!nitem)
	            return;
	        Object.assign(nitem, { Color: i.color, Property: i.property });
	        if (!item) {
	            player.Appearance.push(nitem);
	        }
	        else {
	            Object.assign(item, nitem);
	        }
	    });
	    DataManager.outfit.items = [];
	    AppearanceUpdate(player);
	    return StashPopResult.Success;
	}

	function PushMissingStopSequence(missing_formated) {
	    TimedWorker.global.insert_after_first({
	        description: "StopSequence", works: [
	            new MessageWork(StdMissingMsgN, { args: { missing_formated } }),
	            new MessageWork(StdMissingAction)
	        ]
	    });
	}

	function StartStashSequence(player) {
	    const work_sequence = [
	        new CheckItemsWork(["ItemNeck", "ItemPelvis"], (player, result) => {
	            if (result.missing.length > 0) {
	                PushMissingStopSequence(result.missing.map(g => g.Craft.Name).join(", "));
	                return TimedWorkState.interrupted;
	            }
	            else {
	                ParseMessage({ mode: "chat-action", msg: `Activating the Nano-bee Swarm Storage Restraint Device to enter hidden mode` });
	            }
	        }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "{player_wg}'s restraints seem to be dissolving bit by bit, turning into a small stream of metallic silver water flowing along her skin to the main control core and training underwear. As the water flow disappears, the original restraints disappear as if they had never existed. However, the collar on her neck and the training underwear on her body obviously disagreed with this idea." }),
	        new CommonWork((player) => {
	            StashOutfit(player);
	            DataManager.outfit.lite_mode = true;
	            ParseMessage({ mode: "chat-action", msg: "Switched to lightweight item mode." });
	        })
	    ];
	    TimedWorker.global.push({ description: "StartStashSequence", works: work_sequence });
	}
	function StartStashPopSequence(player) {
	    const work_sequence = [
	        new CheckItemsWork(["ItemNeck", "ItemPelvis"], (player, result) => {
	            if (result.missing.length > 0) {
	                PushMissingStopSequence(result.missing.map(g => g.Craft.Name).join(", "));
	                return TimedWorkState.interrupted;
	            }
	            else {
	                ParseMessage({ mode: "chat-action", msg: `Exiting restraint hiding mode, nanobee swarm at work` });
	            }
	        }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The main control core and training underwear vibrate slightly. If someone else were to look, they would see some small streams of metallic silver flowing out of them, flowing to all parts of {player_wg}'s body, slowly forming the original restraints and reconnecting the various components." }),
	        new CommonWork((player) => {
	            if (StashPopOutfit(player) === StashPopResult.Locked) {
	                ParseMessage({ mode: "chat-action", msg: "There is a locked item, unable to switch modes." });
	            }
	            else {
	                DataManager.outfit.lite_mode = false;
	                ParseMessage({ mode: "chat-action", msg: "Switched to full item mode." });
	            }
	        })
	    ];
	    TimedWorker.global.push({ description: "StartStashPopSequence", works: work_sequence });
	}
	function ColorSaveSequence(player, sender) {
	    const work_sequence = [
	        new MessageWork({ mode: "chat-action", msg: "Received command, scanning for changes in package appearance" }),
	        new MessageWork({ mode: "action", msg: "Several small streams of metallic silver water flow out of {player_wg}'s collar, slowly flowing along {player_wg}'s body to the restraints on various parts of her body. After a short stay, they return to the collar along the same path." }),
	        new DelayWork(5000),
	        new CommonWork((player) => {
	            DataManager.outfit.color_store = GatherColorStoreItem(player);
	            const collar = player.Appearance.find(a => a.Asset.Group.Name === "ItemNeck");
	            const color = (collar?.Color ?? ["#000000"])[0];
	            ParseMessage({ mode: "chat-action", msg: `The color scheme has been scanned and stored in the core, the current color scheme is marked as (${color})` });
	        })
	    ];
	    TimedWorker.global.push({ description: "ColorSaveSequence", works: work_sequence });
	}

	const OutfitCmds = [
	    {
	        match: /^(存储色彩方案)|(Save color scheme)/i,
	        prerequisite: BasicPrerequisites,
	        run(player) {
	            ColorSaveSequence();
	        },
	    },
	    {
	        match: /^((进入|退出)维护模式)|((enter|exit) Maintainance Mode)/i,
	        prerequisite: OutfitFixPrerequisites,
	        run(player, sender, content) {
	            if (content[2] === "进入" || content[4].toLowerCase() === "Enter")
	                DressFixSequence(sender, player);
	            if (content[2] === "退出" || content[4].toLowerCase() === "Exit")
	                ExitFixSequence(player);
	        },
	    },
	    {
	        match: /^(切换狼女物品模式)|(Toggle-Wolf-Girl-Item-Mode)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender) {
	            if (DataManager.outfit.items.size > 0) {
	                StartStashPopSequence();
	            }
	            else {
	                StartStashSequence();
	            }
	        },
	    },
	];

	const PermCmds = [
	    {
	        match: /((打开|关闭)恋人语音权限)|(((Open)|(Close)) Lover voice permission)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            DataManager.permission.setLoverMode(content[2] === "打开" || content[4].toLowerCase() == "open");
	            const data = DataManager.permission.data;
	            const perm_report = "Current voice permissions:\n"
	                + "  Lover voice permission: " + (data.loverModerators ? "Open" : "Closed");
	            RouteIM(args.type, player, sender, perm_report);
	        }
	    },
	    {
	        match: /((设置(添加|移除)|((add )|(remove )))(\d{1,10})(语音权限)|( voice permission))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            const add = (content[3] === "添加" || content[4].toLowerCase() === "add");
	            const id = parseInt(content[7]);
	            DataManager.permission.setModerator(id, add);
	            const perm = DataManager.permission;
	            const perm_report = "Current voice permissions:\n"
	                + "  Additional permissions list: " + (perm.isAdditionModerator(id) ? "+" : "-") + " " + id;
	            RouteIM(args.type, player, sender, perm_report);
	        }
	    },
	    {
	        match: /(查询语音权限)|(get voice permissions)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            ExtractMemberNumber(sender);
	            const data = DataManager.permission.data;
	            const perm_report = "Current voice permissions:\n"
	                + "  Lover voice permission: " + (data.loverModerators ? "Open" : "Closed") + "\n"
	                + "  Additional permissions list:\n"
	                + data.moderators.map((i, idx, arr) => `    ${i}`).join("\n");
	            RouteIM(args.type, player, sender, perm_report);
	        }
	    }
	];

	class ChatRoomWork extends TimedWork {
	    constructor(room, onfailed, onfinished) {
	        super();
	        this.room = room;
	        this.onfailed = onfailed;
	        this.onfinished = onfinished;
	        this._state = TimedWorkState.running;
	        this._first_run = true;
	    }
	    run(player) {
	        if (!this._first_run) {
	            return this._state;
	        }
	        this._first_run = false;
	        if (this.room === undefined) {
	            ChatRoomPlayerCanJoin = true;
	            const work = {
	                once_after_ChatSearchResultResponse: () => {
	                    this.onfinished?.(player, undefined);
	                    this._state = TimedWorkState.finished;
	                }
	            };
	            ChatRoomWork.chatRoomWorkSearchResultTasks.push(work);
	            CommonSetScreen("Online", "ChatSearch");
	        }
	        else {
	            const cj = this.room;
	            ChatRoomPlayerCanJoin = false;
	            const work = {
	                once_before_ChatSearchQuery: () => {
	                    ChatRoomSpace = cj.space;
	                    ElementValue("InputSearch", cj.name);
	                },
	                once_after_ChatSearchResultResponse: () => {
	                    const target = ChatSearchResult.find(e => e.Name === cj.name);
	                    this._state = TimedWorkState.interrupted;
	                    if (!target)
	                        this.onfailed?.(player, "notfound");
	                    else if (target.MemberCount >= target.MemberLimit)
	                        this.onfailed?.(player, "full");
	                    else {
	                        ServerSend("ChatRoomJoin", { Name: cj.name });
	                        this._state = TimedWorkState.running;
	                    }
	                },
	                once_after_ChatRoomSync: () => {
	                    if (ChatRoomData && ChatRoomData.Name === cj.name) {
	                        this.onfinished?.(player, cj.name);
	                        this._state = TimedWorkState.finished;
	                    }
	                    else {
	                        this.onfailed?.(player, "not_target");
	                        this._state = TimedWorkState.interrupted;
	                    }
	                }
	            };
	            ChatRoomWork.chatRoomWorkSearchQueryTasks.push(work);
	            ChatRoomWork.chatRoomWorkSearchResultTasks.push(work);
	            ChatRoomWork.chatRoomWorkRoomSyncTasks.push(work);
	        }
	        ChatRoomLeave();
	        CommonSetScreen("Online", "ChatSearch");
	        return this._state;
	    }
	    static init(mod, lateHook) {
	        mod.hookFunction("ChatSearchQuery", 1, (args, next) => {
	            while (this.chatRoomWorkSearchQueryTasks.length > 0) {
	                this.chatRoomWorkSearchQueryTasks.shift()?.once_before_ChatSearchQuery?.();
	            }
	            next(args);
	        });
	        mod.hookFunction("ChatSearchResultResponse", 1, (args, next) => {
	            next(args);
	            ChatRoomPlayerCanJoin = true;
	            while (this.chatRoomWorkSearchResultTasks.length > 0) {
	                this.chatRoomWorkSearchResultTasks.shift()?.once_after_ChatSearchResultResponse();
	            }
	        });
	        mod.hookFunction("ChatRoomSync", 1, (args, next) => {
	            next(args);
	            while (this.chatRoomWorkRoomSyncTasks.length > 0) {
	                this.chatRoomWorkRoomSyncTasks.shift()?.once_after_ChatRoomSync?.();
	            }
	        });
	    }
	}
	ChatRoomWork.chatRoomWorkSearchQueryTasks = [];
	ChatRoomWork.chatRoomWorkSearchResultTasks = [];
	ChatRoomWork.chatRoomWorkRoomSyncTasks = [];

	function RoomLeaveSequence(player, cmd_src) {
	    const work_sequence = [
	        new MessageWork({ mode: "action", msg: "Received the command to leave the room and started the kinematic check" }),
	        new CheckItemsWork(["ItemLegs", "ItemFeet", "ItemBoots"], (pl, result) => {
	            const missing_formated = result.missing.map(g => g.Craft.Name).join(", ");
	            if (result.missing.length === 3) {
	                RouteIM(cmd_src.type, player, cmd_src.sender, StdMissingMsgN.msg, { missing_formated });
	                ParseMessage(StdMissingAction, { player });
	                return TimedWorkState.interrupted;
	            }
	            RouteIM(cmd_src.type, player, cmd_src.sender, `Received the command, planning the path and executing it`);
	        }),
	        new CheckWork((pl) => {
	            if (pl.Appearance.some(e => {
	                if (OutfitItemsMap.has(e.Asset.Group.Name))
	                    return false;
	                if (e.Property && e.Property.Effect)
	                    return e.Property.Effect.some(f => ["Tethered", "Mounted", "Leash", "Freeze"].includes(f));
	            }))
	                return CheckWork.Rejected;
	            return CheckWork.Accepted;
	        }, (pl, result) => {
	            if (result.passed) {
	                ParseMessage({ mode: "action", msg: "The walking posture controller on {player_wg} lights up, controlling {player_wg} to slowly walk out of the room." }, { player });
	            }
	            else {
	                RouteIM(cmd_src.type, player, cmd_src.sender, `Action path planning failed, please remove obstacles or use forced exit command`);
	                ParseMessage(StdMissingAction, { player });
	            }
	        }),
	        new DelayWork(5000),
	        new ChatRoomWork(undefined),
	    ];
	    TimedWorker.global.push({ description: "Room Leave Sequence", works: work_sequence });
	}
	function RoomForceLeaveSequence(player, cmd_src) {
	    const CurryRouteIM = (msg, args) => RouteIM(cmd_src.type, player, cmd_src.sender, msg, args);
	    const work_sequence = [
	        new CheckItemsWork(["ItemVulvaPiercings", "ItemNipplesPiercings"], (pl, result) => {
	            if (result.missing.length === 2) {
	                const missing_formated = result.missing.map(g => g.Craft.Name).join(", ");
	                CurryRouteIM(StdMissingMsgN.msg, { missing_formated });
	                ParseMessage(StdMissingAction, { player });
	                return TimedWorkState.interrupted;
	            }
	            CurryRouteIM(`Forced departure procedure activated, beacon deployed, ready to be transmitted to EIL facility`);
	        }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "action", msg: "The space behind {player_wg} ripples slightly, and after a nearly instant of blinding white light, her figure completely disappears, leaving only a small cyclone behind." }),
	        new ChatRoomWork(EILNetwork.Access.room, (pl, reason) => {
	            CurryRouteIM("No access to EIL facilities, rooms are full or locked");
	        }, (pl, dest) => {
	            ParseMessage({ mode: "action", msg: "{player_wg}A blinding white light suddenly appears in the teleporter, slightly disturbing the comfortable temperature in the facility." }, { player });
	        }),
	        new MessageWork({ mode: "chat-action", msg: "Welcome to the EIL facility. Please do your own maintenance. Please find a cat maid for storage services. Please find a trainer for new wolf girls. Have fun." }),
	    ];
	    TimedWorker.global.push({ description: "Room Force Leave Sequence", works: work_sequence });
	}
	function RoomComeHereSequence(player, cmd_src) {
	    let data = {};
	    const CurryRouteIM = (msg, args) => RouteIM(cmd_src.type, player, cmd_src.sender, msg, args);
	    const work_sequence = [
	        new CheckItemsWork(["ItemLegs", "ItemFeet", "ItemBoots"], (pl, result) => {
	            if (result.missing.length === 3) {
	                const missing_formated = result.missing.map(g => g.Craft.Name).join(", ");
	                CurryRouteIM(StdMissingMsgN.msg, { missing_formated });
	                ParseMessage(StdMissingAction, { player });
	                return TimedWorkState.interrupted;
	            }
	            CurryRouteIM(`Received the command, planning the path and executing it`);
	            ParseMessage({ mode: "chat-action", msg: "Received the command, planning the path and executing it" }, { player });
	        }),
	        new CheckWork((pl) => {
	            if (pl.Appearance.some(e => {
	                const oi = OutfitItemsMap.get(e.Asset.Group.Name);
	                if (oi && DefaultCheckOutfitItem(e, oi))
	                    return false;
	                if (Array.isArray(e.Property?.Effect))
	                    return e.Property.Effect.some(f => ["Tethered", "Mounted", "Freeze"].includes(f));
	                return false;
	            }))
	                return CheckWork.Rejected;
	            return CheckWork.Accepted;
	        }, (pl, result) => {
	            if (!result.passed) {
	                CurryRouteIM(`Action path planning failed, there are obstacles`);
	                ParseMessage(StdMissingAction, { player });
	            }
	        }),
	        new CheckItemsWork(["ItemNeckAccessories"], (pl, result) => {
	            if (result.missing.length === 1 || cmd_src.room === undefined) {
	                data.work = "leave-only";
	            }
	            else {
	                data.work = "leave-join";
	                CurryRouteIM(`Heading to`);
	            }
	        }),
	        new MessageWork({ mode: "action", msg: "{player_wg}'s walking posture controller lights up, controlling {player_wg} to slowly walk out of the door." }),
	        new ChatRoomWork(cmd_src.room, (pl, reason) => {
	            CurryRouteIM(`Left the previous room, but cannot enter the room where {sender_num} is located, the room is full or locked`, { sender_num: cmd_src.sender });
	        }, (pl, dest) => {
	            if (dest === undefined) {
	                CurryRouteIM(`The command does not contain room information, so the room entry operation cannot be performed.。`, { sender_num: cmd_src.sender });
	            }
	            else {
	                if (data.work === "leave-only") {
	                    CurryRouteIM(`The identity beacon is lost, the pass is abnormal, and the previous room has been left, but the room where {sender_num} is located cannot be entered`, { sender_num: cmd_src.sender });
	                }
	            }
	        }),
	        new CommonWork((pl) => {
	            const sender_num = ExtractMemberNumber(cmd_src.sender);
	            const target = ChatRoomCharacter.find(c => c.MemberNumber === sender_num);
	            const target_name = (() => {
	                if (target)
	                    return CharacterNickname(target);
	                else {
	                    const friend = pl.FriendNames?.get(sender_num);
	                    if (friend === undefined)
	                        return sender_num.toString();
	                    return friend;
	                }
	            })();
	            ParseMessage({ mode: "action", msg: "{player_wg}'s walking posture controller controlls {player_wg} to enter the room, walk to {target_name}, and obediently rub {target_name} with her body." }, { player }, { target_name });
	        }),
	    ];
	    TimedWorker.global.push({ description: "Room Come Here Sequence", works: work_sequence });
	}

	const RoomCmds = [
	    {
	        match: /^((离开这个房间)|(Leave this room))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            RoomLeaveSequence(player, { sender: sender, type: args.type });
	        }
	    },
	    {
	        match: /^((强行离开这个房间)|(Force-leave this room))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            RoomForceLeaveSequence(player, { sender: sender, type: args.type });
	        }
	    },
	    {
	        type: "Beep",
	        match: /^((到我这里来)|(Come to me))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            RoomComeHereSequence(player, {
	                sender: sender,
	                type: args.type,
	                room: args.BeepRoom
	            });
	        }
	    }
	];

	function StartPunish(player) {
	    const time = DataManager.points.punish_time;
	    const lock_down = [
	        { target: "ItemEars", option: { typed: 3 } },
	        { target: 'ItemEyes', option: { typed: 3 } },
	        { target: 'ItemArms', option: { typed: 3 } },
	        { target: 'ItemHands', option: { typed: 0 } },
	        { target: 'ItemFeet', option: { typed: 1 } },
	        { target: 'ItemLegs', option: { typed: 1 } }
	    ];
	    const stash = new Map(lock_down.map(i => [i.target, null]));
	    const works = [
	        new MessageWork({ mode: "chat-action", msg: "Received the instruction, the penalty mode has been turned on" }),
	        new MessageWork({ mode: "action", msg: "It seemed that {player_wg} has done something wrong, which led to her current situation. All the restraints on her body are tightly binding her flesh, and the electric shocks make her struggle and twist like a fish, shaking her body and making her struggle to maintain her sanity and balance." }),
	        new CommonWork((player) => {
	            player.Appearance.forEach(item => {
	                if (stash.has(item.Asset.Group.Name) && item.Property?.TypeRecord)
	                    stash.set(item.Asset.Group.Name, { ...item.Property.TypeRecord });
	            });
	            FuturisticBypass.instance.on = true;
	            lock_down.forEach(i => ItemOptionWork.ItemOptionSingleS(player, i));
	            FuturisticBypass.instance.on = false;
	            PunishWork.punish_flag = true;
	        }),
	        new ItemOptionWork(player, lock_down),
	        new MessageWork({ mode: "local-status", msg: `>> Penalty mode is activated, estimated duration ${(time / 60 / 1000).toFixed(2)} minutes` }),
	        new PunishWork(time),
	        new MessageWork({ mode: "local-status", msg: `>> Punishment mode has ended` }),
	        new CommonWork((player) => {
	            PunishWork.punish_flag = false;
	            FuturisticBypass.instance.on = true;
	            player.Appearance.forEach(item => {
	                const record = stash.get(item.Asset.Group.Name);
	                if (record)
	                    ExtendedItemSetOptionByRecord(player, item, record);
	            });
	            FuturisticBypass.instance.on = false;
	            AppearanceUpdate(player);
	        }),
	        new MessageWork({ mode: "chat-action", msg: "{player_wg}'s restraints return to their previous mode, and the stun gun returns to standby mode, leaving only {player_wg}'s stiff muscles and the lingering pain from the electric shocks to tell her what had just happened. Although this was not the most severe form of punishment, I hope she has realized her mistake." })
	    ];
	    TimedWorker.global.push({ description: "punish work", works: works });
	}

	function IncreaseAndMessage(player, points) {
	    DataManager.points.points += points;
	    ParseMessage({ mode: "chat-action", msg: `{player_wg}'s bonus points increased by ${points} points.` }, { player });
	}

	var TaskState;
	(function (TaskState) {
	    TaskState[TaskState["Running"] = 0] = "Running";
	    TaskState[TaskState["Success"] = 1] = "Success";
	    TaskState[TaskState["Failed"] = 2] = "Failed";
	})(TaskState || (TaskState = {}));
	class ITask {
	    onChat(player, sender, msg, type) { }
	    ;
	    onActivity(player, sender, activity) { }
	    ;
	    onOrgasm(player) { }
	    ;
	    onResist(player) { }
	    ;
	}

	class TimedCounterTask extends ITask {
	    constructor(time_limit_rate, expected, bonus) {
	        super();
	        this.time_limit_rate = time_limit_rate;
	        this.expected = expected;
	        this.bonus = bonus;
	        this.time_out = DataManager.points.task_time * time_limit_rate + Date.now();
	        this.cur = 0;
	    }
	    run(player) {
	        if (Date.now() > this.time_out)
	            return TaskState.Failed;
	        if (this.cur >= this.expected)
	            return TaskState.Success;
	        return TaskState.Running;
	    }
	    finalize(player, s) {
	        if (s === TaskState.Success)
	            IncreaseAndMessage(player, this.bonus);
	        else
	            StartPunish(player);
	        DataManager.statistics.task_finished(s === TaskState.Success);
	    }
	}

	class BegOrgasmTask extends TimedCounterTask {
	    summary() {
	        return `Before ${new Date(this.time_out).toLocaleTimeString()} (${this.time_limit_rate}x task base time), beg ${this.expected} people for an orgasm, and if successful, receive ${this.bonus} points as a reward`;
	    }
	    constructor(time_limit, counter, bonus) {
	        super(time_limit, counter, bonus);
	        this.time_limit = time_limit;
	        this.counter = counter;
	        this.bonus = bonus;
	        this.last_interact_num = 0;
	        this.interact_list = new Set();
	    }
	    onActivity(player, sender, activity) {
	        if (activity.SourceCharacter === player.MemberNumber)
	            return;
	        if (activity.TargetCharacter !== player.MemberNumber)
	            return;
	        this.last_interact_num = sender.MemberNumber ?? -1;
	    }
	    onOrgasm(player) {
	        this.interact_list.add(this.last_interact_num);
	        this.cur = this.interact_list.size;
	        DataManager.statistics.add_counter('Orgasmed', 1);
	    }
	}

	class InteractTask extends TimedCounterTask {
	    summary() {
	        const time_report = `Before ${new Date(this.time_out).toLocaleTimeString()} (${this.time_limit_rate}xtask base time)`;
	        const group_report = this._check_groups ? `at ${[...this._check_groups.values()].map(i => AssetGroupGet('Female3DCG', i)?.Description).filter(i => i !== undefined).join(", ")} ` : '';
	        const act_report = this._check_act ? `of ${[...this._check_act.values()].map(i => ActivityDictionaryText(`Activity${i}`)).join(", ")} Interaction` : 'Interaction';
	        return `${time_report}, accept ${this.expected} individual ${group_report}${act_report}, and get ${this.bonus} points reward after success`;
	    }
	    constructor(time_limit_rate, counter, bonus, check_act, check_groups) {
	        super(time_limit_rate, counter, bonus);
	        this.time_limit_rate = time_limit_rate;
	        this.counter = counter;
	        this.bonus = bonus;
	        this._interact_list = new Set();
	        this._check_act = check_act ? new Set(check_act) : undefined;
	        this._check_groups = check_groups ? new Set(check_groups) : undefined;
	    }
	    onActivity(player, sender, activity) {
	        if (activity.SourceCharacter === player.MemberNumber)
	            return;
	        if (activity.TargetCharacter !== player.MemberNumber)
	            return;
	        if (this._check_act && !this._check_act.has(activity.ActivityName))
	            return;
	        if (this._check_groups && !this._check_groups.has(activity.ActivityGroup))
	            return;
	        this._interact_list.add(activity.SourceCharacter + Math.floor(Math.random() * 10000));
	        this.cur = this._interact_list.size;
	        if (this._check_groups?.has('ItemBreast'))
	            DataManager.statistics.add_counter('BreastPlayed', 1);
	        else if (this._check_groups?.has('ItemVulva'))
	            DataManager.statistics.add_counter('VulvaPlayed', 1);
	        else if (this._check_act?.has('Slap'))
	            DataManager.statistics.add_counter('Spanked', 1);
	    }
	}

	class ResistTask extends TimedCounterTask {
	    summary() {
	        return `Before ${new Date(this.time_out).toLocaleTimeString()} (${this.time_limit_rate}x task base time), endure ${this.expected} climaxes, and get ${this.bonus} points of reward if successful`;
	    }
	    constructor(time_limit_rate, counter, bonus) {
	        super(time_limit_rate, counter, bonus);
	        this.time_limit_rate = time_limit_rate;
	        this.counter = counter;
	        this.bonus = bonus;
	    }
	    onResist(player) {
	        this.cur++;
	        DataManager.statistics.add_counter('Resisted', 1);
	    }
	}

	class TaskCtrl {
	    constructor(time_reso, om) {
	        setInterval(() => {
	            if (Player && Player.MemberNumber && IsPlayerWolfGirl(Player)) {
	                if (this._active_task) {
	                    const s = this._active_task.run(Player);
	                    if (s !== TaskState.Running) {
	                        this._active_task.finalize(Player, s);
	                        this._active_task = undefined;
	                    }
	                }
	            }
	            else {
	                this._active_task = undefined;
	            }
	        }, time_reso);
	        om.onOrgasm(p => this.onOrgasm(p));
	        om.onResist(p => this.onResist(p));
	    }
	    push_task(t, reject) {
	        if (this._active_task) {
	            if (reject)
	                reject(this._active_task);
	        }
	        else
	            this._active_task = t;
	    }
	    has_task() {
	        return this._active_task !== undefined;
	    }
	    onChat(player, sender, msg, type) {
	        this._active_task?.onChat(player, sender, msg, type);
	    }
	    onActivity(player, sender, activity) {
	        this._active_task?.onActivity(player, sender, activity);
	    }
	    onOrgasm(player) {
	        this._active_task?.onOrgasm(player);
	    }
	    onResist(player) {
	        this._active_task?.onResist(player);
	    }
	    static get instance() {
	        return TaskCtrl._instance;
	    }
	    static init(time_reso, om) {
	        if (this._instance)
	            return;
	        this._instance = new TaskCtrl(time_reso, om);
	    }
	}
	TaskCtrl._instance = undefined;

	const PushTask = (player, t) => {
	    ParseMessage({ mode: "action", msg: `${GetWolfGirlName(player)} received Tasks：\n${t.summary()}` });
	    TaskCtrl.instance.push_task(t, () => {
	        ParseMessage({ mode: "action", msg: `Failed to accept task: There is a task running.` });
	    });
	};
	const TaskPointsCmds = [
	    {
	        match: /^((忍耐)|(endure ))([1-9]\d{0,2})((次高潮)|( orgasms))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            RunControls(player, "ToysCtrl", "max");
	            RunControls(player, "ArousalCtrl", "off");
	            PushTask(player, new ResistTask(1, parseInt(content[4]), 2));
	        }
	    },
	    {
	        match: /^((向)|(Beg for an orgasm from ))([1-9]\d{0,2})((人乞求高潮)|( people))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            ItemOptionWork.ItemOptionSingleS(player, { target: "ItemPelvis", option: { c: 0 } });
	            RunControls(player, "ArousalCtrl", "off");
	            PushTask(player, new BegOrgasmTask(2, parseInt(content[4]), 2));
	        }
	    },
	    {
	        match: /^(让|(let ))([1-9]\d{0,2})(( people play with your breasts)|(人玩弄你的胸部))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            PushTask(player, new InteractTask(1, parseInt(content[3]), 2, undefined, ['ItemBreast', 'ItemNipplesPiercings', 'ItemNipples']));
	        }
	    },
	    {
	        match: /^(让|(let ))([1-9]\d{0,2})(( people play with your pussy)|(人玩弄你的阴部))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            ItemOptionWork.ItemOptionSingleS(player, { target: "ItemPelvis", option: { c: 0 } });
	            RunControls(player, "ArousalCtrl", "off");
	            PushTask(player, new InteractTask(1, parseInt(content[3]), 2, undefined, ['ItemVulva', 'ItemPelvis', 'ItemVulvaPiercings']));
	        }
	    },
	    {
	        match: /^(向|(Beg for spanking from ))([1-9]\d{0,2})((人乞求鞭打)|( people))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            PushTask(player, new InteractTask(1, parseInt(content[3]), 2, ["Slap", "Spank", "Kick", "SpankItem"], undefined));
	        }
	    },
	    {
	        match: /^((设置惩罚时间为)|(Set the penalty time to ))([1-9]\d{0,2})((分钟)|( minutes))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            const v = parseInt(content[4]);
	            DataManager.points.punish_time = v * 60 * 1000;
	            ParseMessage({ mode: "chat-action", msg: `Received the instruction, the penalty time of {player_wg} is ${DataManager.points.punish_time / 60 / 1000} minutes` }, { player });
	            ParseMessage({ mode: "local", msg: `The cold voice of the mechanical broadcast repeated the consequences of {player_wg}'s mission failure. It seemed to be completely emotionless, but a hint of amusement could be heard.` }, { player });
	        }
	    },
	    {
	        match: /^((设置任务时间为)|(Set the task time to ))([1-9]\d{0,2})((分钟)|( minutes))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            const v = parseInt(content[4]);
	            DataManager.points.task_time = v * 60 * 1000;
	            ParseMessage({ mode: "chat-action", msg: `Received the instruction, the time to finish {player_wg}'s task is ${DataManager.points.task_time / 60 / 1000} minutes` }, { player });
	            ParseMessage({ mode: "action", msg: `The cold voice of the mechanical broadcast repeated {player_wg}'s mission time. Tick, tick, is there still time to be dazed? The precise technology will not miss even a second, right?` }, { player });
	        }
	    },
	    {
	        match: /^((进入|关闭)惩罚模式)|((Enter|Exit) punishment mode)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            if (content[2] === "进入" || content[4].toLowerCase() === "enter")
	                StartPunish(player);
	            else
	                StopPunish();
	        }
	    }, {
	        match: /^(((打开|Turn on )((严厉)|(harsh ))?)|((Turn off )|(关闭)))((高潮惩罚模式)|(Orgasm Punishment mode))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            if (content[1].startsWith("打开") || content[1].toLowerCase().startsWith("Turn on")) {
	                TimedWorker.global.push({
	                    description: "OrgasmPunishMode", works: [
	                        new MessageWork({ mode: "action", msg: "Received the instruction, the orgasm punishment mode has been turned on" }),
	                        new CommonWork(() => DataManager.settings.update("orgasmPunishMode", content[4] ? 2 : 1)),
	                        new MessageWork({ mode: "chat-action", msg: "The display on {player_wg}'s training underwear lights up with a small icon, a pink heart with a small lightning bolt imposed on it. What does it mean? Why not give it a try? Maybe {player_wg} will like the feeling." }),
	                    ]
	                });
	            }
	            else {
	                TimedWorker.global.push({
	                    description: "OrgasmPunishMode", works: [
	                        new MessageWork({ mode: "action", msg: "Received the instruction, the orgasm punishment mode has been turned off" }),
	                        new CommonWork(() => DataManager.settings.update("orgasmPunishMode", 0)),
	                        new MessageWork({ mode: "chat-action", msg: "The small punishment icon on the display of {player_wg}'s training underwear gradually goes out.  {player_wg} can now climax freely... right? Is it that {player_wg} wants to be tightly tied up and usher in waves of pleasure?" }),
	                    ]
	                });
	            }
	        }
	    }, {
	        match: /^((设置高潮惩罚时间为)|(Set the penalty time to ))([1-9]\d{0,2})((分钟)|( Minutes))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            const v = parseInt(content[4]);
	            DataManager.points.orgasm_punish_time = v * 60 * 1000;
	            ParseMessage({ mode: "chat-action", msg: `Received the command, {player_wg}'s orgasm penalty time is ${DataManager.points.orgasm_punish_time / 60 / 1000} minutes` }, { player });
	            ParseMessage({ mode: "action", msg: "The cold voice of the mechanical broadcast repeats the price {player_wg} has to pay after reaching orgasm at will. Perhaps with enough desire and hunger, {player_wg} will choose to indulge her body and sink into desire?" }, { player });
	        }
	    },
	    {
	        match: /^(((扣除)|(奖励))|((Reward )|(Deduct )))([1-9]\d{0,2})((积分)|( Points?))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            const v = parseInt(content[8]);
	            console.log(content);
	            const positive = (content[2] === "奖励" || content[5].toLowerCase() === "reward ");
	            console.log(content[5].toLowerCase() === "reward ");
	            console.log(positive);
	            const oper = positive ? "rewarded" : "deducted";
	            console.log(oper);
	            DataManager.points.points += positive ? v : -v;
	            const points = DataManager.points.points;
	            RouteIM(args.type, player, sender, "{player_wg} is {oper} {v} points, current points: {points}", { oper, v, points });
	        },
	    },
	    {
	        match: /^((查询奖励积分)|(Get reward points))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content, args) {
	            const points = DataManager.points.points;
	            RouteIM(args.type, player, sender, "{player_wg} Current reward points: {points}", { points });
	            if (DataManager.points.points > 20)
	                ParseMessage({ mode: "local", msg: `{player_wg} did a great job, but there is no interest for accumulating points, or maybe you just want a good number? Be careful when you open the query next time, there may be a surprise.` }, { player });
	            else if (DataManager.points.points < 0)
	                ParseMessage({ mode: "local", msg: `Negative points are not what a good wolf girl should have. Keep working hard, but don't trigger the punishment task. Be careful that after multiple punishments, you will be abandoned and recycled into a living toy. However, with {player_wg}'s figure, maybe living furniture is not bad...` }, { player });
	        }
	    }
	];
	const SelfPointCmds = [
	    {
	        match: /^((允许高潮)|(Allow orgasm))/i,
	        prerequisite: SelfPrerequisites,
	        run(player, sender, content) {
	            DataManager.points.use_points(1).then(() => {
	                ArousalCtrlSequence(player, "off");
	            }, (p) => {
	                ParseMessage({ mode: "local", msg: `You do not have enough reward points. Current points: ${p}` });
	            });
	        }
	    },
	    {
	        match: /^((关闭语言限制)|(Turn off language restrictions))/,
	        prerequisite: SelfPrerequisites,
	        run(player, sender, content) {
	            DataManager.points.use_points(1).then(() => {
	                VoiceCtrlSequence(player, "off");
	            }, (p) => {
	                ParseMessage({ mode: "local", msg: `You do not have enough reward points. Current points: ${p}` });
	            });
	        }
	    },
	    {
	        match: /^((关闭手臂限制)|(Turn off arm restraints))/i,
	        prerequisite: SelfPrerequisites,
	        run(player, sender, content) {
	            DataManager.points.use_points(1).then(() => {
	                HandsCtrlSequence(player, "off");
	            }, (p) => {
	                ParseMessage({ mode: "local", msg: `You do not have enough reward points. Current points: ${p}` });
	            });
	        }
	    },
	    {
	        match: /^((关闭行走限制)|(Turn off leg restraints))/i,
	        prerequisite: SelfPrerequisites,
	        run(player, sender, content) {
	            DataManager.points.use_points(1).then(() => {
	                FeetCtrlSequence(player, "off");
	            }, (p) => {
	                ParseMessage({ mode: "local", msg: `You do not have enough reward points. Current points: ${p}` });
	            });
	        }
	    },
	    {
	        match: /^((关闭视觉限制)|(Turn off visual restrictions))/i,
	        prerequisite: SelfPrerequisites,
	        run(player, sender, content) {
	            DataManager.points.use_points(1).then(() => {
	                VisionCtrlSequence(player, "off");
	            }, (p) => {
	                ParseMessage({ mode: "local", msg: `You do not have enough reward points. Current points: ${p}` });
	            });
	        }
	    },
	    {
	        match: /^((关闭听觉限制)|(Turn off auditory restrictions))/i,
	        prerequisite: SelfPrerequisites,
	        run(player, sender, content) {
	            DataManager.points.use_points(1).then(() => {
	                HearingCtrlSequence(player, "off");
	            }, (p) => {
	                ParseMessage({ mode: "local", msg: `You do not have enough reward points. Current points: ${p}` });
	            });
	        }
	    },
	];

	const StatCmds = [
	    {
	        match: /^((查询高潮统计)|(Get orgasm statistics))/i,
	        prerequisite: ModOrSelfPrerequisites,
	        run(player, sender, content) {
	            const { orgasm, resist, ruined } = DataManager.arousal;
	            const arousal_report = GetWolfGirlName(player) + "The climax statistics are as follows: \n" +
	                `  Number of orgasms: ${orgasm}\n` +
	                `  Number of resisted orgasms: ${resist}\n` +
	                `  Number of ruined orgasms: ${ruined}\n` +
	                `  Orgasm Rate: ${((orgasm) / (orgasm + resist + ruined) * 100).toFixed(2)}%`;
	            ParseMessage({ mode: "chat-action", msg: arousal_report });
	        }
	    },
	    {
	        match: /^((查询狼女训练统计)|(Get wolf girl training statistics))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            const { script_run_time, wolfgirl_time, stash_time, last_fix_time, task } = DataManager.instance.data.stat;
	            const { finished, failed, counter } = task;
	            const point = DataManager.instance.data.points.current;
	            const day_hour_minute_second = (time) => {
	                const seconds = Math.floor(time / 1000);
	                const days = Math.floor(seconds / (3600 * 24));
	                const daystring = days > 0 ? `${days}days` : "";
	                const hours = Math.floor((seconds % (3600 * 24)) / 3600);
	                const hourstring = days > 0 || hours > 0 ? `${hours}hours` : "";
	                const minutes = Math.floor((seconds % 3600) / 60);
	                const second = seconds % 60;
	                return `${daystring}${hourstring}${minutes}minutes${second}seconds`;
	            };
	            const local_time = (time) => {
	                return new Date(time).toLocaleString();
	            };
	            const task_report = GetWolfGirlName(player) + "The training statistics are as follows: \n" +
	                `  Total running time of training assistance system: ${day_hour_minute_second(script_run_time)}\n` +
	                `  Training module effective working time: ${day_hour_minute_second(wolfgirl_time)}\n` +
	                `  Number of tasks completed: ${finished}\n` +
	                `  Number of tasks failed: ${failed}\n` +
	                `  Current task points: ${point}\n` +
	                `  Task Count: \n` +
	                `    climax: ${counter.Orgasmed ?? 0}\n` +
	                `    resisted orgasms: ${counter.Resisted ?? 0}\n` +
	                `    Played with breast: ${counter.BreastPlayed ?? 0}\n` +
	                `    Played with vulva: ${counter.VulvaPlayed ?? 0}\n` +
	                `    Spanked: ${counter.Spanked ?? 0}\n` +
	                `  Last suit maintenance check: ${last_fix_time > 0 ? local_time(last_fix_time) : "No records"}\n` +
	                `  Restrained Lightweight Mode Time: ${day_hour_minute_second(stash_time)}`;
	            ParseMessage({ mode: "chat-action", msg: task_report });
	        }
	    }, {
	        match: /^((扫描身体敏感部位)|(Scan sensitive body parts))/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            TimedWorker.global.push({
	                description: "ScanBody", works: [
	                    new MessageWork({ mode: "action", msg: "Command received, scanning body parameters" }),
	                    new MessageWork({ mode: "action", msg: `Several small streams of metallic silver water flow out of {player_wg}'s collar and along {player_wg}'s body to various parts of her body. They briefly cover {player_wg}'s body, just like a silver latex suit covering her entire body. After a burst of itchiness, this strange latex suit turns back into a silver stream of water and returns to the collar along the same path.` }),
	                    new DelayWork(5000),
	                    new CommonWork((player) => {
	                        if (player.ArousalSettings === undefined || player.ArousalSettings.Active === "Inactive") {
	                            ParseMessage({ mode: "action", msg: "The scan data analysis is complete. {player_wg}'s sexual arousal center is in a shut-down state and no physical data has been collected." }, { player });
	                            return TimedWorkState.interrupted;
	                        }
	                        const ZoneData = AssetGroup.filter(g => g.IsItem()).map(g => g.Name).map(g => PreferenceGetArousalZone(player, g)).filter(z => !!z);
	                        const value3Zones = ZoneData.filter(z => z.Factor === 3).map(z => AssetGroupGet(player.AssetFamily, z.Name)?.Description).filter(z => !!z).join(", ");
	                        const value4Zones = ZoneData.filter(z => z.Factor === 4).map(z => AssetGroupGet(player.AssetFamily, z.Name)?.Description).filter(z => !!z).join(", ");
	                        const orgasmZones = ZoneData.filter(z => z.Orgasm).map(z => AssetGroupGet(player.AssetFamily, z.Name)?.Description).filter(z => !!z).join(", ");
	                        ParseMessage({ mode: "action", msg: `The scan data has been analyzed. The more sensitive parts of {player_wg}'s body are ${value3Zones}, and the most sensitive parts of {player_wg}'s body are ${value4Zones}. Among them, the part that can make {player_wg} climax is ${orgasmZones}. The scan data summary is complete.` }, { player }, { value3Zones, value4Zones, orgasmZones });
	                    })
	                ]
	            });
	        }
	    }
	];

	class IInjection {
	    constructor() {
	        this.isWorking = () => false;
	    }
	    onInject() { }
	    ;
	    hook(mod, lateHook) { }
	    ;
	    update(player) { }
	    ;
	}

	class Anesthetic extends IInjection {
	    constructor() {
	        super(...arguments);
	        this.cumulate = "refresh";
	        this.name = "anesthetic";
	        this.duration = 15 * 60 * 1000;
	        this.disperse = undefined;
	    }
	    onInject() {
	        if (Player?.ArousalSettings?.Progress !== undefined) {
	            Player.ArousalSettings.Progress = 0;
	            CharacterSetFacialExpression(Player, "Eyes", "Closed");
	        }
	        if (CurrentCharacter) {
	            if (CurrentCharacter.FocusGroup) {
	                CurrentCharacter.FocusGroup = null;
	            }
	            CurrentCharacter = null;
	        }
	    }
	    update(player) {
	        const input = ElementValue("InputChat");
	        const rnd = Math.random();
	        if (rnd < 0.1) {
	            ElementValue("InputChat", input.substring(1));
	        }
	        else if (rnd < 0.6) {
	            ElementValue("InputChat", input.replace(/^([z\.]*)./, "$1z"));
	        }
	        else {
	            ElementValue("InputChat", input.replace(/^([z\.]*)./, "$1."));
	        }
	    }
	    hook(mod, lateHook) {
	        lateHook(() => {
	            mod.hookFunction('Player.CanWalk', 1, (args, next) => {
	                if (this.isWorking())
	                    return false;
	                return next(args);
	            });
	            mod.hookFunction('Player.GetBlurLevel', 1, (args, next) => {
	                const result = next(args);
	                if (this.isWorking())
	                    return result + 3;
	                return result;
	            });
	        });
	        mod.hookFunction('ChatRoomFocusCharacter', 1, (args, next) => {
	            if (this.isWorking())
	                return;
	            return next(args);
	        });
	        mod.hookFunction('SpeechGetGagLevel', 1, (args, next) => {
	            const result = next(args);
	            if (args[0].IsPlayer() && this.isWorking())
	                return result + 2;
	            return result;
	        });
	    }
	}

	class Pickmeup extends IInjection {
	    constructor() {
	        super(...arguments);
	        this.name = "pickmeup";
	        this.duration = 0;
	        this.cumulate = "none";
	        this.disperse = {
	            mode: "all_cancel",
	            target: ['anesthetic'],
	        };
	    }
	}

	class Aphrodisiac extends IInjection {
	    constructor() {
	        super(...arguments);
	        this.disperse = {
	            target: ['inhibitor'],
	            mode: "timely_cancel"
	        };
	        this.cumulate = "add";
	        this.name = "aphrodisiac";
	        this.duration = 15 * 60 * 1000;
	        this.savedArousal = -1;
	    }
	    onInject() {
	        if (Player) {
	            CharacterSetFacialExpression(Player, "Eyes", "HeartPink");
	        }
	    }
	    update(player) {
	        if (player?.ArousalSettings?.Progress === undefined)
	            return;
	        if (this.isWorking() && this.savedArousal !== -1) {
	            const diff = player.ArousalSettings.Progress - this.savedArousal;
	            if (diff > 0)
	                player.ArousalSettings.Progress += diff;
	        }
	        this.savedArousal = player.ArousalSettings.Progress;
	    }
	    hook(mod) {
	        mod.hookFunction('ChatRoomDrawArousalScreenFilter', 1, (args, next) => {
	            if (!args[3] || args[3] < 60)
	                args[3] = 60;
	            return next(args);
	        });
	    }
	}

	class Inhibitor extends IInjection {
	    constructor() {
	        super(...arguments);
	        this.cumulate = 'add';
	        this.name = "inhibitor";
	        this.duration = 15 * 60 * 1000;
	        this.disperse = {
	            mode: "timely_cancel",
	            target: ['aphrodisiac']
	        };
	        this.savedArousal = -1;
	    }
	    onInject() {
	        if (Player?.ArousalSettings?.Progress)
	            Player.ArousalSettings.Progress = 0;
	    }
	    update(player) {
	        if (player?.ArousalSettings?.Progress === undefined)
	            return;
	        if (this.isWorking() && this.savedArousal !== -1) {
	            const diff = player.ArousalSettings.Progress - this.savedArousal;
	            if (diff > 0)
	                player.ArousalSettings.Progress -= diff * 0.5;
	        }
	        this.savedArousal = player.ArousalSettings.Progress;
	    }
	}

	const injections = [Anesthetic, Pickmeup, Aphrodisiac, Inhibitor];
	class InjectionManager {
	    constructor(mod, lateHook) {
	        this.working = new Map();
	        this.injections = new Map(injections.map(i => new i).map(injection => [injection.name, injection]));
	        this.injections.forEach(injection => injection.hook(mod, lateHook));
	        this.injections.forEach((i, name) => i.isWorking = () => this.working.has(name));
	        setInterval(() => {
	            const now = Date.now();
	            this.working.forEach((time, name) => {
	                if (time < now)
	                    this.working.delete(name);
	                else if (Player?.MemberNumber)
	                    this.injections.get(name)?.update(Player);
	            });
	        }, 100);
	    }
	    doInject(name) {
	        const injection = this.injections.get(name);
	        if (!injection)
	            return;
	        const now = Date.now();
	        let duration = injection.duration;
	        if (injection.disperse) {
	            const disperse = injection.disperse;
	            if (disperse.mode === "all_cancel") {
	                disperse.target.forEach(target => this.working.delete(target));
	            }
	            else if (disperse.mode === "timely_cancel") {
	                disperse.target.forEach(target => {
	                    const working = this.working.get(target);
	                    if (working !== undefined) {
	                        const remain = working - duration;
	                        if (remain > now)
	                            this.working.set(target, remain);
	                        else {
	                            this.working.delete(target);
	                            duration -= (working - now);
	                        }
	                    }
	                });
	            }
	        }
	        injection.onInject();
	        if (injection.cumulate === "refresh") {
	            this.working.set(name, Date.now() + duration);
	        }
	        else if (injection.cumulate === "add" && this.working.has(name)) {
	            this.working.set(name, this.working.get(name) + duration);
	        }
	    }
	    static get instance() {
	        return InjectionManager._instance;
	    }
	    static init(mod, lateHook) {
	        if (InjectionManager._instance)
	            return;
	        InjectionManager._instance = new InjectionManager(mod, lateHook);
	    }
	}
	InjectionManager._instance = undefined;

	function InstantInjection(type, msg) {
	    const work_sequence = [
	        new CommonWork((player) => ParseMessage(msg.finish, { player })),
	        new CommonWork((player) => ParseMessage(msg.f_action, { player })),
	        new CommonWork(() => InjectionManager.instance.doInject(type))
	    ];
	    TimedWorker.global.push_front({ description: `InstantInjection${type}`, works: work_sequence });
	}
	function StdInjectionSequence(type, msg) {
	    let data = {
	        msg: StdMissingAction
	    };
	    const work_sequence = [
	        new CheckItemsWork(["ItemTorso2"], (player, result) => {
	            if (result.missing.length > 0) {
	                const missing_formated = result.missing.map(g => g.Craft.Name).join(", ");
	                ParseMessage(StdMissingMsgN, { player }, { missing_formated });
	                return TimedWorkState.interrupted;
	            }
	            else {
	                data.msg = { mode: "chat-action", msg: `Received the order, the medicine is being prepared` };
	            }
	        }),
	        new CommonWork((player) => ParseMessage(data.msg, { player })),
	        new DelayWork(1000),
	        new CommonWork((player) => {
	            InjectionManager.instance.doInject(type);
	        }),
	        new CommonWork((player) => ParseMessage(msg.finish, { player })),
	        new CommonWork((player) => ParseMessage(msg.f_action, { player }))
	    ];
	    TimedWorker.global.push({ description: `InjectionSequence${type}`, works: work_sequence });
	}
	const messages = {
	    'aphrodisiac': {
	        finish: { mode: "chat-action", msg: "Aphrodisiac injection completed" },
	        f_action: { mode: "action", msg: "Oh, it's an aphrodisiac. Although it won't lead to an orgasm directly, subsequent arousal will be more impactful. I hope {player_wg} won't let the pleasure spoil her brain." }
	    },
	    'inhibitor': {
	        finish: { mode: "chat-action", msg: "Inhibitor injection completed" },
	        f_action: { mode: "action", msg: "{player_wg}'s harness injected her with an inhibitor that can temporarily suppress the pain, but the side effect is that it suppresses the brain's perception of pleasure. If this is injected when she is in estrus... don't treat your body too much because of desire, okay?" }
	    },
	    'anesthetic': {
	        finish: { mode: "chat-action", msg: "Anesthetic injection completed" },
	        f_action: { mode: "action", msg: "{player_wg}, who has lost her ability to resist, seems to be able to be played with at will. Maybe in a few minutes we need to call the EIL recycling team to pick her up." }
	    },
	    'pickmeup': {
	        finish: { mode: "chat-action", msg: "Recovery injection completed" },
	        f_action: { mode: "action", msg: "With the injection of the recovery agent, {player_wg}'s body gradually regains strength and she gradually regained control of her limbs." }
	    },
	    "EasterUniversalDispersal": {
	        finish: { mode: "chat-action", msg: "The injection of general dispersant is completed" },
	        f_action: { mode: "action", msg: "Complex magic circuits, inherited ancient bloodlines, tedious preparations for casting spells, how can a great magician who takes decades to become a master avoid being caught up by technology? The low threshold for using technology has never been comparable to those magicians who require so-called bloodlines and origins." }
	    }
	};
	function DoInjection(type, instant) {
	    if (instant) {
	        InstantInjection(type, messages[type]);
	    }
	    else {
	        StdInjectionSequence(type, messages[type]);
	    }
	}

	const strings = {
	    "Label-ChatOther-ItemNeck-WolfGirlItemsSwitch": "Toggle-Wolf-Girl-Item-Mode",
	    "Label-ChatSelf-ItemNeck-WolfGirlItemsSwitch": "Toggle-Wolf-Girl-Item-Mode",
	    "Label-ChatOther-ItemPelvis-WolfGirlItemsSwitch": "Toggle-Wolf-Girl-Item-Mode",
	    "Label-ChatSelf-ItemPelvis-WolfGirlItemsSwitch": "Toggle-Wolf-Girl-Item-Mode",
	    "ChatOther-ItemNeck-WolfGirlItemsSwitch": "SourceCharacter gently touches TargetCharacter's collar, and a faint light turns on.",
	    "ChatSelf-ItemNeck-WolfGirlItemsSwitch": "SourceCharacter gently touches her collar, and a faint light flickers on.",
	    "ChatOther-ItemPelvis-WolfGirlItemsSwitch": "SourceCharacter gently touches TargetCharacter's training underwear, and a faint light turns on.",
	    "ChatSelf-ItemPelvis-WolfGirlItemsSwitch": "SourceCharacter lightly touches her training underwear, and a faint light flickers on.",
	};
	const bodyParts = ["ItemNeck", "ItemPelvis"];
	class WolfGirlItemsSwitch extends IActivityCustom {
	    constructor() {
	        super("onself", bodyParts, {
	            Name: "WolfGirlItemsSwitch",
	            MaxProgress: 0,
	            Prerequisite: ["UseHands", "CanSwitchWGItem"],
	            Target: bodyParts,
	            TargetSelf: bodyParts
	        }, "Assets/Female3DCG/ItemNeck/Preview/FuturisticCollar.png");
	    }
	    on(player, sender, info) {
	        if (info.TargetCharacter === player.MemberNumber) {
	            if (ModOrSelfPrerequisites(player, sender)) {
	                if (DataManager.outfit.items.size > 0) {
	                    StartStashPopSequence();
	                }
	                else {
	                    StartStashSequence();
	                }
	            }
	        }
	    }
	    adjustDict(content, dict) {
	        dict.push({
	            Tag: `MISSING ACTIVITY DESCRIPTION FOR KEYWORD ${content}`,
	            Text: this.text(content)
	        });
	        return dict;
	    }
	    text(keyword) {
	        return strings[keyword] ?? keyword;
	    }
	}
	class CanSwitchWGItem extends IActivityPrerequisite {
	    constructor() {
	        super(...arguments);
	        this.name = "CanSwitchWGItem";
	    }
	    test(acting, acted, group) {
	        if (!CheckOutfitItemCE(acted, OutfitItemsMap.get(group.Name), { lock: true }))
	            return false;
	        if (acted.IsPlayer()) {
	            return DataManager.points.points > 10;
	        }
	        return true;
	    }
	}

	function isInjectDictEntry(entry) {
	    return entry.Tag === 'WolfGirlInjectType';
	}
	class InjectingExtend extends IActivityExtended {
	    constructor() {
	        super("selfonother", undefined, "Inject");
	        this.type = undefined;
	    }
	    on(player, sender, info) {
	        const target = ChatRoomCharacter.find(c => c.MemberNumber === info.TargetCharacter);
	        if (!target)
	            return;
	        if (!DefaultCheckItems(player, [ToolsVisor, ToolsInjector], false))
	            return;
	        if (this.type === undefined)
	            InitDressSequence(player, target);
	    }
	    adjustDict(Content, dict) {
	        if (this.type) {
	            dict.push({
	                Tag: "WolfGirlInjectType",
	                Text: this.type
	            });
	        }
	        return dict;
	    }
	}
	class InjectedExtend extends IActivityExtended {
	    constructor() { super("onself", undefined, "Inject"); }
	    on(player, sender, info) {
	        const v = info.BCDictionary.find(i => isInjectDictEntry(i));
	        if (v && IsPlayerWolfGirl(player)) {
	            DoInjection(v.Text, true);
	        }
	    }
	}

	class DrinkExtend extends IActivityExtended {
	    constructor() {
	        super("onself", ["ItemMouth"], "SipItem");
	        this.RedbullDrinkTimeout = 0;
	    }
	    on(player, sender, info) {
	        if (info.Asset && info.ActivityGroup.startsWith("ItemMouth")) {
	            const tItem = sender.Appearance.find(a => a.Asset.Group.Name === info.Asset.GroupName);
	            if (!tItem)
	                return;
	            const target = Tools.find(i => i.Asset.Group === info.Asset.GroupName
	                && i.Asset.Name === info.Asset.AssetName && i.Craft.Name === info.Asset.CraftName);
	            if (!target)
	                return;
	            if (!DefaultCheckOutfitItem(tItem, target))
	                return;
	            if (target.Craft.Name === "情欲之水" || target.Craft.Name === "Water of Desire") {
	                if (IsPlayerWolfGirl(player))
	                    this.DrinkAphrodisiac(player);
	            }
	            else if (target.Craft.Name === "特种红牛" || target.Craft.Name === "Special Redbull") {
	                this.DrinkRedbull(player);
	            }
	        }
	    }
	    DrinkAphrodisiac(player) {
	        ParseMessage({ mode: "local", msg: "What you just drank makes you feel very aroused" });
	        if (player?.ArousalSettings?.Progress !== undefined) {
	            player.ArousalSettings.Progress = 100;
	            ActivityOrgasmPrepare(player, false);
	        }
	    }
	    DrinkRedbull(player) {
	        ParseMessage({ mode: "local", msg: "You drink a can of Red Bull and feel full of energy, as if you can break free from all constraints" });
	        this.RedbullDrinkTimeout = Date.now() + 15 * 60 * 1000;
	    }
	    init(mod) {
	        mod.hookFunction("DialogStruggleStart", 1, (args, next) => {
	            const [C, Action, PrevItem, NextItem] = args;
	            if (C.MemberNumber === Player?.MemberNumber && this.RedbullDrinkTimeout > Date.now() && Action === "ActionStruggle") {
	                PrevItem.Difficulty = -50;
	                this.RedbullDrinkTimeout = 0;
	            }
	            return next(args);
	        });
	    }
	}

	class ActivityProvider {
	    constructor(mod) {
	        this.injector = new InjectingExtend;
	        this.facility = new ActivityFacility(mod);
	        this.facility.addPrerequisite(new CanSwitchWGItem);
	        this.facility.addActivity(new WolfGirlItemsSwitch);
	        this.facility.addActivityExtension(this.injector);
	        this.facility.addActivityExtension(new InjectedExtend);
	        this.facility.addActivityExtension(new DrinkExtend);
	    }
	    static init(mod) {
	        this._instance = new ActivityProvider(mod);
	    }
	    static run(player, sender, info) {
	        this._instance?.facility.run(player, sender, info);
	    }
	    static get instance() {
	        return this._instance;
	    }
	}

	const switchInjectorMessages = {
	    "anesthetic": { mode: "chat-action", msg: "Shh... maybe it's time to kidnap someone. Who will be the lucky one?" },
	    "pickmeup": { mode: "chat-action", msg: "It's really boring to play with a dead fish with no reaction or movement, isn't it? The prey's escape and struggle are also part of the fun of hunting, right?" },
	    "aphrodisiac": { mode: "chat-action", msg: "Is it to discipline or to play around? Whether it is for others or for yourself, something very interesting is about to happen, isn't it?" },
	    "inhibitor": { mode: "chat-action", msg: "If injected into a person in heat, this would undoubtedly be the most severe punishment. Compared to being unable to orgasm, a drug that would make it impossible for a person to even feel much pleasure is truly a demon." },
	    "chips": { mode: "chat-action", msg: "It looks like trainer {player_id} is about to capture a new wolf girl, but please don't capture her and send her into the wolf girl assembly line at will, okay?" },
	};
	function SwitchInjector(mode, type) {
	    const work_sequence = [
	        new CheckItemsWork([ToolsInjector], (player, result) => {
	            if (result.missing.length > 0) {
	                ParseMessage(StdMissingMsgBase, { player }, { missing_formated: ToolsInjector.Craft.Name });
	                return TimedWorkState.interrupted;
	            }
	            ActivityProvider.instance.injector.type = type;
	        }, false),
	        new MessageWork({ mode: "chat-action", msg: `The syringe has switched to ${mode} mode` }),
	        new MessageWork({ mode: "chat-action", msg: switchInjectorMessages[type || "chips"].msg }),
	    ];
	    TimedWorker.global.push({ description: `SwitchInjector${mode}`, works: work_sequence });
	}
	function UniversalDispersalSwitchInjection() {
	    const work_sequence = [
	        new CheckItemsWork([ToolsInjector], (player, result) => {
	            if (result.missing.length > 0) {
	                ParseMessage(StdMissingMsgBase, { player }, { missing_formated: ToolsInjector.Craft.Name });
	                return TimedWorkState.interrupted;
	            }
	        }),
	        new MessageWork({ mode: "chat-action", msg: "Mode switching completed, current mode: general repellent injection" }),
	        new MessageWork({ mode: "action", msg: "With this external power that has never been offered to the Shadow King who rules the world, he turned it into a supreme treasure." }),
	        new DelayWork(2500),
	        new MessageWork({ mode: "action", msg: "Pray for a good harvest and sing the sacred praises" }),
	        new DelayWork(2500),
	        new MessageWork({ mode: "action", msg: "The Holy Spirit bestowed upon him a noble gift, which made his name go down in history." }),
	        new DelayWork(2500),
	        new MessageWork({ mode: "action", msg: "We will use our powerful magic power to corrode the spreading filth into mud." }),
	        new DelayWork(2500),
	        new MessageWork({ mode: "action", msg: "We will curb the rampant madness with our firm belief" }),
	        new DelayWork(2500),
	        new MessageWork({ mode: "action", msg: "Achieve a thorough intervention of thoughts on matter" }),
	        new DelayWork(2500),
	        new MessageWork({ mode: "chat-action", msg: "The currently loaded firmware has been detected to be abnormal, and the default firmware is being reloaded." }),
	        new DelayWork(5000),
	        new MessageWork({ mode: "chat-action", msg: "Firmware recovery complete" }),
	        new MessageWork({ mode: "chat-action", msg: "Mode switching completed, current mode: general repellent injection" }),
	        new MessageWork({ mode: "action", msg: "Complex magic circuits, inherited ancient bloodlines, tedious preparations for casting spells, how can a great magician who takes decades to become a master avoid being caught up by technology? The low threshold for using technology has never been comparable to those magicians who require so-called bloodlines and origins." })
	    ];
	    TimedWorker.global.push({ description: `UniversalDispersalInjectionSwitchSequence`, works: work_sequence });
	}

	const InjectionCmds = [
	    {
	        match: /^(注射麻醉剂)|(anesthetic)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            DoInjection('anesthetic');
	        }
	    },
	    {
	        match: /^(注射恢复剂)|(recovery agent)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            DoInjection('pickmeup');
	        }
	    },
	    {
	        match: /^(注射催情剂)|(aphrodisiac)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            DoInjection('aphrodisiac');
	        }
	    },
	    {
	        match: /^(注射抑制剂)|(inhibitor)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            DoInjection('inhibitor');
	        }
	    },
	    {
	        match: /^(泛用驱散剂)|(general repellent)/i,
	        prerequisite: BasicPrerequisites,
	        run(player, sender, content) {
	            DoInjection('EasterUniversalDispersal');
	        }
	    }
	];
	const InjectionSwitchCmds = [
	    {
	        match: /^(身份芯片)|(ID chip)/i,
	        prerequisite: IsSelf,
	        run(player, sender, content) {
	            SwitchInjector('ID chip', undefined);
	        }
	    },
	    {
	        match: /^(催情剂)|(aphrodisiac)/i,
	        prerequisite: IsSelf,
	        run(player, sender, content) {
	            SwitchInjector('aphrodisiac', 'aphrodisiac');
	        }
	    },
	    {
	        match: /^(抑制剂)|(inhibitor)/i,
	        prerequisite: IsSelf,
	        run(player, sender, content) {
	            SwitchInjector('inhibitor', 'inhibitor');
	        }
	    },
	    {
	        match: /^(麻醉剂)|(anesthetic)/i,
	        prerequisite: IsSelf,
	        run(player, sender, content) {
	            SwitchInjector('anesthetic', 'anesthetic');
	        }
	    },
	    {
	        match: /^(恢复剂)|(pickmeup)/i,
	        prerequisite: IsSelf,
	        run(player, sender, content) {
	            SwitchInjector('pickmeup', 'pickmeup');
	        }
	    }, {
	        match: /^(泛用驱散剂)|(EasterUniversalDispersal)/i,
	        prerequisite: IsSelf,
	        run(player, sender, content) {
	            UniversalDispersalSwitchInjection();
	        }
	    }
	];

	const Commands = [ItemCmds, RoomCmds, PermCmds, OutfitCmds, StatCmds, TaskPointsCmds, InjectionCmds].flat();
	const PointCommands = [SelfPointCmds].flat();
	const InjectionSwCommands = [InjectionSwitchCmds].flat();

	function Strip(src) {
	    return src.replace(/^[\s\p{P}]*/u, "");
	}
	function RunCommands(player, sender, content, args) {
	    content = Strip(content).toLowerCase();
	    const usepoints = "use reward points";
	    const switchInjector = "injection gun mode switch";
	    const testRegex = GetCommandPrefix(player);
	    let cmdSeries = undefined;
	    const match = testRegex.exec(content);
	    if (match) {
	        content = content.slice(match[0].length);
	        content = Strip(content);
	        cmdSeries = Commands;
	    }
	    else if (content.startsWith(usepoints)) {
	        content = content.slice(usepoints.length);
	        content = Strip(content);
	        cmdSeries = PointCommands;
	    }
	    else if (content.startsWith(switchInjector)) {
	        content = content.slice(switchInjector.length);
	        content = Strip(content);
	        cmdSeries = InjectionSwCommands;
	    }
	    if (!cmdSeries)
	        return;
	    for (const cmd of cmdSeries) {
	        if (cmd.type && cmd.type !== args.type)
	            continue;
	        if (!cmd.prerequisite(player, sender))
	            continue;
	        const result = cmd.match.exec(content);
	        if (result) {
	            cmd.run(player, sender, result, args);
	            AppearanceUpdate(player);
	            return;
	        }
	    }
	}

	function BeepRawHandler(player, data) {
	    if (!data.MemberName || !data.MemberNumber || typeof data.Message !== 'string')
	        return;
	    if (player.GhostList && player.GhostList.indexOf(data.MemberNumber) >= 0)
	        return;
	    const room = (() => {
	        if (data.ChatRoomName !== undefined && data.ChatRoomSpace !== undefined)
	            return { name: data.ChatRoomName, space: data.ChatRoomSpace };
	        return undefined;
	    })();
	    RunCommands(player, data.MemberNumber, data.Message, { type: "Beep", BeepRoom: room });
	}
	function ChatRoomChat(player, sender, msg, type) {
	    if (type === "Chat" || type === "Whisper")
	        RunCommands(player, sender, msg, { type });
	}
	function ChatRoomActivity(player, sender, data) {
	    ActivityProvider.run(player, sender, data);
	    TaskCtrl.instance.onActivity(player, sender, data);
	}
	function BeepHandler(mod) {
	    mod.hookFunction('ServerAccountBeep', 2, (args, next) => {
	        next(args);
	        if (Player)
	            BeepRawHandler(Player, args[0]);
	    });
	}
	function ChatHandler(handler) {
	    handler.onReceiveActivity(ChatRoomActivity);
	    handler.onReceiveChatWhisperEmote(ChatRoomChat);
	}

	const CmdDetails = new Map([["check", ChatCmdOutfitCheck]]);
	const WolfGirlCmds = [
	    {
	        Tag: "wolfgirl",
	        Description: `<${[...CmdDetails.keys()].join("|")}> <Parameters> : WolfGirl Mod Commands`,
	        Action: ChatCmdRouter
	    }
	];
	function ChatCmdRouter(args, command) {
	    const [, ...parts] = command.split(" ");
	    const cmd = parts?.shift();
	    if (!cmd || !CmdDetails.has(cmd)) {
	        ChatRoomAction.instance.LocalInfo(`Command error, you can use the command: wolfgirl<${[...CmdDetails.keys()].join("|")}> <parameter>`);
	        return;
	    }
	    CmdDetails.get(cmd)?.(...parts);
	}
	function ChatCmdOutfitCheck(...args) {
	    const targetN = parseInt(args[0]);
	    if (isNaN(targetN)) {
	        ChatRoomAction.instance.LocalInfo("Command error: Usage: wolfgirl check <target ID>");
	        return;
	    }
	    const target = ChatRoomCharacter.find(c => c.MemberNumber === targetN);
	    if (!target) {
	        ChatRoomAction.instance.LocalInfo("Command error: Target not found");
	        return;
	    }
	    const app_map = GatherAppMap(target);
	    EILNetwork.Access.craft;
	    ChatRoomAction.instance.LocalInfo(`>> ${ModName} ${ModVersion} Debug Mode\n`);
	    OutfitItems.forEach((i, idx) => {
	        const target_item = app_map.get(i.Asset.Group);
	        const msglist = [];
	        msglist.push(`>> Check work sequence${idx + 1}`);
	        msglist.push(`  item: ${i.Asset.Name}`);
	        msglist.push(`  position: ${i.Asset.Group}`);
	        msglist.push(`  configuration：${i.Craft.Name}`);
	        if (!target_item) {
	            msglist.push(`  wearing: undefined`);
	            msglist.push(`  concluding: failed`);
	        }
	        else {
	            msglist.push(`  wearing: ${target_item.Asset.Name}`);
	            msglist.push(`  color: ${target_item.Color}`);
	            const check = DefaultCheckItemOnTarget(target, i);
	            const checkRaw = DefaultCheckOutfitItem(target_item, i);
	            if (!check) {
	                msglist.push(`  CheckItemOnTarget: ${check}`);
	            }
	            else {
	                msglist.push(`  CheckItemOnTarget: ${check}`);
	                msglist.push(`  CheckOutfitItem: ${checkRaw}`);
	                msglist.push(`  LockedBy: ${target_item.Property?.LockedBy}`);
	                msglist.push(`  TypeRecord: ${JSON.stringify(target_item.Property?.TypeRecord)}`);
	            }
	            msglist.push(`  concluding: ${check && checkRaw ? "passed" : "failed"}`);
	        }
	        ChatRoomAction.instance.LocalInfo(msglist.join("\n") + "\n");
	    });
	}
	function InitChatCmds(lateHook) {
	    lateHook(() => CommandCombine(WolfGirlCmds));
	}

	function TaskCtrlInit(time_reso, om) {
	    TaskCtrl.init(time_reso, om);
	    const PushTask = (player, t) => {
	        ParseMessage({ mode: "action", msg: `{player_wg} automatically accepts the task due to low reward points:\n${t.summary()}` }, { player });
	        TaskCtrl.instance.push_task(t);
	    };
	    const RandomTaskList = [
	        (point) => new ResistTask(1, 5, point),
	        (point) => new ResistTask(2, 10, point),
	        (point) => new InteractTask(2, 10, point, undefined, ['ItemBreast', 'ItemNipplesPiercings', 'ItemNipples']),
	        (point) => new InteractTask(2, 10, point, undefined, ['ItemVulva', 'ItemPelvis', 'ItemVulvaPiercings']),
	        (point) => new InteractTask(2, 10, point, ["Slap", "Spank", "Kick", "SpankItem"], undefined),
	        (point) => new BegOrgasmTask(2, 5, point)
	    ];
	    let check_timer = Date.now();
	    setInterval(() => {
	        if (Player && Player.MemberNumber && DataManager.instance) {
	            const now = Date.now();
	            const ten_min_after = 10 * 60 * 1000 + check_timer;
	            if (TaskCtrl.instance.has_task() || CurrentScreen !== "ChatRoom")
	                check_timer = now;
	            else if (now > ten_min_after) {
	                check_timer = now;
	                if (DataManager.points.points < -14) {
	                    const bonus = -14 - DataManager.points.points;
	                    const task = RandomTaskList[Math.floor(Math.random() * RandomTaskList.length)](bonus);
	                    PushTask(Player, task);
	                }
	            }
	        }
	    }, time_reso);
	}

	class TimeStat {
	    constructor(resolution) {
	        this.resolution = resolution;
	        this.timer = Date.now();
	        setInterval(() => {
	            if (Player && Player.MemberNumber && DataManager.instance) {
	                const time = Date.now();
	                const isWolfGirl = IsPlayerWolfGirl(Player);
	                const isStashed = DataManager.outfit.items.size > 0;
	                DataManager.statistics.add_time(isWolfGirl, isStashed, time - this.timer);
	                this.timer = time;
	            }
	        }, resolution);
	    }
	    static init(resolution) {
	        if (TimeStat._instance)
	            return;
	        TimeStat._instance = new TimeStat(resolution);
	    }
	    static get instance() {
	        return TimeStat._instance;
	    }
	}
	TimeStat._instance = undefined;

	function InitSafetyUndressSequence(player) {
	    const work_sequence = [
	        new CheckItemsWork([ToolsVisor, ToolsInjector], (player, result) => {
	            if (result.missing.length == 2) {
	                return TimedWorkState.interrupted;
	            }
	            else {
	                ParseMessage({ mode: "local", msg: "It is found that the registered installation props have not been used for a long time, and the automatic storage process begins." });
	            }
	        }, false),
	        new CommonWork((player) => {
	            if (DefaultCheckItemOnTarget(player, ToolsInjector, false)) {
	                player.Appearance = player.Appearance.filter(i => i.Asset.Group.Name !== ToolsInjector.Asset.Group);
	                AppearanceUpdate(player, ToolsInjector.Asset.Group);
	                ParseMessage({ mode: "local", msg: `${ToolsInjector.Craft.Name}Completed storage` });
	            }
	        }),
	        new CommonWork((player) => {
	            if (DefaultCheckItemOnTarget(player, ToolsVisor, false)) {
	                player.Appearance = player.Appearance.filter(i => i.Asset.Group.Name !== ToolsVisor.Asset.Group);
	                AppearanceUpdate(player, ToolsVisor.Asset.Group);
	                ParseMessage({ mode: "local", msg: `${ToolsVisor.Craft.Name}Completed storage` });
	            }
	        }),
	        new MessageWork({ mode: "local", msg: "The system reminds you: Do not play with tools in your hands, as this is dangerous." }),
	    ];
	    TimedWorker.global.push({ description: "InitSafetyUndressSequence", works: work_sequence });
	}
	class ToolsSafety {
	    constructor(resolution) {
	        this.resolution = resolution;
	        this.holdStart = 0;
	        setInterval(() => {
	            if (Player && Player.MemberNumber) {
	                if (TimedWorker.global.cur_description !== undefined) {
	                    this.holdStart = 0;
	                }
	                else if (DefaultCheckItemOnTarget(Player, ToolsVisor, false) && DefaultCheckItemOnTarget(Player, ToolsInjector)) {
	                    if (this.holdStart === 0)
	                        this.holdStart = Date.now();
	                    else if (Date.now() - this.holdStart > 300000) {
	                        InitSafetyUndressSequence(Player);
	                        this.holdStart = 0;
	                    }
	                }
	            }
	        }, resolution);
	    }
	    static get instance() { return this._instance; }
	    static init(resolution) {
	        if (this._instance)
	            return;
	        this._instance = new ToolsSafety(resolution);
	    }
	}

	const ItemMode = {
	    ItemHead: {
	        value: { typed: 3 }
	    },
	    ItemEars: {
	        value: { typed: 3 }
	    },
	    ItemMouth: {
	        value: { g: 2 }
	    },
	    ItemArms: {
	        value: { typed: 3 }
	    },
	    ItemHands: {
	        value: { typed: 0 }
	    },
	    ItemLegs: {
	        value: { typed: 1 }
	    },
	    ItemFeet: {
	        value: { typed: 1 }
	    },
	    ItemVulva: {
	        value: "special"
	    },
	};
	const SavedItemMode = {};
	function isSpecialMode(target) {
	    return typeof target.value === "string";
	}
	function isDefaultMode(target) {
	    return !isSpecialMode(target);
	}
	function stdCanSetPunishedMode(item, target) {
	    const tr = item.Property?.TypeRecord;
	    if (tr === undefined)
	        return false;
	    return Object.keys(target.value).some(key => {
	        return tr[key] !== target.value[key];
	    });
	}
	function stdCanRestorePunishedMode(item, saved) {
	    const tr = item.Property?.TypeRecord;
	    if (tr === undefined)
	        return false;
	    if (saved === undefined)
	        return false;
	    return Object.keys(saved.value).some(key => tr[key]);
	}
	function stdSetPunishedMode(player, item, target) {
	    const tr = item.Property?.TypeRecord;
	    if (tr === undefined)
	        return;
	    const saved = {};
	    Object.keys(target.value).forEach(key => saved[key] = tr[key]);
	    FuturisticBypass.instance.on = true;
	    ExtendedItemSetOptionByRecord(player, item, target.value);
	    FuturisticBypass.instance.on = false;
	    SavedItemMode[item.Asset.Group.Name] = { time: Date.now(), value: saved };
	}
	function stdRestorePunishedMode(player, item, saved) {
	    const tr = item.Property?.TypeRecord;
	    if (tr === undefined)
	        return;
	    FuturisticBypass.instance.on = true;
	    ExtendedItemSetOptionByRecord(player, item, saved.value, { push: true });
	    FuturisticBypass.instance.on = false;
	}
	function canPunish(item, target) {
	    if (target === undefined)
	        return false;
	    if (isDefaultMode(target)) {
	        return stdCanSetPunishedMode(item, target);
	    }
	    if (isSpecialMode(target)) {
	        if (item.Asset.Group.Name === "ItemVulva") {
	            const triggerValue = item.Property?.TriggerValues;
	            if (triggerValue === undefined)
	                return false;
	            const lls = triggerValue.split(",");
	            return lls[lls.length - 1] !== "*";
	        }
	        else
	            return false;
	    }
	    return false;
	}
	function doPunish(player, item, target) {
	    if (isDefaultMode(target)) {
	        stdSetPunishedMode(player, item, target);
	    }
	    if (isSpecialMode(target)) {
	        if (item.Asset.Group.Name === "ItemVulva") {
	            if (item.Property?.TriggerValues === undefined)
	                return;
	            const lls = item.Property.TriggerValues.split(",");
	            const saved = lls[lls.length - 1];
	            lls[lls.length - 1] = "*";
	            item.Property.TriggerValues = lls.join(",");
	            AppearanceUpdate(player, item.Asset.Group.Name);
	            SavedItemMode[item.Asset.Group.Name] = { time: Date.now(), value: saved };
	        }
	    }
	}
	function canRestore(item, saved) {
	    if (saved === undefined)
	        return false;
	    if (isDefaultMode(saved)) {
	        return stdCanRestorePunishedMode(item, saved);
	    }
	    if (isSpecialMode(saved)) {
	        if (item.Asset.Group.Name === "ItemVulva") {
	            const triggerValue = item.Property?.TriggerValues;
	            if (triggerValue === undefined)
	                return false;
	            const lls = triggerValue.split(",");
	            if (lls[lls.length - 1] !== saved.value)
	                return true;
	            else {
	                SavedItemMode[item.Asset.Group.Name] = undefined;
	                return false;
	            }
	        }
	        return false;
	    }
	    return false;
	}
	function doRestore(player, item, saved) {
	    if (isDefaultMode(saved)) {
	        stdRestorePunishedMode(player, item, saved);
	    }
	    if (isSpecialMode(saved)) {
	        if (item.Asset.Group.Name === "ItemVulva") {
	            if (item.Property?.TriggerValues === undefined)
	                return;
	            const lls = item.Property.TriggerValues.split(",");
	            lls[lls.length - 1] = saved.value;
	            item.Property.TriggerValues = lls.join(",");
	            AppearanceUpdate(player, item.Asset.Group.Name);
	            SavedItemMode[item.Asset.Group.Name] = undefined;
	        }
	    }
	}
	function randomPick(src) {
	    return src[Math.floor(Math.random() * src.length)];
	}
	class OrgasmPunishMode {
	    onOrgasm(player) {
	        if (!IsPlayerWolfGirl(player))
	            return;
	        const pModeValue = DataManager.settings.query("orgasmPunishMode");
	        if (pModeValue === 0)
	            return;
	        const canShockList = player.Appearance.filter(item => item.Asset.Group.Category === "Item")
	            .filter(item => DefaultCheckOutfitItem(item, OutfitItemsMap.get(item.Asset.Group.Name)));
	        DoShockPunish(player, randomPick(canShockList));
	        const canPunishList = canShockList.filter(item => canPunish(item, ItemMode[item.Asset.Group.Name]));
	        if (canPunishList.length === 0) {
	            const v = 1;
	            DataManager.points.points -= v;
	            ParseMessage({ mode: "action", msg: "{player_wg} has deducted {v} points, and the current points are {points}" }, { player }, { v, points: DataManager.points.points });
	        }
	        else {
	            const target = randomPick(canPunishList);
	            doPunish(player, target, ItemMode[target.Asset.Group.Name]);
	            ParseMessage({ mode: "chat-action", msg: "Oh, how does it feel? {player_wg}, do you know what this icon means now? Will you endure for the sake of freedom, or will you indulge yourself and sink into depravity and become a puppet?" }, { player });
	        }
	    }
	    onResist(player) {
	        if (!IsPlayerWolfGirl(player))
	            return;
	        const pModeValue = DataManager.settings.query("orgasmPunishMode");
	        if (pModeValue === 0)
	            return;
	        this.resistCounter++;
	        if (pModeValue === 2 && this.resistCounter <= 4)
	            return;
	        if (pModeValue === 1 && this.resistCounter <= 2)
	            return;
	        this.resistCounter = 0;
	        const canRestoreList = player.Appearance.filter(item => item.Asset.Group.Category === "Item")
	            .filter(item => DefaultCheckOutfitItem(item, OutfitItemsMap.get(item.Asset.Group.Name)))
	            .filter(item => typeof SavedItemMode[item.Asset.Group.Name] === "object")
	            .filter(item => canRestore(item, ItemMode[item.Asset.Group.Name]));
	        if (canRestoreList.length === 0)
	            return;
	        const pick = randomPick(canRestoreList);
	        doRestore(player, pick, SavedItemMode[pick.Asset.Group.Name]);
	        ParseMessage({ mode: "chat-action", msg: "Well done, {player_wg}. It looks like your hard work and perseverance paid off. So, good kids will naturally be rewarded. Keep up the hard work, ok?" }, { player });
	    }
	    constructor(org, time_reso = 200) {
	        this.org = org;
	        this.time_reso = time_reso;
	        this.resistCounter = 0;
	        setInterval(() => {
	            if (!Player || !IsPlayerWolfGirl(Player)) {
	                Object.keys(SavedItemMode).forEach(key => SavedItemMode[key] = undefined);
	                return;
	            }
	            const pModeValue = DataManager.settings.query("orgasmPunishMode");
	            if (pModeValue === 0 || pModeValue === 2)
	                return;
	            const punish_time = DataManager.points.orgasm_punish_time;
	            const now = Date.now();
	            const itemsMap = buildItemsMap(Player);
	            for (const [key, value] of Object.entries(SavedItemMode)) {
	                if (value === undefined)
	                    continue;
	                const item = itemsMap.get(key);
	                if (item === undefined || !DefaultCheckOutfitItem(item, OutfitItemsMap.get(item.Asset.Group.Name))) {
	                    SavedItemMode[key] = undefined;
	                    continue;
	                }
	                if (now - value.time > punish_time) {
	                    doRestore(Player, item, value);
	                    SavedItemMode[key] = undefined;
	                }
	            }
	        }, time_reso);
	        org.onOrgasm(p => this.onOrgasm(p));
	        org.onResist(p => this.onResist(p));
	    }
	    static init(org) {
	        if (this._instance)
	            return;
	        this._instance = new OrgasmPunishMode(org);
	    }
	}
	OrgasmPunishMode._instance = undefined;

	function DialogInventoryBuildHandler(C, lock) {
	    if (lock)
	        return;
	    Tools.forEach(e => {
	        const focus = C.FocusGroup?.Name;
	        if (!focus || focus !== e.Asset.Group)
	            return;
	        const item = ItemFromOutfit(C, C, e);
	        if (!item || !item.Craft)
	            return;
	        if (DialogCanUseCraftedItem(C, item.Craft, item.Asset))
	            DialogInventoryAdd(C, { Asset: item.Asset, Craft: item.Craft }, false);
	    });
	    DialogInventorySort();
	}
	function AdditionalInventoryInit(mod) {
	    mod.hookFunction('DialogInventoryBuild', 1, (args, next) => {
	        next(args);
	        DialogInventoryBuildHandler(args[0], args[2]);
	    });
	}

	(function () {
	    if (window.BCWolfGirl_Loaded)
	        return;
	    window.BCWolfGirl_Loaded = false;
	    const this_script_src = document.getElementById(SCRIPT_ID)?.getAttribute('src');
	    if (!this_script_src) {
	        console.error('WolfGirlLoader not found.');
	        return;
	    }
	    const asset_url = this_script_src.substring(0, this_script_src.lastIndexOf('/') + 1) + 'assets/';
	    const mod = bcMod.registerMod({
	        name: ModName,
	        fullName: ModName,
	        version: ModVersion,
	        repository: GIT_REPO
	    });
	    const lateHooks = [];
	    const lateHook = (callback) => lateHooks.push(callback);
	    OrgasmMonitor.init(mod).then(orgasm => DataManager.init(mod, `${ModName} v${ModVersion} loaded.`).then(_ => {
	        DataManager.arousal.setMonitor((pl) => IsPlayerWolfGirl(pl), orgasm);
	        TaskCtrlInit(1000, orgasm);
	        OrgasmPunishMode.init(orgasm);
	    }));
	    TimedWorker.init(1000);
	    TimeStat.init(1000);
	    ToolsSafety.init(10000);
	    EILNetwork.init(asset_url);
	    ChatRoomAction.init(CUSTOM_ACTION_TAG);
	    BeepHandler(mod);
	    ChatRoomHandler.init(mod).then(handler => ChatHandler(handler));
	    AdditionalInventoryInit(mod);
	    WolfGirlCtrlInit(mod, lateHook);
	    ActivityProvider.init(mod);
	    ChatRoomWork.init(mod, lateHook);
	    InjectionManager.init(mod, lateHook);
	    let initial_notify_not_shown = true;
	    mod.hookFunction('ChatRoomRun', 20, (args, next) => {
	        next(args);
	        if (initial_notify_not_shown) {
	            ChatRoomAction.instance.LocalAction(`EIL狼女训练套装智能化辅助系统 ${ModVersion} 已加载。`);
	            initial_notify_not_shown = false;
	        }
	    });
	    InitChatCmds(lateHook);
	    (async () => {
	        while (typeof window.Player === 'undefined')
	            await new Promise(resolve => setTimeout(resolve, 500));
	        lateHooks.forEach(hook => hook());
	    })();
	    window.BCWolfGirl_Loaded = true;
	})();

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
